{
  "address": "0xe12942B4a8e1f6E5bB4c5e7AA64C1fc4BBB7e76B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "ExchangerProxyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "PauseChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RewardEscrowUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEES_PAID_SAFETY_MINIMUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_STAKING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_TRADING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING_SAFETY_MINIMUM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEIGHT_FEES",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEIGHT_STAKING",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "__Owned_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "__Pausable_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "escrowedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangerProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "feesPaidBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardEscrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_supplySchedule",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weeklyStartRewards",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPauseTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardEscrow",
      "outputs": [
        {
          "internalType": "contract RewardEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "name": "rewardPerRewardScoreOfEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRateStaking",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRateTrading",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "rewardScoreOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangerProxy",
          "type": "address"
        }
      ],
      "name": "setExchangerProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentageStaking",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentageTrading",
          "type": "uint256"
        }
      ],
      "name": "setPercentageRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardEscrow",
          "type": "address"
        }
      ],
      "name": "setRewardEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newWeeklyStart",
          "type": "uint256"
        }
      ],
      "name": "setWeeklyStartRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "stakedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplySchedule",
      "outputs": [
        {
          "internalType": "contract ISupplySchedule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "totalBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newFeesPaid",
          "type": "uint256"
        }
      ],
      "name": "updateTraderScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weeklyStartRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "ee7a47eef76e566acaa3fa51ec176ca2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExchangerProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RewardEscrowUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEES_PAID_SAFETY_MINIMUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_STAKING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_TRADING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_SAFETY_MINIMUM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEIGHT_FEES\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEIGHT_STAKING\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"__Owned_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"__Pausable_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"escrowedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangerProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"feesPaidBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplySchedule\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weeklyStartRewards\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEscrow\",\"outputs\":[{\"internalType\":\"contract RewardEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"name\":\"rewardPerRewardScoreOfEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardScoreOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangerProxy\",\"type\":\"address\"}],\"name\":\"setExchangerProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentageStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageTrading\",\"type\":\"uint256\"}],\"name\":\"setPercentageRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardEscrow\",\"type\":\"address\"}],\"name\":\"setRewardEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newWeeklyStart\",\"type\":\"uint256\"}],\"name\":\"setWeeklyStartRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplySchedule\",\"outputs\":[{\"internalType\":\"contract ISupplySchedule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newFeesPaid\",\"type\":\"uint256\"}],\"name\":\"updateTraderScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyStartRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setPaused(bool)\":{\"details\":\"Only the contract owner may call this.\"},\"setPercentageRewards(uint256,uint256)\":{\"details\":\"Only the owner can use this function and parameters should be in base 10_000 (80% = 8_000)\",\"params\":{\"_percentageStaking\":\"the % of rewards to distribute to staking scores\",\"_percentageTrading\":\"the % of rewards to distribute to reward scores\"}},\"setWeeklyStartRewards(uint256)\":{\"details\":\"As UNIX times started on a Thursday (January 1st 1970), shift n days as necessary, e.g. to start on a Monday go 3 days prior (Wednesday, Tuesday, Monday), the remaining options are: Friday: 6 Saturday: 5 Sunday: 4  Monday: 3 Tuesday: 2 Wednesday: 1 Thursday: 0\",\"params\":{\"newWeeklyStart\":\"the number of days to shift\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setPaused(bool)\":{\"notice\":\"Change the paused state of the contract\"},\"setPercentageRewards(uint256,uint256)\":{\"notice\":\"Set the % distribution between staking and trading\"},\"setWeeklyStartRewards(uint256)\":{\"notice\":\"Set the day of the week the reward epochs start\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal initializer {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcc3fca7831523600d2cac44ec77ee7e079f70c6910b6d7229ff774eaa5f04cdc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce27d2053e9b7a970532947213c84eed0289ada2d9a91c92b7e1e15f3a466c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal initializer {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal initializer {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6eecf5abec3cd10b2e9234936b80b6cb7c174e926542a2fe690a0186558deb40\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc15eeb888d421aa4dedf46768a0502590d88911cfe5750d3ab9f644a7e5ada95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/RewardEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n// Inheritance\\nimport \\\"./utils/Owned.sol\\\";\\nimport \\\"./interfaces/IRewardEscrow.sol\\\";\\n\\n// Libraries\\nimport \\\"./libraries/SafeDecimalMath.sol\\\";\\n\\n// Internal references\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IKwenta.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\n\\ncontract RewardEscrow is Owned, IRewardEscrow {\\n    using SafeDecimalMath for uint;\\n\\n    IKwenta public immutable kwenta;\\n\\n    IStakingRewards public stakingRewards;\\n    bool private stakingRewardsSet = false;\\n\\n    mapping(address => mapping(uint256 => VestingEntries.VestingEntry)) public vestingSchedules;\\n\\n    mapping(address => uint256[]) public accountVestingEntryIDs;\\n\\n    /*Counter for new vesting entry ids. */\\n    uint256 public nextEntryId;\\n\\n    /* An account's total escrowed KWENTA balance to save recomputing this for fee extraction purposes. */\\n    mapping(address => uint256) override public totalEscrowedAccountBalance;\\n\\n    /* An account's total vested reward KWENTA. */\\n    mapping(address => uint256) override public totalVestedAccountBalance;\\n\\n    /* The total remaining escrowed balance, for verifying the actual KWENTA balance of this contract against. */\\n    uint256 public totalEscrowedBalance;\\n\\n    /* Max escrow duration */\\n    uint public constant max_duration = 2 * 52 weeks; // Default max 2 years duration\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address _owner, address _kwenta) Owned(_owner) {\\n        nextEntryId = 1;\\n\\n        // set the Kwenta contract address as we need to transfer KWENTA when the user vests\\n        kwenta = IKwenta(_kwenta);\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /*\\n    * @notice Function used to define the StakingRewards to use\\n    */\\n    function setStakingRewards(address _stakingRewards) public onlyOwner {\\n        require(!stakingRewardsSet, \\\"Staking Rewards already set\\\");\\n        stakingRewardsSet = true;\\n        \\n        stakingRewards = IStakingRewards(_stakingRewards);\\n        emit StakingRewardsSet(address(_stakingRewards));\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * @notice A simple alias to totalEscrowedAccountBalance: provides ERC20 balance integration.\\n     */\\n    function balanceOf(address account) override public view returns (uint) {\\n        return totalEscrowedAccountBalance[account];\\n    }\\n\\n    /**\\n     * @notice The number of vesting dates in an account's schedule.\\n     */\\n    function numVestingEntries(address account) override external view returns (uint) {\\n        return accountVestingEntryIDs[account].length;\\n    }\\n\\n    /**\\n     * @notice Get a particular schedule entry for an account.\\n     * @return endTime the vesting entry object \\n     * @return escrowAmount rate per second emission.\\n     */\\n    function getVestingEntry(address account, uint256 entryID) override external view returns (uint64 endTime, uint256 escrowAmount, uint256 duration) {\\n        endTime = vestingSchedules[account][entryID].endTime;\\n        escrowAmount = vestingSchedules[account][entryID].escrowAmount;\\n        duration = vestingSchedules[account][entryID].duration;\\n    }\\n\\n    function getVestingSchedules(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) override external view returns (VestingEntries.VestingEntryWithID[] memory) {\\n        uint256 endIndex = index + pageSize;\\n\\n        // If index starts after the endIndex return no results\\n        if (endIndex <= index) {\\n            return new VestingEntries.VestingEntryWithID[](0);\\n        }\\n\\n        // If the page extends past the end of the accountVestingEntryIDs, truncate it.\\n        if (endIndex > accountVestingEntryIDs[account].length) {\\n            endIndex = accountVestingEntryIDs[account].length;\\n        }\\n\\n        uint256 n = endIndex - index;\\n        VestingEntries.VestingEntryWithID[] memory vestingEntries = new VestingEntries.VestingEntryWithID[](n);\\n        for (uint256 i; i < n; i++) {\\n            uint256 entryID = accountVestingEntryIDs[account][i + index];\\n\\n            VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryID];\\n\\n            vestingEntries[i] = VestingEntries.VestingEntryWithID({\\n                endTime: uint64(entry.endTime),\\n                escrowAmount: entry.escrowAmount,\\n                entryID: entryID\\n            });\\n        }\\n        return vestingEntries;\\n    }\\n\\n    function getAccountVestingEntryIDs(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) override external view returns (uint256[] memory) {\\n        uint256 endIndex = index + pageSize;\\n\\n        // If the page extends past the end of the accountVestingEntryIDs, truncate it.\\n        if (endIndex > accountVestingEntryIDs[account].length) {\\n            endIndex = accountVestingEntryIDs[account].length;\\n        }\\n        if (endIndex <= index) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 n = endIndex - index;\\n        uint256[] memory page = new uint256[](n);\\n        for (uint256 i; i < n; i++) {\\n            page[i] = accountVestingEntryIDs[account][i + index];\\n        }\\n        return page;\\n    }\\n\\n    function getVestingQuantity(address account, uint256[] calldata entryIDs) override external view returns (uint total, uint totalFee) {\\n        for (uint i = 0; i < entryIDs.length; i++) {\\n            VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryIDs[i]];\\n\\n            /* Skip entry if escrowAmount == 0 */\\n            if (entry.escrowAmount != 0) {\\n                (uint256 quantity, uint256 fee) = _claimableAmount(entry);\\n\\n                /* add quantity to total */\\n                total += quantity;\\n                totalFee += fee;\\n            }\\n        }\\n    }\\n\\n    function getVestingEntryClaimable(address account, uint256 entryID) override external view returns (uint, uint) {\\n        VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryID];\\n        return _claimableAmount(entry);\\n    }\\n\\n    function _claimableAmount(VestingEntries.VestingEntry memory _entry) internal view returns (uint256, uint256) {\\n        uint256 escrowAmount = _entry.escrowAmount;\\n        uint256 quantity;\\n        uint256 fee;\\n        if (escrowAmount != 0) {\\n            /* Full escrow amounts claimable if block.timestamp equal to or after entry endTime */\\n            if (block.timestamp >= _entry.endTime) {\\n                quantity = escrowAmount;\\n            } else {\\n                fee = _earlyVestFee(_entry);\\n                quantity = escrowAmount - fee;\\n            }\\n        }\\n        return (quantity, fee);\\n    }\\n\\n    function _earlyVestFee(VestingEntries.VestingEntry memory _entry) internal view returns (uint256) {\\n        uint timeUntilVest = _entry.endTime - block.timestamp;\\n        // Fee starts at 80% and falls linearly\\n        uint initialFee = _entry.escrowAmount * 8 / 10;\\n        return initialFee * timeUntilVest / _entry.duration;\\n    }\\n\\n    function _isStaked(address _account) internal view returns (bool) {\\n        return stakingRewards.escrowedBalanceOf(_account) > 0;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * Vest escrowed amounts that are claimable\\n     * Allows users to vest their vesting entries based on msg.sender\\n     */\\n\\n    function vest(uint256[] calldata entryIDs) override external {\\n        uint256 total;\\n        uint256 totalFee;\\n        for (uint i = 0; i < entryIDs.length; i++) {\\n            VestingEntries.VestingEntry storage entry = vestingSchedules[msg.sender][entryIDs[i]];\\n\\n            /* Skip entry if escrowAmount == 0 already vested */\\n            if (entry.escrowAmount != 0) {\\n                (uint256 quantity, uint256 fee) = _claimableAmount(entry);\\n\\n                /* update entry to remove escrowAmount */\\n                entry.escrowAmount = 0;\\n\\n                /* add quantity to total */\\n                total += quantity;\\n                totalFee += fee;\\n            }\\n        }\\n\\n        /* Transfer vested tokens. Will revert if total > totalEscrowedAccountBalance */\\n        if (total != 0) {\\n            // Withdraw staked escrowed kwenta if needed for reward\\n            if (_isStaked(msg.sender)) {\\n                uint totalWithFee = total + totalFee;\\n                uint unstakedEscrow = totalEscrowedAccountBalance[msg.sender] - stakingRewards.escrowedBalanceOf(msg.sender);\\n                if (totalWithFee > unstakedEscrow) {\\n                    uint amountToUnstake = totalWithFee - unstakedEscrow;\\n                    unstakeEscrow(amountToUnstake);\\n                }\\n            }\\n\\n            // Burn kwenta if fee\\n            if (totalFee != 0) {\\n                _reduceAccountEscrowBalances(msg.sender, totalFee);\\n                kwenta.burn(totalFee);\\n            }\\n\\n            // Transfer kwenta\\n            _transferVestedTokens(msg.sender, total);\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice Create an escrow entry to lock KWENTA for a given duration in seconds\\n     * @dev This call expects that the depositor (msg.sender) has already approved the Reward escrow contract\\n     to spend the the amount being escrowed.\\n     */\\n    function createEscrowEntry(\\n        address beneficiary,\\n        uint256 deposit,\\n        uint256 duration\\n    ) override external {\\n        require(beneficiary != address(0), \\\"Cannot create escrow with address(0)\\\");\\n\\n        /* Transfer KWENTA from msg.sender */\\n        require(IERC20(kwenta).transferFrom(msg.sender, address(this), deposit), \\\"Token transfer failed\\\");\\n\\n        /* Append vesting entry for the beneficiary address */\\n        _appendVestingEntry(beneficiary, deposit, duration);\\n    }\\n\\n    /**\\n     * @notice Add a new vesting entry at a given time and quantity to an account's schedule.\\n     * @dev A call to this should accompany a previous successful call to kwenta.transfer(rewardEscrow, amount),\\n     * to ensure that when the funds are withdrawn, there is enough balance.\\n     * @param account The account to append a new vesting entry to.\\n     * @param quantity The quantity of KWENTA that will be escrowed.\\n     * @param duration The duration that KWENTA will be emitted.\\n     */\\n    function appendVestingEntry(\\n        address account,\\n        uint256 quantity,\\n        uint256 duration\\n    ) override external onlyStakingRewards {\\n        _appendVestingEntry(account, quantity, duration);\\n    }\\n\\n    /**\\n     * @notice Stakes escrowed KWENTA.\\n     * @dev No tokens are transfered during this process, but the StakingRewards escrowed balance is updated.\\n     * @param _amount The amount of escrowed KWENTA to be staked.\\n     */\\n    function stakeEscrow(uint256 _amount) override external {\\n        require(_amount + stakingRewards.escrowedBalanceOf(msg.sender) <= totalEscrowedAccountBalance[msg.sender], \\\"Insufficient unstaked escrow\\\");\\n        stakingRewards.stakeEscrow(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstakes escrowed KWENTA.\\n     * @dev No tokens are transfered during this process, but the StakingRewards escrowed balance is updated.\\n     * @param _amount The amount of escrowed KWENTA to be unstaked.\\n     */\\n    function unstakeEscrow(uint256 _amount) override public {\\n        stakingRewards.unstakeEscrow(msg.sender, _amount);\\n    }\\n\\n    /* Transfer vested tokens and update totalEscrowedAccountBalance, totalVestedAccountBalance */\\n    function _transferVestedTokens(address _account, uint256 _amount) internal {\\n        _reduceAccountEscrowBalances(_account, _amount);\\n        totalVestedAccountBalance[_account] += _amount;\\n        IERC20(address(kwenta)).transfer(_account, _amount);\\n        emit Vested(_account, block.timestamp, _amount);\\n    }\\n\\n    function _reduceAccountEscrowBalances(address _account, uint256 _amount) internal {\\n        // Reverts if amount being vested is greater than the account's existing totalEscrowedAccountBalance\\n        totalEscrowedBalance -= _amount;\\n        totalEscrowedAccountBalance[_account] -= _amount;\\n    }\\n\\n    /* ========== INTERNALS ========== */\\n\\n    function _appendVestingEntry(\\n        address account,\\n        uint256 quantity,\\n        uint256 duration\\n    ) internal {\\n        /* No empty or already-passed vesting entries allowed. */\\n        require(quantity != 0, \\\"Quantity cannot be zero\\\");\\n        require(duration > 0 && duration <= max_duration, \\\"Cannot escrow with 0 duration OR above max_duration\\\");\\n\\n        /* There must be enough balance in the contract to provide for the vesting entry. */\\n        totalEscrowedBalance += quantity;\\n\\n        require(\\n            totalEscrowedBalance <= IERC20(address(kwenta)).balanceOf(address(this)),\\n            \\\"Must be enough balance in the contract to provide for the vesting entry\\\"\\n        );\\n\\n        /* Escrow the tokens for duration. */\\n        uint endTime = block.timestamp + duration;\\n\\n        /* Add quantity to account's escrowed balance */\\n        totalEscrowedAccountBalance[account] += quantity;\\n\\n        uint entryID = nextEntryId;\\n        vestingSchedules[account][entryID] = VestingEntries.VestingEntry({endTime: uint64(endTime), escrowAmount: quantity, duration: duration});\\n\\n        accountVestingEntryIDs[account].push(entryID);\\n\\n        /* Increment the next entry id. */\\n        nextEntryId++;\\n\\n        emit VestingEntryCreated(account, block.timestamp, quantity, duration, entryID);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n    modifier onlyStakingRewards() {\\n        require(msg.sender == address(stakingRewards), \\\"Only the StakingRewards can perform this action\\\");\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n    event Vested(address indexed beneficiary, uint time, uint value);\\n    event VestingEntryCreated(address indexed beneficiary, uint time, uint value, uint duration, uint entryID);\\n    event StakingRewardsSet(address rewardEscrow);\\n}\\n\",\"keccak256\":\"0xf767171f1280829977dbfc600caa1ae8f58a76c00d23b91d74985903f84b21c8\",\"license\":\"MIT\"},\"contracts/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Import necessary contracts for math operations and Token handling\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./libraries/FixidityLib.sol\\\";\\nimport \\\"./libraries/ExponentLib.sol\\\";\\nimport \\\"./libraries/LogarithmLib.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\n// Import SupplySchedule interface for access control of setReward\\nimport \\\"./interfaces/ISupplySchedule.sol\\\";\\n\\n// Inheritance\\nimport \\\"./utils/Pausable.sol\\\";\\n// Import RewardEscrow contract for Escrow interactions\\nimport \\\"./RewardEscrow.sol\\\";\\n\\n/*\\n    StakingRewards contract for Kwenta responsible for:\\n    - Staking KWENTA tokens\\n    - Withdrawing KWENTA tokens\\n    - Updating staker and trader scores\\n    - Calculating and notifying rewards\\n*/\\ncontract StakingRewards is IStakingRewards, ReentrancyGuardUpgradeable, Pausable, UUPSUpgradeable {\\n    using FixidityLib for FixidityLib.Fixidity;\\n    using ExponentLib for FixidityLib.Fixidity;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    FixidityLib.Fixidity private fixidity;\\n\\n    // Reward Escrow\\n    RewardEscrow public rewardEscrow;\\n\\n    // Supply Schedule\\n    ISupplySchedule public supplySchedule;\\n\\n    // ExchangerProxy\\n    address public exchangerProxy;\\n\\n    // Token to stake and reward\\n    IERC20 public stakingToken;\\n    // Time handling:\\n    // Time where new reward epoch finishes \\n    uint256 public periodFinish;\\n    uint256 public weeklyStartRewards;\\n    // Reward rate per second for next epoch\\n    uint256 public rewardRate;\\n    uint256 public rewardRateStaking;\\n    uint256 public rewardRateTrading;\\n    // Last Update Time for staking Rewards\\n    uint256 private lastUpdateTime;\\n    // Last reward per token staked\\n    uint256 private rewardPerTokenStored;\\n    uint256 public currentEpoch;\\n    \\n    // Save the date of the latest interaction for each address (Trading Rewards)\\n    mapping(address => uint256) private lastTradeUserEpoch;\\n    // Save the rewardPerRewardScore of each epoch for backward reward calculation\\n    mapping(uint256 => uint256) private epochRewardPerRewardScore;\\n    // Save the latest reward per Token applicable for each address (Staking Rewards)\\n    mapping(address => uint256) private userRewardPerTokenPaid;\\n    // Rewards due to each account\\n    mapping(address => uint256) public rewards;\\n\\n    // Total RewardsScore\\n    uint256 private _totalRewardScore;\\n    // Total tokens included in rewards (both staked and escrowed)\\n    uint256 private _totalSupply;\\n    \\n    // Tokens escrowed for each address\\n    mapping(address => uint256) private _escrowedBalances;\\n    // Fees paid for each address\\n    mapping(address => uint256) private _feesPaid;\\n    // Save the latest total token to account for rewards (staked + escrowed rewards)\\n    mapping(address => uint256) private _totalBalances;\\n    // Save the rewardScore per address\\n    mapping(address => uint256) private _rewardScores;\\n    // Division of rewards between staking and trading\\n    uint256 public PERCENTAGE_STAKING;\\n    uint256 public PERCENTAGE_TRADING;\\n    \\n    // Decimals calculations\\n    uint256 private constant MAX_BPS = 10_000;\\n    uint256 private constant DECIMALS_DIFFERENCE = 1e30;\\n    // Constant to return the reward scores with the correct decimal precision\\n    uint256 private constant TOKEN_DECIMALS = 1e18;\\n    // Needs to be int256 for power library, root to calculate is equal to 0.7\\n    int256 public WEIGHT_FEES;\\n    // Needs to be int256 for power library, root to calculate is equal to 0.3\\n    int256 public WEIGHT_STAKING;\\n    // Time constants\\n    uint256 private constant DAY = 1 days;\\n    uint256 private constant WEEK = 7 days;\\n\\n    uint256 public constant STAKING_SAFETY_MINIMUM = 1e4;\\n    uint256 public constant FEES_PAID_SAFETY_MINIMUM = 1e12;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n    event EscrowStaked(address account, uint256 amount);\\n    event EscrowUnstaked(address account, uint256 amount);\\n    event RewardEscrowUpdated(address account);\\n    event ExchangerProxyUpdated(address account);\\n    \\n    /* ========== INITIALIZER ========== */\\n    \\n    function initialize(\\n        address _owner,\\n        address _stakingToken,\\n        address _rewardEscrow,\\n        address _supplySchedule,\\n        uint256 _weeklyStartRewards\\n    ) public initializer {\\n        __Pausable_init(_owner);\\n\\n        __ReentrancyGuard_init();\\n\\n        periodFinish = 0;\\n        rewardRate = 0;\\n\\n        stakingToken = IERC20(_stakingToken);\\n        fixidity.init(18);\\n\\n        rewardEscrow = RewardEscrow(_rewardEscrow);\\n        supplySchedule = ISupplySchedule(_supplySchedule);\\n\\n        PERCENTAGE_STAKING = 8_000;\\n        PERCENTAGE_TRADING = 2_000;\\n\\n        WEIGHT_STAKING = 3e17;\\n        WEIGHT_FEES = 7e17;\\n\\n        weeklyStartRewards = _weeklyStartRewards;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /*\\n     * @notice Getter function for the state variable _totalRewardScore\\n     * Divided by 1e18 as during the calculation we are multiplying two 18 decimal numbers, ending up with \\n     * a 36 precision number. To avoid losing any precision by scaling it down during internal calculations,\\n     * we only scale it down for the getters\\n     * @return sum of all rewardScores\\n     */\\n    function totalRewardScore() override public view returns (uint256) {\\n        return _totalRewardScore / TOKEN_DECIMALS;\\n    }\\n\\n    /*\\n     * @notice Getter function for the staked balance of an account\\n     * @param account address to check token balance of\\n     * @return token balance of specified account\\n     */\\n    function stakedBalanceOf(address account) override public view returns (uint256) {\\n        return _totalBalances[account] - _escrowedBalances[account];\\n    }\\n\\n    /*\\n     * @notice Getter function for the reward score of an account\\n     * Divided by 1e18 as during the calculation we are multiplying two 18 decimal numbers, ending up with \\n     * a 36 precision number. To avoid losing any precision by scaling it down during internal calculations,\\n     * we only scale it down for the getters\\n     * @param account address to check the reward score of\\n     * @return reward score of specified account\\n     */\\n    function rewardScoreOf(address account) override external view returns (uint256) {\\n        return _rewardScores[account] / TOKEN_DECIMALS;\\n    }\\n\\n    /*\\n     * @notice Getter function for the total balances of an account (staked + escrowed rewards)\\n     * @param account address to check the total balance of\\n     * @return total balance of specified account\\n     */\\n    function totalBalanceOf(address account) override external view returns (uint256) {\\n        return _totalBalances[account];\\n    }\\n\\n    /*\\n     * @notice Getter function for the escrowed balance of an account\\n     * @param account address to check the escrowed balance of\\n     * @return escrowed balance of specified account\\n     */\\n    function escrowedBalanceOf(address account) override external view returns (uint256) {\\n        return _escrowedBalances[account];\\n    }\\n\\n    /*\\n     * @notice Getter function for the reward per reward score of a past epoch\\n     * @param id of the week to get the reward\\n     * @return reward per reward score of specified week\\n     */\\n    function rewardPerRewardScoreOfEpoch(uint256 _epoch) override external view returns (uint256) {\\n        return epochRewardPerRewardScore[_epoch];\\n    }\\n\\n    /*\\n     * @notice Getter function for the total fees paid by an account\\n     * @param account address to check the fees balance of\\n     * @return fees of specified account\\n     */\\n    function feesPaidBy(address account) override external view returns (uint256) {\\n        return _feesPaid[account];\\n    }\\n\\n    /*\\n     * @notice Calculate if we are still in the reward epoch or we reached periodFinish\\n     * @return Max date to sum rewards, either now or period finish\\n     */\\n    function lastTimeRewardApplicable() override public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    /*\\n     * @notice Calculate the reward distribution per token based on the time elapsed and current value of totalSupply\\n     * @return corresponding reward per token stored\\n     */\\n    function rewardPerToken() override public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored + (\\n                (lastTimeRewardApplicable() - lastUpdateTime) * rewardRateStaking * DECIMALS_DIFFERENCE / _totalSupply\\n            );\\n    }\\n\\n    /*\\n     * @notice Function calculating the rewards earned by an account between the current call moment and the latest change in\\n     * reward score. The function divides the reward score by the total amount, accounts for the changes between now and the \\n     * last changes (deducting userRewardPerRewardScorePaid) and adds the result to the existing rewards balance of the account\\n     * @param account to calculate the earned rewards\\n     * @return uint256 containing the total rewards due to account\\n     */\\n    function earned(address account) override public view returns(uint256) {\\n        uint256 stakingRewards = _totalBalances[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) / DECIMALS_DIFFERENCE;\\n        uint256 tradingRewards = 0;\\n        if (lastTradeUserEpoch[account] < currentEpoch) {\\n            tradingRewards = _rewardScores[account] * epochRewardPerRewardScore[lastTradeUserEpoch[account]] / DECIMALS_DIFFERENCE;\\n        }\\n        return stakingRewards + tradingRewards + rewards[account];\\n    }\\n\\n    /**\\n     * @notice Calculate the reward epoch for a specific date, taking into account the day they start\\n     * @param _date to calculate the reward epoch for\\n     * @return uint256 containing the date of the start of the epoch\\n     */\\n    function getEpochForDate(uint256 _date) internal view returns(uint256) {\\n        _date = (_date / DAY) * DAY;\\n        uint256 naturalEpoch = (_date / WEEK) * WEEK;\\n\\n        if (_date - naturalEpoch >= (7 - weeklyStartRewards) * DAY) {\\n            return naturalEpoch + WEEK - weeklyStartRewards * DAY;\\n        } else {\\n            return naturalEpoch - weeklyStartRewards*DAY;\\n        }\\n\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice Set the % distribution between staking and trading\\n     * @dev Only the owner can use this function and parameters should be in base 10_000 (80% = 8_000)\\n     * @param _percentageStaking the % of rewards to distribute to staking scores\\n     * @param _percentageTrading the % of rewards to distribute to reward scores\\n     */\\n    function setPercentageRewards(uint256 _percentageStaking, uint256 _percentageTrading) override external onlyOwner {\\n        require(_percentageTrading + _percentageStaking == 10_000);\\n        PERCENTAGE_STAKING = _percentageStaking;\\n        PERCENTAGE_TRADING = _percentageTrading;\\n    }\\n\\n    /**\\n     * @notice Set the day of the week the reward epochs start\\n     * @dev As UNIX times started on a Thursday (January 1st 1970), shift n days as necessary, e.g. to start\\n     * on a Monday go 3 days prior (Wednesday, Tuesday, Monday), the remaining options are:\\n     * Friday: 6\\n     * Saturday: 5\\n     * Sunday: 4 \\n     * Monday: 3\\n     * Tuesday: 2\\n     * Wednesday: 1\\n     * Thursday: 0\\n     * @param newWeeklyStart the number of days to shift\\n     */\\n    function setWeeklyStartRewards(uint256 newWeeklyStart) external onlyOwner {\\n        require(newWeeklyStart < 7);\\n        weeklyStartRewards = newWeeklyStart;\\n    }\\n\\n    /**\\n     * @notice If this is the first interaction with the contract in a new Epoch, save the rewardPerRewardScore\\n     * in the epochs mapping\\n     */\\n    function updateRewardEpoch() internal {\\n        // Dividing by week to get the last batch of 7 days, as UNIX started in 1970/01/01 (Thursday), we\\n        // go back 3 days to start a Monday\\n        uint256 newEpoch = getEpochForDate(block.timestamp);\\n\\n        if(newEpoch > currentEpoch) {\\n            // Save rewardRateTrading * WEEK / _totalRewardScore to epoch mapping\\n            if(_totalRewardScore > 0 && currentEpoch < getEpochForDate(periodFinish)) {\\n                epochRewardPerRewardScore[currentEpoch] = rewardRateTrading * WEEK * DECIMALS_DIFFERENCE / _totalRewardScore;\\n            }\\n            _totalRewardScore = 0;\\n            currentEpoch = newEpoch;\\n        }\\n\\n    }\\n\\n    /*\\n     * @notice Function called by the ExchangerProxy updating the fees paid by each account and the contribution\\n     * to the total reward scores\\n     * @param _trader: address, for which to update the score\\n     * @param _feesPaid: uint256, total fees paid in this period\\n     */\\n    function updateTraderScore(address _trader, uint256 _newFeesPaid) override external onlyExchangerProxy updateRewards(_trader) {\\n        uint256 oldRewardScore = _rewardScores[_trader];\\n        if (lastTradeUserEpoch[_trader] < currentEpoch) {\\n            _feesPaid[_trader] = _newFeesPaid;\\n            lastTradeUserEpoch[_trader] = currentEpoch;\\n            oldRewardScore = 0;\\n        } else {\\n            _feesPaid[_trader] += _newFeesPaid;\\n        }\\n        updateRewardScore(_trader, oldRewardScore);\\n    }\\n\\n    /*\\n     * @notice update the reward score:\\n     * - if there hasn\\u00b4t been a trade in the currentEpoch, return 0\\n     * - if there has, update the reward score\\n     * @param _account, the user to update the reward score to\\n     */\\n    function updateRewardScore(address _account, uint256 _oldRewardScore) internal {\\n        // Prevent any staking balance change from falling within the danger threshold\\n        require(_totalBalances[_account] == 0 || _totalBalances[_account] >= STAKING_SAFETY_MINIMUM, \\\"STAKING_SAFETY_MINIMUM\\\");\\n        // Prevent any fees paid change from falling witihin the danger threshold\\n        require(_feesPaid[_account] == 0 || _feesPaid[_account] >= FEES_PAID_SAFETY_MINIMUM, \\\"FEES_PAID_SAFETY_MINIMUM\\\");\\n        \\n        uint256 newRewardScore = 0;\\n        if((lastTradeUserEpoch[_account] == currentEpoch) && (_totalBalances[_account] > 0)) {\\n            newRewardScore = uint256(fixidity.power_any(int256(_totalBalances[_account]), WEIGHT_STAKING)) * (uint256(fixidity.power_any(int256(_feesPaid[_account]), WEIGHT_FEES)));\\n        }\\n\\n        if(lastTradeUserEpoch[_account] < currentEpoch) {\\n            _oldRewardScore = 0;\\n        }\\n\\n        _rewardScores[_account] = newRewardScore;\\n        _totalRewardScore = _totalRewardScore  - _oldRewardScore + newRewardScore;\\n\\n    }\\n\\n\\n    /*\\n     * @notice Function staking the requested tokens by the user.\\n     * @param _amount: uint256, containing the number of tokens to stake\\n     */\\n    function stake(uint256 _amount) override external nonReentrant notPaused updateRewards(msg.sender) {\\n        require(_amount > 0);\\n        // Update caller balance\\n        _totalBalances[msg.sender] += _amount;\\n        _totalSupply += _amount;\\n        updateRewardScore(msg.sender, _rewardScores[msg.sender]);\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n        emit Staked(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Function withdrawing the requested tokens by the user.\\n     * @param _amount: uint256, containing the number of tokens to stake\\n     */\\n    function withdraw(uint256 _amount) override public nonReentrant updateRewards(msg.sender) {\\n        require(_amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(stakedBalanceOf(msg.sender) >= _amount);\\n        // Update caller balance\\n        _totalBalances[msg.sender] -= _amount;\\n        _totalSupply -=  _amount;\\n        updateRewardScore(msg.sender, _rewardScores[msg.sender]);\\n        stakingToken.transfer(msg.sender, _amount);\\n        emit Withdrawn(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Function transferring the accumulated rewards for the caller address and updating the state mapping \\n     * containing the current rewards\\n     */\\n    function getReward() override public updateRewards(msg.sender) nonReentrant {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            \\n            // Send the rewards to Escrow for 1 year\\n            stakingToken.transfer(address(rewardEscrow), reward);\\n            rewardEscrow.appendVestingEntry(msg.sender, reward, 52 weeks);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    /*\\n     * @notice Function handling the exit of the protocol of the caller:\\n     * - Withdraws all tokens\\n     * - Transfers all rewards to caller's address\\n     */\\n    function exit() override external {\\n        withdraw(stakedBalanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    /*\\n     * @notice Function called from RewardEscrow to accumulate escrowed tokens into rewards\\n     * @param _account: address escrowing the rewards\\n     * @param _amount: uint256, amount escrowed\\n     */\\n    function stakeEscrow(address _account, uint256 _amount) override public onlyRewardEscrow updateRewards(_account) {\\n        _totalBalances[_account] +=  _amount;\\n        _totalSupply +=  _amount;\\n        _escrowedBalances[_account] +=  _amount;\\n        updateRewardScore(msg.sender, _rewardScores[msg.sender]);\\n        emit EscrowStaked(_account, _amount);\\n    }\\n\\n    /*\\n     * @notice Function called from RewardEscrow (vest) to deduct the escrowed tokens and not accumulate rewards\\n     * @param _account: address escrowing the rewards\\n     * @param _amount: uint256, amount escrowed\\n     */\\n    function unstakeEscrow(address _account, uint256 _amount) override public nonReentrant onlyRewardEscrow updateRewards(_account) {\\n        require(_escrowedBalances[_account] >= _amount);\\n        _totalBalances[_account] -= _amount;\\n        _totalSupply -= _amount;\\n        _escrowedBalances[_account] -= _amount;\\n        updateRewardScore(msg.sender, _rewardScores[msg.sender]);\\n        emit EscrowUnstaked(_account, _amount);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /*\\n     * @notice Function used to set the rewards for the next epoch\\n     * @param reward, total amount to distribute\\n     */  \\n    function setRewards(uint256 reward) override external onlySupplySchedule updateRewards(address(0)) {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward / WEEK;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            // @notice this is previous rewardRate\\n            uint256 leftover = remaining * rewardRate;\\n            rewardRate = reward + (leftover / WEEK);\\n        }\\n\\n        rewardRateStaking = rewardRate * PERCENTAGE_STAKING / MAX_BPS;\\n        rewardRateTrading = rewardRate * PERCENTAGE_TRADING / MAX_BPS;\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + WEEK;\\n        emit RewardAdded(reward);\\n    }\\n\\n    // @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAddress != address(stakingToken));\\n        IERC20(tokenAddress).transfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /*\\n     * @notice Function available for the owner to change the rewardEscrow contract to use\\n     * @param address of the rewardEsxrow contract to use\\n     */\\n    function setRewardEscrow(address _rewardEscrow) external onlyOwner {\\n        require(\\n            address(RewardEscrow(_rewardEscrow).kwenta()) == address(stakingToken), \\n            \\\"staking token address not equal to RewardEscrow KWENTA address\\\"\\n        );\\n        rewardEscrow = RewardEscrow(_rewardEscrow);\\n        emit RewardEscrowUpdated(address(_rewardEscrow));\\n    }\\n\\n    /*\\n     * @notice Function available for the owner to change the exchangerProxy contract to use\\n     * @param address of the exchanger proxy to use\\n     */\\n    function setExchangerProxy(address _exchangerProxy) external onlyOwner {\\n        exchangerProxy = _exchangerProxy;\\n        emit ExchangerProxyUpdated(_exchangerProxy);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /*\\n     * @notice Modifier called each time an event changing the trading score is updated:\\n     * - update trader score\\n     * - notify reward amount\\n     * The modifier saves the state of the reward rate per fee until this point for the specific \\n     * address to be able to calculate the marginal contribution to rewards afterwards and adds the accumulated\\n     * rewards since the last change to the account rewards\\n     * @param address to update rewards to\\n     */  \\n    modifier updateRewards(address account) {\\n        _updateRewards(account);\\n        _;\\n    }\\n\\n    /*\\n     * @notice internal function used in the modifier with the same name to optimize bytecode\\n     */\\n    function _updateRewards(address account) internal {\\n        // Calculate the reward per unit of reward score applicable to the last stint of account\\n        rewardPerTokenStored = rewardPerToken();\\n        // Calculate if the epoch is finished or not\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        updateRewardEpoch();\\n        if (account != address(0)) {\\n            // Add the rewards added during the last stint\\n            rewards[account] = earned(account);\\n            // Reset the reward score as we have already paid these trading rewards\\n            if (lastTradeUserEpoch[msg.sender] < currentEpoch) {\\n                _rewardScores[msg.sender] = 0;\\n            }\\n            // Reset the reward per token as we have already paid these staking rewards\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n    }\\n\\n    /*\\n     * @notice access control modifier for exchanger proxy\\n     */\\n    modifier onlyExchangerProxy() {\\n        _onlyExchangerProxy();\\n        _;\\n    }\\n\\n    /*\\n     * @notice internal function used in the modifier with the same name to optimize bytecode\\n     */\\n    function _onlyExchangerProxy() internal view {\\n        bool isEP = msg.sender == address(exchangerProxy);\\n\\n        require(isEP);\\n    }\\n\\n    /*\\n     * @notice access control modifier for rewardEscrow\\n     */\\n    modifier onlyRewardEscrow() {\\n        _onlyRewardEscrow();\\n        _;\\n    }\\n\\n    /*\\n     * @notice internal function used in the modifier with the same name to optimize bytecode\\n     */\\n    function _onlyRewardEscrow() internal view {\\n        bool isRE = msg.sender == address(rewardEscrow);\\n\\n        require(isRE);\\n    }\\n\\n    /*\\n     * @notice access control modifier for rewardEscrow\\n     */\\n    modifier onlySupplySchedule() {\\n        _onlySupplySchedule();\\n        _;\\n    }\\n\\n    /*\\n     * @notice internal function used in the modifier with the same name to optimize bytecode\\n     */\\n    function _onlySupplySchedule() internal view {\\n        bool isSS = msg.sender == address(supplySchedule);\\n\\n        require(isSS);\\n    }\\n\\n    /* ========== PROXY FUNCTIONS ========== */\\n    \\n    /*\\n     * @notice Necessary override for Open Zeppelin UUPS proxy to make sure the owner logic is included\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\\n\\n    }\\n\\n}\",\"keccak256\":\"0x09295f5a427d38d008613361e0fee415a68e74e95b5758531e5cbb96680172f0\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x4f9e4c0035dd4fe6cc864ed0754f6de06bcd4333c0ce762803856054e8ca4ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IKwenta.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IKwenta is IERC20 {\\n\\n    function mint(address account, uint amount) external;\\n\\n    function burn(uint amount) external;\\n\\n    function setSupplySchedule(address _supplySchedule) external;\\n\\n}\",\"keccak256\":\"0x53e96730a3089130ac55caef8b3e650bccd165fc1f0e261e9ef5bae93157686b\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardEscrow.sol\":{\"content\":\"pragma solidity >=0.4.24;\\npragma experimental ABIEncoderV2;\\n\\nlibrary VestingEntries {\\n    struct VestingEntry {\\n        uint64 endTime;\\n        uint256 escrowAmount;\\n        uint256 duration;\\n    }\\n    struct VestingEntryWithID {\\n        uint64 endTime;\\n        uint256 escrowAmount;\\n        uint256 entryID;\\n    }\\n}\\n\\ninterface IRewardEscrow {\\n    // Views\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function numVestingEntries(address account) external view returns (uint);\\n\\n    function totalEscrowedAccountBalance(address account) external view returns (uint);\\n\\n    function totalVestedAccountBalance(address account) external view returns (uint);\\n\\n    function getVestingQuantity(address account, uint256[] calldata entryIDs) external view returns (uint, uint);\\n\\n    function getVestingSchedules(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\\n\\n    function getAccountVestingEntryIDs(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) external view returns (uint256[] memory);\\n\\n    function getVestingEntryClaimable(address account, uint256 entryID) external view returns (uint, uint);\\n\\n    function getVestingEntry(address account, uint256 entryID) external view returns (uint64, uint256, uint256);\\n\\n    // Mutative functions\\n    function vest(uint256[] calldata entryIDs) external;\\n\\n    function createEscrowEntry(\\n        address beneficiary,\\n        uint256 deposit,\\n        uint256 duration\\n    ) external;\\n\\n    function appendVestingEntry(\\n        address account,\\n        uint256 quantity,\\n        uint256 duration\\n    ) external;\\n\\n    function stakeEscrow(uint256 _amount) external;\\n\\n    function unstakeEscrow(uint256 _amount) external;\\n}\",\"keccak256\":\"0x6ff1870f076b4d177b0e846fdbb96fad761550d48fa92baf206866edf2a98e49\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IStakingRewards {\\n    // Views\\n\\n    function escrowedBalanceOf(address account) external view returns (uint256);\\n\\n    function totalRewardScore() external view returns (uint256);\\n    \\n    function stakedBalanceOf(address account) external view returns (uint256);\\n    \\n    function totalBalanceOf(address account) external view returns (uint256);\\n\\n    function rewardScoreOf(address account) external view returns (uint256);\\n\\n    function rewardPerRewardScoreOfEpoch(uint256 _epoch) external view returns (uint256);\\n\\n    function feesPaidBy(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    // Mutative\\n\\n    function setPercentageRewards(uint256 _percentageStaking, uint256 _percentageTrading) external;\\n\\n    function updateTraderScore(address _trader, uint256 _newFeesPaid) external;\\n\\n    function exit() external;\\n\\n    function getReward() external;\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function setRewards(uint256 reward) external;\\n\\n    function stakeEscrow(address _account, uint256 _amount) external;\\n\\n    function unstakeEscrow(address _account, uint256 _amount) external;\\n\\n}\",\"keccak256\":\"0xbf8bf27c74da99d419a8497c1a13be2970996e03cb90b8b5c714051d7b0cdfc7\",\"license\":\"MIT\"},\"contracts/interfaces/ISupplySchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.24;\\n\\ninterface ISupplySchedule {\\n    // Views\\n    function mintableSupply() external view returns (uint);\\n\\n    function isMintable() external view returns (bool);\\n\\n    // Mutative functions\\n\\n    function mint() external;\\n\\n    function setTreasuryDiversion(uint _treasuryDiversion) external;\\n    \\n    function setStakingRewards(address _stakingRewards) external;\\n}\",\"keccak256\":\"0x27d489546be9133b118c808a013c1e40dc2832b27934c2e730037bd6c4c6bbee\",\"license\":\"MIT\"},\"contracts/libraries/ExponentLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT   \\npragma solidity ^0.8.0;\\n\\nimport \\\"./FixidityLib.sol\\\";\\nimport \\\"./LogarithmLib.sol\\\";\\n\\nlibrary ExponentLib {\\n\\n    using FixidityLib for FixidityLib.Fixidity;\\n    using LogarithmLib for FixidityLib.Fixidity;\\n\\n    function power_e(FixidityLib.Fixidity storage fixidity, int256 x) public view returns (int256) {\\n        assert(x < 172 * fixidity.fixed_1);\\n        int256 r = fixidity.fixed_1;\\n        while(x >= 10 * fixidity.fixed_1) {\\n            x -= 10 * fixidity.fixed_1;\\n            r = fixidity.multiply(r, fixidity.fixed_exp_10);\\n        }\\n        if(x == fixidity.fixed_1) {\\n            return fixidity.multiply(r, fixidity.fixed_e);\\n        } else if(x == 0) {\\n            return r;\\n        }\\n        int256 tr = 100 * fixidity.fixed_1;\\n        int256 d = tr;\\n        for(uint8 i = 1; i <= 2 * fixidity.digits; i++) {\\n            d = (d * x) / (fixidity.fixed_1 * int8(i));\\n            tr += d;\\n        }\\n        return fixidity.trunc_digits(fixidity.multiply(tr, r), 2);\\n    }\\n\\n    function power_any(FixidityLib.Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        return power_e(fixidity, fixidity.multiply(fixidity.log_e(a), b));\\n    }\\n\\n    function root_any(FixidityLib.Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        return power_any(fixidity, a, fixidity.reciprocal(b));\\n    }\\n\\n    function root_n(FixidityLib.Fixidity storage fixidity, int256 a, uint256 n) public view returns (int256) {\\n        return power_e(fixidity, fixidity.divide(fixidity.log_e(a), fixidity.fixed_1 * int256(n)));\\n    }\\n}\",\"keccak256\":\"0x9202083b1422462d313c8f328d1975973cf1ccdc93b6cb2a475738bff7f859fe\",\"license\":\"MIT\"},\"contracts/libraries/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary FixidityLib {\\n\\n    uint8 constant public initial_digits = 36;\\n    int256 constant public fixed_e =            2718281828459045235360287471352662498;\\n    int256 constant public fixed_pi =           3141592653589793238462643383279502884;\\n    int256 constant public fixed_exp_10 =   22026465794806716516957900645284244000000;\\n\\n    struct Fixidity {\\n        uint8 digits;\\n        int256 fixed_1;\\n        int256 fixed_e;\\n        int256 fixed_pi;\\n        int256 fixed_exp_10;\\n    }\\n\\n    function init(Fixidity storage fixidity, uint8 digits) public {\\n        assert(digits < 36);\\n        fixidity.digits = digits;\\n        fixidity.fixed_1 = int256(uint256(10) ** uint256(digits));\\n        int256 t = int256(uint256(10) ** uint256(initial_digits - digits));\\n        fixidity.fixed_e = fixed_e / t;\\n        fixidity.fixed_pi = fixed_pi / t;\\n        fixidity.fixed_exp_10 = fixed_exp_10 / t;\\n    }\\n\\n    function round(Fixidity storage fixidity, int256 v) public view returns (int256) {\\n        return round_off(fixidity, v, fixidity.digits);\\n    }\\n\\n    function floor(Fixidity storage fixidity, int256 v) public view returns (int256) {\\n        return (v / fixidity.fixed_1) * fixidity.fixed_1;\\n    }\\n\\n    function multiply(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        if(b == fixidity.fixed_1) return a;\\n        int256 x1 = a / fixidity.fixed_1;\\n        int256 x2 = a - fixidity.fixed_1 * x1;\\n        int256 y1 = b / fixidity.fixed_1;\\n        int256 y2 = b - fixidity.fixed_1 * y1;\\n        return fixidity.fixed_1 * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixidity.fixed_1;\\n    }\\n\\n    function divide(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        if(b == fixidity.fixed_1) return a;\\n        assert(b != 0);\\n        return multiply(fixidity, a, reciprocal(fixidity, b));\\n    }\\n\\n    function add(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        int256 t = a + b;\\n        assert(t - a == b);\\n        return t;\\n    }\\n\\n    function subtract(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        int256 t = a - b;\\n        assert(t + a == b);\\n        return t;\\n    }\\n\\n    function reciprocal(Fixidity storage fixidity, int256 a) public view returns (int256) {\\n        return round_off(fixidity, 10 * fixidity.fixed_1 * fixidity.fixed_1 / a, 1) / 10;\\n    }\\n\\n    function round_off(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\\n        int256 t = int256(uint256(10) ** uint256(digits));\\n        int8 sign = 1;\\n        if(v < 0) {\\n            sign = -1;\\n            v = 0 - v;\\n        }\\n        if(v % t >= t / 2) v = v + t - v % t;\\n        return v * sign;\\n    }\\n\\n    function round_to(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\\n        assert(digits < fixidity.digits);\\n        return round_off(fixidity, v, fixidity.digits - digits);\\n    }\\n\\n    function trunc_digits(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\\n        if(digits <= 0) return v;\\n        return round_off(fixidity, v, digits) / int256((10 ** digits));\\n    }\\n}\",\"keccak256\":\"0x9a7373b576cea0813fc24387c93fe4caca7e7e8def1f1dba31412610b70ae410\",\"license\":\"MIT\"},\"contracts/libraries/LogarithmLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FixidityLib.sol\\\";\\n\\nlibrary LogarithmLib {\\n\\n    using FixidityLib for FixidityLib.Fixidity;\\n\\n    uint8 constant public longer_digits = 36;\\n    int256 constant public longer_fixed_log_e_1_5 =     405465108108164381978013115464349137;    \\n    int256 constant public longer_fixed_1 =            1000000000000000000000000000000000000;    \\n    int256 constant public longer_fixed_log_e_10 =     2302585092994045684017991454684364208;\\n\\n    function log_e(FixidityLib.Fixidity storage fixidity, int256 v) public view returns (int256) {\\n        assert(v > 0);\\n        int256 r = 0;\\n        uint8 extra_digits = longer_digits - fixidity.digits;\\n        int256 t = int256(uint256(10) ** uint256(extra_digits));\\n        while(v <= fixidity.fixed_1 / 10) {\\n            v = v * 10;\\n            r -= longer_fixed_log_e_10;\\n        }\\n        while(v >= 10 * fixidity.fixed_1) {\\n            v = v / 10;\\n            r += longer_fixed_log_e_10;\\n        }\\n        while(v < fixidity.fixed_1) {\\n            v = fixidity.multiply(v, fixidity.fixed_e);\\n            r -= longer_fixed_1;\\n        }\\n        while(v > fixidity.fixed_e) {\\n            v = fixidity.divide(v, fixidity.fixed_e);\\n            r += longer_fixed_1;\\n        }\\n        if(v == fixidity.fixed_1) {\\n            return FixidityLib.round_off(fixidity, r, extra_digits) / t;\\n        }\\n        if(v == fixidity.fixed_e) {\\n            return fixidity.fixed_1 + FixidityLib.round_off(fixidity, r, extra_digits) / t;\\n        }\\n        v *= t;\\n        v = v - 3 * longer_fixed_1 / 2;\\n        r = r + longer_fixed_log_e_1_5;\\n        int256 m = longer_fixed_1 * v / (v + 3 * longer_fixed_1);\\n        r = r + 2 * m;\\n        int256 m_2 = m * m / longer_fixed_1;\\n        int256 i = 3;\\n        while(true) {\\n            m = m * m_2 / longer_fixed_1;\\n            r = r + 2 * m / i;\\n            i += 2;\\n            if(i >= 3 + 2 * int8(fixidity.digits)) break;\\n        }\\n        return FixidityLib.round_off(fixidity, r, extra_digits) / t;\\n    }\\n\\n    function log_any(FixidityLib.Fixidity storage fixidity, int256 base, int256 v) public view returns (int256) {\\n        return fixidity.divide(log_e(fixidity, v), log_e(fixidity, base));\\n    }\\n}\",\"keccak256\":\"0x5e5f30f2fc574832dde222e69ddf0321732399ef49c1ae45ff88789a69786fe7\",\"license\":\"MIT\"},\"contracts/libraries/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\nlibrary SafeDecimalMath {\\n    using SafeMath for uint;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 public constant decimals = 18;\\n    uint8 public constant highPrecisionDecimals = 27;\\n\\n    /* The number representing 1.0. */\\n    uint public constant UNIT = 10**uint(decimals);\\n\\n    /* The number representing 1.0 for higher fidelity numbers. */\\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() external pure returns (uint) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return Provides an interface to PRECISE_UNIT.\\n     */\\n    function preciseUnit() external pure returns (uint) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a precise unit.\\n     *\\n     * @dev The operands should be in the precise unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint x,\\n        uint y,\\n        uint precisionUnit\\n    ) private pure returns (uint) {\\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * high precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the high precision unit\\n     * is evaluated, so the product of x and the high precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Convert a standard decimal representation to a high precision one.\\n     */\\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\\n    }\\n\\n    /**\\n     * @dev Convert a high precision decimal to a standard decimal representation.\\n     */\\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    // Computes `a - b`, setting the value to 0 if b > a.\\n    function floorsub(uint a, uint b) internal pure returns (uint) {\\n        return b >= a ? 0 : a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x0bc64bd3f85d7f45c2a096fc24c3d137cbb3a985d5747725a0874e694cb8d892\",\"license\":\"MIT\"},\"contracts/utils/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\",\"keccak256\":\"0x9f51a9dd99cc51a332f0a635628dc89262c126c358e4e89041aadbe9a519b06a\",\"license\":\"MIT\"},\"contracts/utils/OwnedUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract OwnedUpgradeable is Initializable {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    function __Owned_init(address _owner) public initializer {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\",\"keccak256\":\"0x7a6570e90fb7c8ea550877d7c496eb48932a8eaf949c0b16dcf237cc78d0dde5\",\"license\":\"MIT\"},\"contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Inheritance\\nimport \\\"./OwnedUpgradeable.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/pausable\\nabstract contract Pausable is OwnedUpgradeable {\\n    uint public lastPauseTime;\\n    bool public paused;\\n\\n    function __Pausable_init(address _owner) public initializer {\\n        __Owned_init(_owner);\\n        require(owner != address(0), \\\"Owner must be set\\\");\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        // Ensure we're actually changing the state before we do anything\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        // Set our paused state.\\n        paused = _paused;\\n\\n        // If applicable, set the last pause time.\\n        if (paused) {\\n            lastPauseTime = block.timestamp;\\n        }\\n\\n        // Let everyone know that our pause state has changed.\\n        emit PauseChanged(paused);\\n    }\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused {\\n        _notPaused();\\n        _;\\n    }\\n\\n    function _notPaused() internal view {\\n        require(!paused, \\\"This action cannot be performed while the contract is paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0ff42f9e0ee9ab184647efd39103a29af03a50d1445b2da51f0f0eddd5df20d8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1660601b81525034801561004657600080fd5b5060805160601c61518461007a60003960008181611493015281816115220152818161193301526119c201526151846000f3fe6080604052600436106102fe5760003560e01c80637667180811610190578063a430be6c116100dc578063c7a29c6f11610095578063e9fad8ee1161006f578063e9fad8ee14610b4c578063ebe2b12b14610b63578063f7013ef614610b8e578063fac902a514610bb7576102fe565b8063c7a29c6f14610acf578063c9c7da1614610af8578063cd3daf9d14610b21576102fe565b8063a430be6c146109d1578063a694fc3a146109fc578063ad6621df14610a25578063b3502c9314610a50578063c0376c7f14610a79578063c40dd66f14610aa4576102fe565b80638980f11f1161014957806391fda50f1161012357806391fda50f14610905578063985134fb146109425780639e1b9aa21461096b578063a40ec3d514610994576102fe565b80638980f11f146108865780638da5cb5b146108af57806391b4ded9146108da576102fe565b8063766718081461079857806376699292146107c357806379ba5097146107ee5780637b0a47ee146108055780637e076c791461083057806380faa57d1461085b576102fe565b80633659cfe61161024f57806352db467a116102085780635de39934116101e25780635de39934146106f257806360ff1fc81461071b57806369b75fa31461074457806372f702f31461076d576102fe565b806352db467a1461067157806353a47bb71461069c5780635c975abb146106c7576102fe565b80633659cfe6146105825780633821fc9f146105ab5780633d18b912146105d65780634b0ee02a146105ed5780634e2dc4c51461062a5780634f1ef28614610655576102fe565b806316765391116102bc578063273128451161029657806327312845146104dc5780632caf8c63146105055780632e1a7d4d146105305780632f3cca4e14610559576102fe565b8063167653911461043957806316c38b3c14610476578063232150181461049f576102fe565b80628cc26214610303578063057a601b146103405780630700037d1461037d57806310b4dedb146103ba578063140db5ce146103e55780631627540c14610410575b600080fd5b34801561030f57600080fd5b5061032a60048036038101906103259190613f45565b610be2565b60405161033791906148dc565b60405180910390f35b34801561034c57600080fd5b5061036760048036038101906103629190613f45565b610dfd565b60405161037491906148dc565b60405180910390f35b34801561038957600080fd5b506103a4600480360381019061039f9190613f45565b610e46565b6040516103b191906148dc565b60405180910390f35b3480156103c657600080fd5b506103cf610e5e565b6040516103dc91906148dc565b60405180910390f35b3480156103f157600080fd5b506103fa610e64565b60405161040791906148dc565b60405180910390f35b34801561041c57600080fd5b5061043760048036038101906104329190613f45565b610e6a565b005b34801561044557600080fd5b50610460600480360381019061045b9190613f45565b610eed565b60405161046d91906148dc565b60405180910390f35b34801561048257600080fd5b5061049d60048036038101906104989190614089565b610f80565b005b3480156104ab57600080fd5b506104c660048036038101906104c19190613f45565b611029565b6040516104d391906148dc565b60405180910390f35b3480156104e857600080fd5b5061050360048036038101906104fe919061416a565b611072565b005b34801561051157600080fd5b5061051a6110a5565b604051610527919061463f565b60405180910390f35b34801561053c57600080fd5b506105576004803603810190610552919061413d565b6110ab565b005b34801561056557600080fd5b50610580600480360381019061057b9190613f45565b61131c565b005b34801561058e57600080fd5b506105a960048036038101906105a49190613f45565b611491565b005b3480156105b757600080fd5b506105c061161a565b6040516105cd919061463f565b60405180910390f35b3480156105e257600080fd5b506105eb611620565b005b3480156105f957600080fd5b50610614600480360381019061060f9190613f45565b6118cb565b60405161062191906148dc565b60405180910390f35b34801561063657600080fd5b5061063f611914565b60405161064c91906148dc565b60405180910390f35b61066f600480360381019061066a9190613fed565b611931565b005b34801561067d57600080fd5b50610686611a6e565b60405161069391906148dc565b60405180910390f35b3480156106a857600080fd5b506106b1611a74565b6040516106be91906144f8565b60405180910390f35b3480156106d357600080fd5b506106dc611a9a565b6040516106e991906145d3565b60405180910390f35b3480156106fe57600080fd5b5061071960048036038101906107149190613f45565b611aad565b005b34801561072757600080fd5b50610742600480360381019061073d919061413d565b611c3d565b005b34801561075057600080fd5b5061076b60048036038101906107669190613f45565b611c5c565b005b34801561077957600080fd5b50610782611cdf565b60405161078f91906145ee565b60405180910390f35b3480156107a457600080fd5b506107ad611d05565b6040516107ba91906148dc565b60405180910390f35b3480156107cf57600080fd5b506107d8611d0b565b6040516107e591906148dc565b60405180910390f35b3480156107fa57600080fd5b50610803611d11565b005b34801561081157600080fd5b5061081a611ec5565b60405161082791906148dc565b60405180910390f35b34801561083c57600080fd5b50610845611ecb565b60405161085291906148dc565b60405180910390f35b34801561086757600080fd5b50610870611ed1565b60405161087d91906148dc565b60405180910390f35b34801561089257600080fd5b506108ad60048036038101906108a89190614049565b611ee4565b005b3480156108bb57600080fd5b506108c4612034565b6040516108d191906144f8565b60405180910390f35b3480156108e657600080fd5b506108ef61205a565b6040516108fc91906148dc565b60405180910390f35b34801561091157600080fd5b5061092c60048036038101906109279190613f45565b612060565b60405161093991906148dc565b60405180910390f35b34801561094e57600080fd5b5061096960048036038101906109649190614049565b6120bc565b005b34801561097757600080fd5b50610992600480360381019061098d9190613f45565b61221a565b005b3480156109a057600080fd5b506109bb60048036038101906109b6919061413d565b6123df565b6040516109c891906148dc565b60405180910390f35b3480156109dd57600080fd5b506109e66123fc565b6040516109f39190614624565b60405180910390f35b348015610a0857600080fd5b50610a236004803603810190610a1e919061413d565b612422565b005b348015610a3157600080fd5b50610a3a612652565b604051610a4791906148dc565b60405180910390f35b348015610a5c57600080fd5b50610a776004803603810190610a729190614049565b61265b565b005b348015610a8557600080fd5b50610a8e6127f4565b604051610a9b91906148dc565b60405180910390f35b348015610ab057600080fd5b50610ab96127fa565b604051610ac69190614609565b60405180910390f35b348015610adb57600080fd5b50610af66004803603810190610af1919061413d565b612820565b005b348015610b0457600080fd5b50610b1f6004803603810190610b1a9190614049565b61293a565b005b348015610b2d57600080fd5b50610b36612b39565b604051610b4391906148dc565b60405180910390f35b348015610b5857600080fd5b50610b61612ba9565b005b348015610b6f57600080fd5b50610b78612bc4565b604051610b8591906148dc565b60405180910390f35b348015610b9a57600080fd5b50610bb56004803603810190610bb09190613f72565b612bca565b005b348015610bc357600080fd5b50610bcc612e30565b604051610bd991906144f8565b60405180910390f35b6000806c0c9f2c9cd04674edea4000000060ae60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c3b612b39565b610c459190614a60565b60b460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c8f9190614a06565b610c9991906149d5565b9050600060ab5460ac60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d9e576c0c9f2c9cd04674edea4000000060ad600060ac60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020019081526020016000205460b560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d919190614a06565b610d9b91906149d5565b90505b60af60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548183610dea919061497f565b610df4919061497f565b92505050919050565b600060b260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60af6020528060005260406000206000915090505481565b60b65481565b61271081565b610e72612e56565b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce2281604051610ee291906144f8565b60405180910390a150565b600060b260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460b460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f799190614a60565b9050919050565b610f88612e56565b603660009054906101000a900460ff1615158115151415610fa857611026565b80603660006101000a81548160ff021916908315150217905550603660009054906101000a900460ff1615610fdf57426035819055505b7f8fb6c181ee25a520cf3dd6565006ef91229fcfe5a989566c2a3b8c115570cec5603660009054906101000a900460ff1660405161101d91906145d3565b60405180910390a15b50565b600060b360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61107a612e56565b6127108282611089919061497f565b1461109357600080fd5b8160b6819055508060b7819055505050565b60b85481565b600260015414156110f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e89061485c565b60405180910390fd5b60026001819055503361110381612ee8565b60008211611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113d9061477c565b60405180910390fd5b8161115033610eed565b101561115b57600080fd5b8160b460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111aa9190614a60565b925050819055508160b160008282546111c39190614a60565b925050819055506112133360b560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613065565b60a360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611270929190614573565b602060405180830381600087803b15801561128a57600080fd5b505af115801561129e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c291906140b6565b503373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58360405161130991906148dc565b60405180910390a2506001808190555050565b600060019054906101000a900460ff1680611342575060008054906101000a900460ff16155b611381576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611378906146fc565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113d1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6113da8261221a565b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561146c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114639061481c565b60405180910390fd5b801561148d5760008060016101000a81548160ff0219169083151502179055505b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415611520576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611517906146bc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661155f6134fb565b73ffffffffffffffffffffffffffffffffffffffff16146115b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ac906146dc565b60405180910390fd5b6115be81613552565b61161781600067ffffffffffffffff8111156115dd576115dc614c54565b5b6040519080825280601f01601f19166020018201604052801561160f5781602001600182028036833780820191505090505b50600061355d565b50565b60b95481565b3361162a81612ee8565b60026001541415611670576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116679061485c565b60405180910390fd5b6002600181905550600060af60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156118c057600060af60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060a360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611789929190614573565b602060405180830381600087803b1580156117a357600080fd5b505af11580156117b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117db91906140b6565b5060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631bb47b4433836301dfe2006040518463ffffffff1660e01b815260040161183f9392919061459c565b600060405180830381600087803b15801561185957600080fd5b505af115801561186d573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040516118b791906148dc565b60405180910390a25b506001808190555050565b600060b460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000670de0b6b3a764000060b05461192c91906149d5565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156119c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b7906146bc565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166119ff6134fb565b73ffffffffffffffffffffffffffffffffffffffff1614611a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4c906146dc565b60405180910390fd5b611a5e82613552565b611a6a8282600161355d565b5050565b60b75481565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603660009054906101000a900460ff1681565b611ab5612e56565b60a360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16639034802b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b3457600080fd5b505afa158015611b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6c91906140e3565b73ffffffffffffffffffffffffffffffffffffffff1614611bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb9906147bc565b60405180910390fd5b8060a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f49e357bac6fcb3c303debe16e178b6d540dbbb2257f766b410ad2188a5e2fd2381604051611c3291906144f8565b60405180910390a150565b611c45612e56565b60078110611c5257600080fd5b8060a58190555050565b611c64612e56565b8060a260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb424d06ab3c62d2b4de6f8ca0de9e7afe2d6dc4736620764402079c1c0a4823781604051611cd491906144f8565b60405180910390a150565b60a360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60ab5481565b60a85481565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d989061467c565b60405180910390fd5b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611e16929190614513565b60405180910390a1603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60a65481565b60a75481565b6000611edf4260a45461372e565b905090565b611eec612e56565b60a360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f4757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611fa4929190614573565b602060405180830381600087803b158015611fbe57600080fd5b505af1158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff691906140b6565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051612028929190614573565b60405180910390a15050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60355481565b6000670de0b6b3a764000060b560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120b591906149d5565b9050919050565b6120c4613747565b816120ce81612ee8565b8160b460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461211d919061497f565b925050819055508160b16000828254612136919061497f565b925050819055508160b260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461218c919061497f565b925050819055506121dc3360b560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613065565b7f945856e466506640ce955f1ec0de49513761175bad680d8503f7c8d45beabb20838360405161220d929190614573565b60405180910390a1505050565b600060019054906101000a900460ff1680612240575060008054906101000a900460ff16155b61227f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612276906146fc565b60405180910390fd5b60008060019054906101000a900460ff1615905080156122cf576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561233f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123369061483c565b60405180910390fd5b81603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c6000836040516123b2929190614513565b60405180910390a180156123db5760008060016101000a81548160ff0219169083151502179055505b5050565b600060ad6000838152602001908152602001600020549050919050565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415612468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245f9061485c565b60405180910390fd5b60026001819055506124786137a9565b3361248281612ee8565b6000821161248f57600080fd5b8160b460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124de919061497f565b925050819055508160b160008282546124f7919061497f565b925050819055506125473360b560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613065565b60a360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016125a69392919061453c565b602060405180830381600087803b1580156125c057600080fd5b505af11580156125d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f891906140b6565b503373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8360405161263f91906148dc565b60405180910390a2506001808190555050565b64e8d4a5100081565b6126636137fb565b8161266d81612ee8565b600060b560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060ab5460ac60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561278d578260b360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060ab5460ac60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090506127e4565b8260b360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127dc919061497f565b925050819055505b6127ee8482613065565b50505050565b60a55481565b60a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61282861385d565b600061283381612ee8565b60a45442106128565762093a808261284b91906149d5565b60a68190555061289d565b60004260a4546128669190614a60565b9050600060a654826128789190614a06565b905062093a808161288991906149d5565b84612894919061497f565b60a68190555050505b61271060b65460a6546128b09190614a06565b6128ba91906149d5565b60a78190555061271060b75460a6546128d39190614a06565b6128dd91906149d5565b60a8819055504260a98190555062093a80426128f9919061497f565b60a4819055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d8260405161292e91906148dc565b60405180910390a15050565b60026001541415612980576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129779061485c565b60405180910390fd5b6002600181905550612990613747565b8161299a81612ee8565b8160b260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156129e657600080fd5b8160b460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a359190614a60565b925050819055508160b16000828254612a4e9190614a60565b925050819055508160b260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612aa49190614a60565b92505081905550612af43360b560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613065565b7fbd0d30ac1729a6f57b09c27c8f39102f2704fbbf708747dcd198e45cf27f52828383604051612b25929190614573565b60405180910390a150600180819055505050565b60008060b1541415612b4f5760aa549050612ba6565b60b1546c0c9f2c9cd04674edea4000000060a75460a954612b6e611ed1565b612b789190614a60565b612b829190614a06565b612b8c9190614a06565b612b9691906149d5565b60aa54612ba3919061497f565b90505b90565b612bba612bb533610eed565b6110ab565b612bc2611620565b565b60a45481565b600060019054906101000a900460ff1680612bf0575060008054906101000a900460ff16155b612c2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c26906146fc565b60405180910390fd5b60008060019054906101000a900460ff161590508015612c7f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612c888661131c565b612c906138bf565b600060a481905550600060a6819055508460a360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550609b73__$58bf06b23003f263f89da1a87991e621d6$__6373cf14bd909160126040518363ffffffff1660e01b8152600401612d1e9291906148b3565b60006040518083038186803b158015612d3657600080fd5b505af4158015612d4a573d6000803e3d6000fd5b505050508360a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260a160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611f4060b6819055506107d060b781905550670429d069189e000060b9819055506709b6e64a8ec6000060b8819055508160a5819055508015612e285760008060016101000a81548160ff0219169083151502179055505b505050505050565b60a260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612edd9061473c565b60405180910390fd5b565b612ef0612b39565b60aa81905550612efe611ed1565b60a981905550612f0c6139a0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461306257612f4981610be2565b60af60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060ab5460ac60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561301b57600060b560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60aa5460ae60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50565b600060b460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414806130f4575061271060b460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b613133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312a9061475c565b60405180910390fd5b600060b360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414806131c5575064e8d4a5100060b360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b613204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131fb9061471c565b60405180910390fd5b600060ab5460ac60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156132955750600060b460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1561344557609b73__$5caaad119dd87e5673627738f390a7d315$__633d37f8b2909160b360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460b8546040518463ffffffff1660e01b81526004016133199392919061487c565b60206040518083038186803b15801561333157600080fd5b505af4158015613345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133699190614110565b609b73__$5caaad119dd87e5673627738f390a7d315$__633d37f8b2909160b460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460b9546040518463ffffffff1660e01b81526004016133e89392919061487c565b60206040518083038186803b15801561340057600080fd5b505af4158015613414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134389190614110565b6134429190614a06565b90505b60ab5460ac60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561349357600091505b8060b560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808260b0546134e69190614a60565b6134f0919061497f565b60b081905550505050565b60006135297f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613a3c565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61355a612e56565b50565b60006135676134fb565b905061357284613a46565b60008351118061357f5750815b156135905761358e8484613aff565b505b60006135be7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b613be3565b90508060000160009054906101000a900460ff166137275760018160000160006101000a81548160ff02191690831515021790555061368a858360405160240161360891906144f8565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613aff565b5060008160000160006101000a81548160ff0219169083151502179055506136b06134fb565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461371d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137149061469c565b60405180910390fd5b61372685613bed565b5b5050505050565b600081831061373d578161373f565b825b905092915050565b600060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050806137a657600080fd5b50565b603660009054906101000a900460ff16156137f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137f0906147dc565b60405180910390fd5b565b600060a260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161490508061385a57600080fd5b50565b600060a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050806138bc57600080fd5b50565b600060019054906101000a900460ff16806138e5575060008054906101000a900460ff16155b613924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161391b906146fc565b60405180910390fd5b60008060019054906101000a900460ff161590508015613974576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61397c613c3c565b801561399d5760008060016101000a81548160ff0219169083151502179055505b50565b60006139ab42613d1c565b905060ab54811115613a3957600060b0541180156139d457506139cf60a454613d1c565b60ab54105b15613a295760b0546c0c9f2c9cd04674edea4000000062093a8060a8546139fb9190614a06565b613a059190614a06565b613a0f91906149d5565b60ad600060ab548152602001908152602001600020819055505b600060b0819055508060ab819055505b50565b6000819050919050565b613a4f81613ddd565b613a8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a859061479c565b60405180910390fd5b80613abb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613a3c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060613b0a83613ddd565b613b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b40906147fc565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051613b7191906144e1565b600060405180830381855af49150503d8060008114613bac576040519150601f19603f3d011682016040523d82523d6000602084013e613bb1565b606091505b5091509150613bd9828260405180606001604052806027815260200161512860279139613df0565b9250505092915050565b6000819050919050565b613bf681613a46565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600060019054906101000a900460ff1680613c62575060008054906101000a900460ff16155b613ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c98906146fc565b60405180910390fd5b60008060019054906101000a900460ff161590508015613cf1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600180819055508015613d195760008060016101000a81548160ff0219169083151502179055505b50565b6000620151808083613d2e91906149d5565b613d389190614a06565b9150600062093a808084613d4c91906149d5565b613d569190614a06565b90506201518060a5546007613d6b9190614a60565b613d759190614a06565b8184613d819190614a60565b10613db8576201518060a554613d979190614a06565b62093a8082613da6919061497f565b613db09190614a60565b915050613dd8565b6201518060a554613dc99190614a06565b81613dd49190614a60565b9150505b919050565b600080823b905060008111915050919050565b60608315613e0057829050613e50565b600083511115613e135782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e47919061465a565b60405180910390fd5b9392505050565b6000613e6a613e658461491c565b6148f7565b905082815260208101848484011115613e8657613e85614c88565b5b613e91848285614b83565b509392505050565b600081359050613ea8816150b4565b92915050565b600081359050613ebd816150cb565b92915050565b600081519050613ed2816150cb565b92915050565b600082601f830112613eed57613eec614c83565b5b8135613efd848260208601613e57565b91505092915050565b600081519050613f15816150e2565b92915050565b600081519050613f2a816150f9565b92915050565b600081359050613f3f81615110565b92915050565b600060208284031215613f5b57613f5a614c92565b5b6000613f6984828501613e99565b91505092915050565b600080600080600060a08688031215613f8e57613f8d614c92565b5b6000613f9c88828901613e99565b9550506020613fad88828901613e99565b9450506040613fbe88828901613e99565b9350506060613fcf88828901613e99565b9250506080613fe088828901613f30565b9150509295509295909350565b6000806040838503121561400457614003614c92565b5b600061401285828601613e99565b925050602083013567ffffffffffffffff81111561403357614032614c8d565b5b61403f85828601613ed8565b9150509250929050565b600080604083850312156140605761405f614c92565b5b600061406e85828601613e99565b925050602061407f85828601613f30565b9150509250929050565b60006020828403121561409f5761409e614c92565b5b60006140ad84828501613eae565b91505092915050565b6000602082840312156140cc576140cb614c92565b5b60006140da84828501613ec3565b91505092915050565b6000602082840312156140f9576140f8614c92565b5b600061410784828501613f06565b91505092915050565b60006020828403121561412657614125614c92565b5b600061413484828501613f1b565b91505092915050565b60006020828403121561415357614152614c92565b5b600061416184828501613f30565b91505092915050565b6000806040838503121561418157614180614c92565b5b600061418f85828601613f30565b92505060206141a085828601613f30565b9150509250929050565b6141b381614a94565b82525050565b6141c281614aa6565b82525050565b60006141d38261494d565b6141dd8185614963565b93506141ed818560208601614b92565b80840191505092915050565b61420281614b05565b82525050565b61421181614b17565b82525050565b61422081614b29565b82525050565b61422f81614ac4565b82525050565b61423e81614ac4565b82525050565b61424d81614b3b565b82525050565b61425c81614b4d565b82525050565b600061426d82614958565b614277818561496e565b9350614287818560208601614b92565b61429081614c97565b840191505092915050565b60006142a860358361496e565b91506142b382614ca8565b604082019050919050565b60006142cb602f8361496e565b91506142d682614cf7565b604082019050919050565b60006142ee602c8361496e565b91506142f982614d46565b604082019050919050565b6000614311602c8361496e565b915061431c82614d95565b604082019050919050565b6000614334602e8361496e565b915061433f82614de4565b604082019050919050565b600061435760188361496e565b915061436282614e33565b602082019050919050565b600061437a602f8361496e565b915061438582614e5c565b604082019050919050565b600061439d60168361496e565b91506143a882614eab565b602082019050919050565b60006143c060118361496e565b91506143cb82614ed4565b602082019050919050565b60006143e3602d8361496e565b91506143ee82614efd565b604082019050919050565b6000614406603e8361496e565b915061441182614f4c565b604082019050919050565b6000614429603c8361496e565b915061443482614f9b565b604082019050919050565b600061444c60268361496e565b915061445782614fea565b604082019050919050565b600061446f60118361496e565b915061447a82615039565b602082019050919050565b600061449260198361496e565b915061449d82615062565b602082019050919050565b60006144b5601f8361496e565b91506144c08261508b565b602082019050919050565b8082525050565b6144db81614aee565b82525050565b60006144ed82846141c8565b915081905092915050565b600060208201905061450d60008301846141aa565b92915050565b600060408201905061452860008301856141aa565b61453560208301846141aa565b9392505050565b600060608201905061455160008301866141aa565b61455e60208301856141aa565b61456b60408301846144d2565b949350505050565b600060408201905061458860008301856141aa565b61459560208301846144d2565b9392505050565b60006060820190506145b160008301866141aa565b6145be60208301856144d2565b6145cb6040830184614253565b949350505050565b60006020820190506145e860008301846141b9565b92915050565b600060208201905061460360008301846141f9565b92915050565b600060208201905061461e6000830184614208565b92915050565b60006020820190506146396000830184614217565b92915050565b60006020820190506146546000830184614226565b92915050565b600060208201905081810360008301526146748184614262565b905092915050565b600060208201905081810360008301526146958161429b565b9050919050565b600060208201905081810360008301526146b5816142be565b9050919050565b600060208201905081810360008301526146d5816142e1565b9050919050565b600060208201905081810360008301526146f581614304565b9050919050565b6000602082019050818103600083015261471581614327565b9050919050565b600060208201905081810360008301526147358161434a565b9050919050565b600060208201905081810360008301526147558161436d565b9050919050565b6000602082019050818103600083015261477581614390565b9050919050565b60006020820190508181036000830152614795816143b3565b9050919050565b600060208201905081810360008301526147b5816143d6565b9050919050565b600060208201905081810360008301526147d5816143f9565b9050919050565b600060208201905081810360008301526147f58161441c565b9050919050565b600060208201905081810360008301526148158161443f565b9050919050565b6000602082019050818103600083015261483581614462565b9050919050565b6000602082019050818103600083015261485581614485565b9050919050565b60006020820190508181036000830152614875816144a8565b9050919050565b600060608201905061489160008301866144cb565b61489e6020830185614235565b6148ab6040830184614235565b949350505050565b60006040820190506148c860008301856144cb565b6148d56020830184614244565b9392505050565b60006020820190506148f160008301846144d2565b92915050565b6000614901614912565b905061490d8282614bc5565b919050565b6000604051905090565b600067ffffffffffffffff82111561493757614936614c54565b5b61494082614c97565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061498a82614aee565b915061499583614aee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149ca576149c9614bf6565b5b828201905092915050565b60006149e082614aee565b91506149eb83614aee565b9250826149fb576149fa614c25565b5b828204905092915050565b6000614a1182614aee565b9150614a1c83614aee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a5557614a54614bf6565b5b828202905092915050565b6000614a6b82614aee565b9150614a7683614aee565b925082821015614a8957614a88614bf6565b5b828203905092915050565b6000614a9f82614ace565b9050919050565b60008115159050919050565b6000614abd82614a94565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614b1082614b5f565b9050919050565b6000614b2282614b5f565b9050919050565b6000614b3482614b5f565b9050919050565b6000614b4682614af8565b9050919050565b6000614b5882614aee565b9050919050565b6000614b6a82614b71565b9050919050565b6000614b7c82614ace565b9050919050565b82818337600083830152505050565b60005b83811015614bb0578082015181840152602081019050614b95565b83811115614bbf576000848401525b50505050565b614bce82614c97565b810181811067ffffffffffffffff82111715614bed57614bec614c54565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560008201527f2063616e20616363657074206f776e6572736869700000000000000000000000602082015250565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f464545535f504149445f5341464554595f4d494e494d554d0000000000000000600082015250565b7f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660008201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b7f5354414b494e475f5341464554595f4d494e494d554d00000000000000000000600082015250565b7f43616e6e6f742077697468647261772030000000000000000000000000000000600082015250565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b7f7374616b696e6720746f6b656e2061646472657373206e6f7420657175616c2060008201527f746f20526577617264457363726f77204b57454e544120616464726573730000602082015250565b7f5468697320616374696f6e2063616e6e6f7420626520706572666f726d65642060008201527f7768696c652074686520636f6e74726163742069732070617573656400000000602082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b7f4f776e6572206d75737420626520736574000000000000000000000000000000600082015250565b7f4f776e657220616464726573732063616e6e6f74206265203000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6150bd81614a94565b81146150c857600080fd5b50565b6150d481614aa6565b81146150df57600080fd5b50565b6150eb81614ab2565b81146150f657600080fd5b50565b61510281614ac4565b811461510d57600080fd5b50565b61511981614aee565b811461512457600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dd6ec5f0a00456716a0ee073e9892ff399c330700d5bcf8163cba0200a3821a564736f6c63430008070033",
  "deployedBytecode": "$58bf06b23003f263f89da1a87991e621d6$__6373cf14bd909160126040518363ffffffff1660e01b8152600401612d1e9291906148b3565b60006040518083038186803b158015612d3657600080fd5b505af4158015612d4a573d6000803e3d6000fd5b505050508360a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260a160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611f4060b6819055506107d060b781905550670429d069189e000060b9819055506709b6e64a8ec6000060b8819055508160a5819055508015612e285760008060016101000a81548160ff0219169083151502179055505b505050505050565b60a260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612edd9061473c565b60405180910390fd5b565b612ef0612b39565b60aa81905550612efe611ed1565b60a981905550612f0c6139a0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461306257612f4981610be2565b60af60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060ab5460ac60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561301b57600060b560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60aa5460ae60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50565b600060b460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414806130f4575061271060b460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b613133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312a9061475c565b60405180910390fd5b600060b360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414806131c5575064e8d4a5100060b360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b613204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131fb9061471c565b60405180910390fd5b600060ab5460ac60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156132955750600060b460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1561344557609b73__$5caaad119dd87e5673627738f390a7d315$__633d37f8b2909160b360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460b8546040518463ffffffff1660e01b81526004016133199392919061487c565b60206040518083038186803b15801561333157600080fd5b505af4158015613345573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133699190614110565b609b73__$5caaad119dd87e5673627738f390a7d315$__633d37f8b2909160b460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460b9546040518463ffffffff1660e01b81526004016133e89392919061487c565b60206040518083038186803b15801561340057600080fd5b505af4158015613414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134389190614110565b6134429190614a06565b90505b60ab5460ac60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561349357600091505b8060b560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808260b0546134e69190614a60565b6134f0919061497f565b60b081905550505050565b60006135297f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613a3c565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61355a612e56565b50565b60006135676134fb565b905061357284613a46565b60008351118061357f5750815b156135905761358e8484613aff565b505b60006135be7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b613be3565b90508060000160009054906101000a900460ff166137275760018160000160006101000a81548160ff02191690831515021790555061368a858360405160240161360891906144f8565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613aff565b5060008160000160006101000a81548160ff0219169083151502179055506136b06134fb565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461371d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137149061469c565b60405180910390fd5b61372685613bed565b5b5050505050565b600081831061373d578161373f565b825b905092915050565b600060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050806137a657600080fd5b50565b603660009054906101000a900460ff16156137f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137f0906147dc565b60405180910390fd5b565b600060a260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161490508061385a57600080fd5b50565b600060a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050806138bc57600080fd5b50565b600060019054906101000a900460ff16806138e5575060008054906101000a900460ff16155b613924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161391b906146fc565b60405180910390fd5b60008060019054906101000a900460ff161590508015613974576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61397c613c3c565b801561399d5760008060016101000a81548160ff0219169083151502179055505b50565b60006139ab42613d1c565b905060ab54811115613a3957600060b0541180156139d457506139cf60a454613d1c565b60ab54105b15613a295760b0546c0c9f2c9cd04674edea4000000062093a8060a8546139fb9190614a06565b613a059190614a06565b613a0f91906149d5565b60ad600060ab548152602001908152602001600020819055505b600060b0819055508060ab819055505b50565b6000819050919050565b613a4f81613ddd565b613a8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a859061479c565b60405180910390fd5b80613abb7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613a3c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060613b0a83613ddd565b613b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b40906147fc565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051613b7191906144e1565b600060405180830381855af49150503d8060008114613bac576040519150601f19603f3d011682016040523d82523d6000602084013e613bb1565b606091505b5091509150613bd9828260405180606001604052806027815260200161512860279139613df0565b9250505092915050565b6000819050919050565b613bf681613a46565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600060019054906101000a900460ff1680613c62575060008054906101000a900460ff16155b613ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c98906146fc565b60405180910390fd5b60008060019054906101000a900460ff161590508015613cf1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600180819055508015613d195760008060016101000a81548160ff0219169083151502179055505b50565b6000620151808083613d2e91906149d5565b613d389190614a06565b9150600062093a808084613d4c91906149d5565b613d569190614a06565b90506201518060a5546007613d6b9190614a60565b613d759190614a06565b8184613d819190614a60565b10613db8576201518060a554613d979190614a06565b62093a8082613da6919061497f565b613db09190614a60565b915050613dd8565b6201518060a554613dc99190614a06565b81613dd49190614a60565b9150505b919050565b600080823b905060008111915050919050565b60608315613e0057829050613e50565b600083511115613e135782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e47919061465a565b60405180910390fd5b9392505050565b6000613e6a613e658461491c565b6148f7565b905082815260208101848484011115613e8657613e85614c88565b5b613e91848285614b83565b509392505050565b600081359050613ea8816150b4565b92915050565b600081359050613ebd816150cb565b92915050565b600081519050613ed2816150cb565b92915050565b600082601f830112613eed57613eec614c83565b5b8135613efd848260208601613e57565b91505092915050565b600081519050613f15816150e2565b92915050565b600081519050613f2a816150f9565b92915050565b600081359050613f3f81615110565b92915050565b600060208284031215613f5b57613f5a614c92565b5b6000613f6984828501613e99565b91505092915050565b600080600080600060a08688031215613f8e57613f8d614c92565b5b6000613f9c88828901613e99565b9550506020613fad88828901613e99565b9450506040613fbe88828901613e99565b9350506060613fcf88828901613e99565b9250506080613fe088828901613f30565b9150509295509295909350565b6000806040838503121561400457614003614c92565b5b600061401285828601613e99565b925050602083013567ffffffffffffffff81111561403357614032614c8d565b5b61403f85828601613ed8565b9150509250929050565b600080604083850312156140605761405f614c92565b5b600061406e85828601613e99565b925050602061407f85828601613f30565b9150509250929050565b60006020828403121561409f5761409e614c92565b5b60006140ad84828501613eae565b91505092915050565b6000602082840312156140cc576140cb614c92565b5b60006140da84828501613ec3565b91505092915050565b6000602082840312156140f9576140f8614c92565b5b600061410784828501613f06565b91505092915050565b60006020828403121561412657614125614c92565b5b600061413484828501613f1b565b91505092915050565b60006020828403121561415357614152614c92565b5b600061416184828501613f30565b91505092915050565b6000806040838503121561418157614180614c92565b5b600061418f85828601613f30565b92505060206141a085828601613f30565b9150509250929050565b6141b381614a94565b82525050565b6141c281614aa6565b82525050565b60006141d38261494d565b6141dd8185614963565b93506141ed818560208601614b92565b80840191505092915050565b61420281614b05565b82525050565b61421181614b17565b82525050565b61422081614b29565b82525050565b61422f81614ac4565b82525050565b61423e81614ac4565b82525050565b61424d81614b3b565b82525050565b61425c81614b4d565b82525050565b600061426d82614958565b614277818561496e565b9350614287818560208601614b92565b61429081614c97565b840191505092915050565b60006142a860358361496e565b91506142b382614ca8565b604082019050919050565b60006142cb602f8361496e565b91506142d682614cf7565b604082019050919050565b60006142ee602c8361496e565b91506142f982614d46565b604082019050919050565b6000614311602c8361496e565b915061431c82614d95565b604082019050919050565b6000614334602e8361496e565b915061433f82614de4565b604082019050919050565b600061435760188361496e565b915061436282614e33565b602082019050919050565b600061437a602f8361496e565b915061438582614e5c565b604082019050919050565b600061439d60168361496e565b91506143a882614eab565b602082019050919050565b60006143c060118361496e565b91506143cb82614ed4565b602082019050919050565b60006143e3602d8361496e565b91506143ee82614efd565b604082019050919050565b6000614406603e8361496e565b915061441182614f4c565b604082019050919050565b6000614429603c8361496e565b915061443482614f9b565b604082019050919050565b600061444c60268361496e565b915061445782614fea565b604082019050919050565b600061446f60118361496e565b915061447a82615039565b602082019050919050565b600061449260198361496e565b915061449d82615062565b602082019050919050565b60006144b5601f8361496e565b91506144c08261508b565b602082019050919050565b8082525050565b6144db81614aee565b82525050565b60006144ed82846141c8565b915081905092915050565b600060208201905061450d60008301846141aa565b92915050565b600060408201905061452860008301856141aa565b61453560208301846141aa565b9392505050565b600060608201905061455160008301866141aa565b61455e60208301856141aa565b61456b60408301846144d2565b949350505050565b600060408201905061458860008301856141aa565b61459560208301846144d2565b9392505050565b60006060820190506145b160008301866141aa565b6145be60208301856144d2565b6145cb6040830184614253565b949350505050565b60006020820190506145e860008301846141b9565b92915050565b600060208201905061460360008301846141f9565b92915050565b600060208201905061461e6000830184614208565b92915050565b60006020820190506146396000830184614217565b92915050565b60006020820190506146546000830184614226565b92915050565b600060208201905081810360008301526146748184614262565b905092915050565b600060208201905081810360008301526146958161429b565b9050919050565b600060208201905081810360008301526146b5816142be565b9050919050565b600060208201905081810360008301526146d5816142e1565b9050919050565b600060208201905081810360008301526146f581614304565b9050919050565b6000602082019050818103600083015261471581614327565b9050919050565b600060208201905081810360008301526147358161434a565b9050919050565b600060208201905081810360008301526147558161436d565b9050919050565b6000602082019050818103600083015261477581614390565b9050919050565b60006020820190508181036000830152614795816143b3565b9050919050565b600060208201905081810360008301526147b5816143d6565b9050919050565b600060208201905081810360008301526147d5816143f9565b9050919050565b600060208201905081810360008301526147f58161441c565b9050919050565b600060208201905081810360008301526148158161443f565b9050919050565b6000602082019050818103600083015261483581614462565b9050919050565b6000602082019050818103600083015261485581614485565b9050919050565b60006020820190508181036000830152614875816144a8565b9050919050565b600060608201905061489160008301866144cb565b61489e6020830185614235565b6148ab6040830184614235565b949350505050565b60006040820190506148c860008301856144cb565b6148d56020830184614244565b9392505050565b60006020820190506148f160008301846144d2565b92915050565b6000614901614912565b905061490d8282614bc5565b919050565b6000604051905090565b600067ffffffffffffffff82111561493757614936614c54565b5b61494082614c97565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061498a82614aee565b915061499583614aee565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149ca576149c9614bf6565b5b828201905092915050565b60006149e082614aee565b91506149eb83614aee565b9250826149fb576149fa614c25565b5b828204905092915050565b6000614a1182614aee565b9150614a1c83614aee565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614a5557614a54614bf6565b5b828202905092915050565b6000614a6b82614aee565b9150614a7683614aee565b925082821015614a8957614a88614bf6565b5b828203905092915050565b6000614a9f82614ace565b9050919050565b60008115159050919050565b6000614abd82614a94565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614b1082614b5f565b9050919050565b6000614b2282614b5f565b9050919050565b6000614b3482614b5f565b9050919050565b6000614b4682614af8565b9050919050565b6000614b5882614aee565b9050919050565b6000614b6a82614b71565b9050919050565b6000614b7c82614ace565b9050919050565b82818337600083830152505050565b60005b83811015614bb0578082015181840152602081019050614b95565b83811115614bbf576000848401525b50505050565b614bce82614c97565b810181811067ffffffffffffffff82111715614bed57614bec614c54565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560008201527f2063616e20616363657074206f776e6572736869700000000000000000000000602082015250565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f464545535f504149445f5341464554595f4d494e494d554d0000000000000000600082015250565b7f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660008201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b7f5354414b494e475f5341464554595f4d494e494d554d00000000000000000000600082015250565b7f43616e6e6f742077697468647261772030000000000000000000000000000000600082015250565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b7f7374616b696e6720746f6b656e2061646472657373206e6f7420657175616c2060008201527f746f20526577617264457363726f77204b57454e544120616464726573730000602082015250565b7f5468697320616374696f6e2063616e6e6f7420626520706572666f726d65642060008201527f7768696c652074686520636f6e74726163742069732070617573656400000000602082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b7f4f776e6572206d75737420626520736574000000000000000000000000000000600082015250565b7f4f776e657220616464726573732063616e6e6f74206265203000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6150bd81614a94565b81146150c857600080fd5b50565b6150d481614aa6565b81146150df57600080fd5b50565b6150eb81614ab2565b81146150f657600080fd5b50565b61510281614ac4565b811461510d57600080fd5b50565b61511981614aee565b811461512457600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220dd6ec5f0a00456716a0ee073e9892ff399c330700d5bcf8163cba0200a3821a564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setPaused(bool)": {
        "details": "Only the contract owner may call this."
      },
      "setPercentageRewards(uint256,uint256)": {
        "details": "Only the owner can use this function and parameters should be in base 10_000 (80% = 8_000)",
        "params": {
          "_percentageStaking": "the % of rewards to distribute to staking scores",
          "_percentageTrading": "the % of rewards to distribute to reward scores"
        }
      },
      "setWeeklyStartRewards(uint256)": {
        "details": "As UNIX times started on a Thursday (January 1st 1970), shift n days as necessary, e.g. to start on a Monday go 3 days prior (Wednesday, Tuesday, Monday), the remaining options are: Friday: 6 Saturday: 5 Sunday: 4  Monday: 3 Tuesday: 2 Wednesday: 1 Thursday: 0",
        "params": {
          "newWeeklyStart": "the number of days to shift"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setPaused(bool)": {
        "notice": "Change the paused state of the contract"
      },
      "setPercentageRewards(uint256,uint256)": {
        "notice": "Set the % distribution between staking and trading"
      },
      "setWeeklyStartRewards(uint256)": {
        "notice": "Set the day of the week the reward epochs start"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 578,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 621,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10202,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 10204,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 10315,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "lastPauseTime",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 10317,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "paused",
        "offset": 0,
        "slot": "54",
        "type": "t_bool"
      },
      {
        "astId": 396,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 563,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5115,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "fixidity",
        "offset": 0,
        "slot": "155",
        "type": "t_struct(Fixidity)8339_storage"
      },
      {
        "astId": 5118,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardEscrow",
        "offset": 0,
        "slot": "160",
        "type": "t_contract(RewardEscrow)5084"
      },
      {
        "astId": 5121,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "supplySchedule",
        "offset": 0,
        "slot": "161",
        "type": "t_contract(ISupplySchedule)7717"
      },
      {
        "astId": 5123,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "exchangerProxy",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 5126,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "stakingToken",
        "offset": 0,
        "slot": "163",
        "type": "t_contract(IERC20)7186"
      },
      {
        "astId": 5128,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 5130,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "weeklyStartRewards",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 5132,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardRate",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 5134,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardRateStaking",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 5136,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardRateTrading",
        "offset": 0,
        "slot": "168",
        "type": "t_uint256"
      },
      {
        "astId": 5138,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "169",
        "type": "t_uint256"
      },
      {
        "astId": 5140,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "170",
        "type": "t_uint256"
      },
      {
        "astId": 5142,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "currentEpoch",
        "offset": 0,
        "slot": "171",
        "type": "t_uint256"
      },
      {
        "astId": 5146,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "lastTradeUserEpoch",
        "offset": 0,
        "slot": "172",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5150,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "epochRewardPerRewardScore",
        "offset": 0,
        "slot": "173",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5154,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "174",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5158,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "175",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5160,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_totalRewardScore",
        "offset": 0,
        "slot": "176",
        "type": "t_uint256"
      },
      {
        "astId": 5162,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "177",
        "type": "t_uint256"
      },
      {
        "astId": 5166,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_escrowedBalances",
        "offset": 0,
        "slot": "178",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5170,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_feesPaid",
        "offset": 0,
        "slot": "179",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5174,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_totalBalances",
        "offset": 0,
        "slot": "180",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5178,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_rewardScores",
        "offset": 0,
        "slot": "181",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5180,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "PERCENTAGE_STAKING",
        "offset": 0,
        "slot": "182",
        "type": "t_uint256"
      },
      {
        "astId": 5182,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "PERCENTAGE_TRADING",
        "offset": 0,
        "slot": "183",
        "type": "t_uint256"
      },
      {
        "astId": 5193,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "WEIGHT_FEES",
        "offset": 0,
        "slot": "184",
        "type": "t_int256"
      },
      {
        "astId": 5195,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "WEIGHT_STAKING",
        "offset": 0,
        "slot": "185",
        "type": "t_int256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)7186": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISupplySchedule)7717": {
        "encoding": "inplace",
        "label": "contract ISupplySchedule",
        "numberOfBytes": "20"
      },
      "t_contract(RewardEscrow)5084": {
        "encoding": "inplace",
        "label": "contract RewardEscrow",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Fixidity)8339_storage": {
        "encoding": "inplace",
        "label": "struct FixidityLib.Fixidity",
        "members": [
          {
            "astId": 8330,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "digits",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8332,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "fixed_1",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 8334,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "fixed_e",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 8336,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "fixed_pi",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 8338,
            "contract": "contracts/StakingRewards.sol:StakingRewards",
            "label": "fixed_exp_10",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}