{
  "address": "0x289e0a1B55CA94699F5893698Faba7377e56cC5f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressResolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingRewards",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sourceCurrencyKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "destinationCurrencyKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "rewardAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "trackingCode",
          "type": "bytes32"
        }
      ],
      "name": "exchangeOnBehalfWithTraderScoreTracking",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "ee7a47eef76e566acaa3fa51ec176ca2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingRewards\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"trackingCode\",\"type\":\"bytes32\"}],\"name\":\"exchangeOnBehalfWithTraderScoreTracking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExchangerProxy.sol\":\"ExchangerProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ExchangerProxy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IAddressResolver.sol\\\";\\nimport \\\"./interfaces/ISynthetix.sol\\\";\\nimport \\\"./interfaces/IExchanger.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\nimport \\\"./interfaces/IExchangeRates.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract ExchangerProxy {\\n    IAddressResolver addressResolver;\\n    IStakingRewards stakingRewards;\\n    bytes32 private constant CONTRACT_SYNTHETIX = \\\"Synthetix\\\";\\n    bytes32 private constant CONTRACT_EXCHANGER = \\\"Exchanger\\\";\\n    bytes32 private constant CONTRACT_EXRATES = \\\"ExchangeRates\\\";\\n    bytes32 private constant sUSD_CURRENCY_KEY = \\\"sUSD\\\";\\n    \\n    constructor(address _addressResolver, address _stakingRewards) {\\n        addressResolver = IAddressResolver(_addressResolver);\\n        stakingRewards = IStakingRewards(_stakingRewards);\\n    }\\n\\n    function synthetix() internal view returns (ISynthetix) {\\n        return ISynthetix(addressResolver.requireAndGetAddress(\\n            CONTRACT_SYNTHETIX, \\n            \\\"Could not get Synthetix\\\"\\n        ));\\n    }\\n\\n    function exchanger() internal view returns (IExchanger) {\\n        return IExchanger(addressResolver.requireAndGetAddress(\\n            CONTRACT_EXCHANGER, \\n            \\\"Could not get Exchanger\\\"\\n        ));\\n    }\\n\\n    function exchangeRates() internal view returns (IExchangeRates) {\\n        return IExchangeRates(addressResolver.requireAndGetAddress(\\n            CONTRACT_EXRATES,\\n            \\\"Could not get ExchangeRates\\\"\\n        ));\\n    }\\n\\n    function exchangeOnBehalfWithTraderScoreTracking(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address rewardAddress,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived) {\\n        // Get fee\\n        ( , uint fee, ) = exchanger().getAmountsForExchange(\\n            sourceAmount, \\n            sourceCurrencyKey, \\n            destinationCurrencyKey\\n        );\\n\\n        // If fee is NOT denoted in sUSD, query Synthetix for exchange rate in sUSD\\n        if (destinationCurrencyKey != sUSD_CURRENCY_KEY) {\\n            fee = exchangeRates().effectiveValue(destinationCurrencyKey, fee, sUSD_CURRENCY_KEY);\\n        }\\n\\n        // Execute exchange on behalf of user\\n        uint received = synthetix().exchangeOnBehalfWithTracking(\\n            msg.sender,\\n            sourceCurrencyKey,\\n            sourceAmount,\\n            destinationCurrencyKey,\\n            rewardAddress,\\n            trackingCode\\n        );\\n\\n        // Update StakingRewards trader score\\n        stakingRewards.updateTraderScore(msg.sender, fee);\\n        return received;\\n    }\\n}\",\"keccak256\":\"0x20bf7ee65265ad97b5bf05c4823cae20df3e1c8d86a46ddf24ba00b9e336f0cd\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getSynth(bytes32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\\n\",\"keccak256\":\"0x53b90229342b01d3cbf2c27a310ee8cbace56aa2cdab95ec64ed5d2706e506c0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x4f9e4c0035dd4fe6cc864ed0754f6de06bcd4333c0ce762803856054e8ca4ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\\ninterface IExchangeRates {\\n    // Views\\n\\n    // Given a quantity of a source currency, returns a quantity \\n    // of a destination currency that is of equivalent value at \\n    // current exchange rates, if those rates are fresh\\n    function effectiveValue(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint value);\\n}\",\"keccak256\":\"0x427deb9a89faaab1f7d639b8795de2c4379fae7bdd376bb8fc423e05a3148432\",\"license\":\"MIT\"},\"contracts/interfaces/IExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.24;\\n\\nimport \\\"./IVirtualSynth.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iexchanger\\ninterface IExchanger {\\n    // Views\\n    function calculateAmountAfterSettlement(\\n        address from,\\n        bytes32 currencyKey,\\n        uint amount,\\n        uint refunded\\n    ) external view returns (uint amountAfterSettlement);\\n\\n    function isSynthRateInvalid(bytes32 currencyKey) external view returns (bool);\\n\\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\\n\\n    function settlementOwing(address account, bytes32 currencyKey)\\n        external\\n        view\\n        returns (\\n            uint reclaimAmount,\\n            uint rebateAmount,\\n            uint numEntries\\n        );\\n\\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\\n\\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\\n        external\\n        view\\n        returns (uint exchangeFeeRate);\\n\\n    function getAmountsForExchange(\\n        uint sourceAmount,\\n        bytes32 sourceCurrencyKey,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint amountReceived,\\n            uint fee,\\n            uint exchangeFeeRate\\n        );\\n\\n    function priceDeviationThresholdFactor() external view returns (uint);\\n\\n    function waitingPeriodSecs() external view returns (uint);\\n\\n    // Mutative functions\\n    function exchange(\\n        address exchangeForAddress,\\n        address from,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address destinationAddress,\\n        bool virtualSynth,\\n        address rewardAddress,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\\n\\n    function settle(address from, bytes32 currencyKey)\\n        external\\n        returns (\\n            uint reclaimed,\\n            uint refunded,\\n            uint numEntries\\n        );\\n\\n    function resetLastExchangeRate(bytes32[] calldata currencyKeys) external;\\n\\n    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\\n}\\n\",\"keccak256\":\"0x9cf819a35c562d374b4c033c4b45664ddf531336ddf0079af3724a801df2afa7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IStakingRewards {\\n    // Views\\n\\n    function escrowedBalanceOf(address account) external view returns (uint256);\\n\\n    function totalRewardScore() external view returns (uint256);\\n    \\n    function stakedBalanceOf(address account) external view returns (uint256);\\n    \\n    function totalBalanceOf(address account) external view returns (uint256);\\n\\n    function rewardScoreOf(address account) external view returns (uint256);\\n\\n    function rewardPerRewardScoreOfEpoch(uint256 _epoch) external view returns (uint256);\\n\\n    function feesPaidBy(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    // Mutative\\n\\n    function setPercentageRewards(uint256 _percentageStaking, uint256 _percentageTrading) external;\\n\\n    function updateTraderScore(address _trader, uint256 _newFeesPaid) external;\\n\\n    function exit() external;\\n\\n    function getReward() external;\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function setRewards(uint256 reward) external;\\n\\n    function stakeEscrow(address _account, uint256 _amount) external;\\n\\n    function unstakeEscrow(address _account, uint256 _amount) external;\\n\\n}\",\"keccak256\":\"0xbf8bf27c74da99d419a8497c1a13be2970996e03cb90b8b5c714051d7b0cdfc7\",\"license\":\"MIT\"},\"contracts/interfaces/ISynth.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\\ninterface ISynth {\\n    // Views\\n    function currencyKey() external view returns (bytes32);\\n\\n    function transferableSynths(address account) external view returns (uint);\\n\\n    // Mutative functions\\n    function transferAndSettle(address to, uint value) external returns (bool);\\n\\n    function transferFromAndSettle(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    // Restricted: used internally to Synthetix\\n    function burn(address account, uint amount) external;\\n\\n    function issue(address account, uint amount) external;\\n}\",\"keccak256\":\"0x32212833fabd17bd7890cd8b7323ecbae978f908321f6031cc160d2714d6b3b2\"},\"contracts/interfaces/ISynthetix.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\nimport \\\"./ISynth.sol\\\";\\nimport \\\"./IVirtualSynth.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynthetix\\ninterface ISynthetix {\\n    // Views\\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\\n\\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\\n\\n    function availableSynthCount() external view returns (uint);\\n\\n    function availableSynths(uint index) external view returns (ISynth);\\n\\n    function collateral(address account) external view returns (uint);\\n\\n    function collateralisationRatio(address issuer) external view returns (uint);\\n\\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\\n\\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\\n\\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\\n\\n    function remainingIssuableSynths(address issuer)\\n        external\\n        view\\n        returns (\\n            uint maxIssuable,\\n            uint alreadyIssued,\\n            uint totalSystemDebt\\n        );\\n\\n    function synths(bytes32 currencyKey) external view returns (ISynth);\\n\\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\\n\\n    function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);\\n\\n    function totalIssuedSynthsExcludeOtherCollateral(bytes32 currencyKey) external view returns (uint);\\n\\n    function transferableSynthetix(address account) external view returns (uint transferable);\\n\\n    // Mutative Functions\\n    function burnSynths(uint amount) external;\\n\\n    function burnSynthsOnBehalf(address burnForAddress, uint amount) external;\\n\\n    function burnSynthsToTarget() external;\\n\\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\\n\\n    function exchange(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalf(\\n        address exchangeForAddress,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithTracking(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address rewardAddress,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithTrackingForInitiator(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address rewardAddress,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeOnBehalfWithTracking(\\n        address exchangeForAddress,\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        address rewardAddress,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived);\\n\\n    function exchangeWithVirtual(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        bytes32 trackingCode\\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\\n\\n    function issueMaxSynths() external;\\n\\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\\n\\n    function issueSynths(uint amount) external;\\n\\n    function issueSynthsOnBehalf(address issueForAddress, uint amount) external;\\n\\n    function mint() external returns (bool);\\n\\n    function settle(bytes32 currencyKey)\\n        external\\n        returns (\\n            uint reclaimed,\\n            uint refunded,\\n            uint numEntries\\n        );\\n\\n    // Liquidations\\n    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\\n\\n    // Restricted Functions\\n\\n    function mintSecondary(address account, uint amount) external;\\n\\n    function mintSecondaryRewards(uint amount) external;\\n\\n    function burnSecondary(address account, uint amount) external;\\n}\",\"keccak256\":\"0x46f4371dae95d2e8fd12f5399fa1d6bd55761dbe6441a4d8ec2ca596ec1a6cf2\"},\"contracts/interfaces/IVirtualSynth.sol\":{\"content\":\"pragma solidity >=0.4.24;\\n\\nimport \\\"./ISynth.sol\\\";\\n\\ninterface IVirtualSynth {\\n    // Views\\n    function balanceOfUnderlying(address account) external view returns (uint);\\n\\n    function rate() external view returns (uint);\\n\\n    function readyToSettle() external view returns (bool);\\n\\n    function secsLeftInWaitingPeriod() external view returns (uint);\\n\\n    function settled() external view returns (bool);\\n\\n    function synth() external view returns (ISynth);\\n\\n    // Mutative functions\\n    function settle(address account) external;\\n}\",\"keccak256\":\"0xda6aa58541ed4597847b92c0fa1c7b8f7ad5ed6ee47a376765134278ee9c0387\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c0b380380610c0b833981810160405281019061003291906100cf565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b6000815190506100c981610146565b92915050565b600080604083850312156100e6576100e5610141565b5b60006100f4858286016100ba565b9250506020610105858286016100ba565b9150509250929050565b600061011a82610121565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b61014f8161010f565b811461015a57600080fd5b50565b610a9f8061016c6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636986781614610030575b600080fd5b61004a6004803603810190610045919061061f565b610060565b60405161005791906108fb565b60405180910390f35b60008061006b610316565b73ffffffffffffffffffffffffffffffffffffffff1663f450aa348789886040518463ffffffff1660e01b81526004016100a793929190610916565b60606040518083038186803b1580156100bf57600080fd5b505afa1580156100d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f791906106c7565b509150507f735553440000000000000000000000000000000000000000000000000000000085146101d95761012a6103e7565b73ffffffffffffffffffffffffffffffffffffffff1663654a60ac86837f73555344000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401610186939291906108c4565b60206040518083038186803b15801561019e57600080fd5b505afa1580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d6919061069a565b90505b60006101e36104b8565b73ffffffffffffffffffffffffffffffffffffffff166391e56b68338a8a8a8a8a6040518763ffffffff1660e01b8152600401610225969594939291906107b0565b602060405180830381600087803b15801561023f57600080fd5b505af1158015610253573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610277919061069a565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3502c9333846040518363ffffffff1660e01b81526004016102d6929190610811565b600060405180830381600087803b1580156102f057600080fd5b505af1158015610304573d6000803e3d6000fd5b50505050809250505095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d017f45786368616e67657200000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610392919061083a565b60206040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e291906105f2565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d017f45786368616e67655261746573000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016104639190610896565b60206040518083038186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b391906105f2565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d017f53796e74686574697800000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016105349190610868565b60206040518083038186803b15801561054c57600080fd5b505afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058491906105f2565b905090565b60008135905061059881610a24565b92915050565b6000815190506105ad81610a24565b92915050565b6000813590506105c281610a3b565b92915050565b6000813590506105d781610a52565b92915050565b6000815190506105ec81610a52565b92915050565b600060208284031215610608576106076109a4565b5b60006106168482850161059e565b91505092915050565b600080600080600060a0868803121561063b5761063a6109a4565b5b6000610649888289016105b3565b955050602061065a888289016105c8565b945050604061066b888289016105b3565b935050606061067c88828901610589565b925050608061068d888289016105b3565b9150509295509295909350565b6000602082840312156106b0576106af6109a4565b5b60006106be848285016105dd565b91505092915050565b6000806000606084860312156106e0576106df6109a4565b5b60006106ee868287016105dd565b93505060206106ff868287016105dd565b9250506040610710868287016105dd565b9150509250925092565b6107238161095e565b82525050565b61073281610970565b82525050565b600061074560178361094d565b9150610750826109a9565b602082019050919050565b600061076860178361094d565b9150610773826109d2565b602082019050919050565b600061078b601b8361094d565b9150610796826109fb565b602082019050919050565b6107aa8161099a565b82525050565b600060c0820190506107c5600083018961071a565b6107d26020830188610729565b6107df60408301876107a1565b6107ec6060830186610729565b6107f9608083018561071a565b61080660a0830184610729565b979650505050505050565b6000604082019050610826600083018561071a565b61083360208301846107a1565b9392505050565b600060408201905061084f6000830184610729565b818103602083015261086081610738565b905092915050565b600060408201905061087d6000830184610729565b818103602083015261088e8161075b565b905092915050565b60006040820190506108ab6000830184610729565b81810360208301526108bc8161077e565b905092915050565b60006060820190506108d96000830186610729565b6108e660208301856107a1565b6108f36040830184610729565b949350505050565b600060208201905061091060008301846107a1565b92915050565b600060608201905061092b60008301866107a1565b6109386020830185610729565b6109456040830184610729565b949350505050565b600082825260208201905092915050565b60006109698261097a565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b7f436f756c64206e6f74206765742045786368616e676572000000000000000000600082015250565b7f436f756c64206e6f74206765742053796e746865746978000000000000000000600082015250565b7f436f756c64206e6f74206765742045786368616e676552617465730000000000600082015250565b610a2d8161095e565b8114610a3857600080fd5b50565b610a4481610970565b8114610a4f57600080fd5b50565b610a5b8161099a565b8114610a6657600080fd5b5056fea2646970667358221220d44c4dedf7f586afbbcb9cb4e0354bc7280d40bdd328d3750fd1fcda644fbfce64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80636986781614610030575b600080fd5b61004a6004803603810190610045919061061f565b610060565b60405161005791906108fb565b60405180910390f35b60008061006b610316565b73ffffffffffffffffffffffffffffffffffffffff1663f450aa348789886040518463ffffffff1660e01b81526004016100a793929190610916565b60606040518083038186803b1580156100bf57600080fd5b505afa1580156100d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f791906106c7565b509150507f735553440000000000000000000000000000000000000000000000000000000085146101d95761012a6103e7565b73ffffffffffffffffffffffffffffffffffffffff1663654a60ac86837f73555344000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401610186939291906108c4565b60206040518083038186803b15801561019e57600080fd5b505afa1580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d6919061069a565b90505b60006101e36104b8565b73ffffffffffffffffffffffffffffffffffffffff166391e56b68338a8a8a8a8a6040518763ffffffff1660e01b8152600401610225969594939291906107b0565b602060405180830381600087803b15801561023f57600080fd5b505af1158015610253573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610277919061069a565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3502c9333846040518363ffffffff1660e01b81526004016102d6929190610811565b600060405180830381600087803b1580156102f057600080fd5b505af1158015610304573d6000803e3d6000fd5b50505050809250505095945050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d017f45786368616e67657200000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610392919061083a565b60206040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e291906105f2565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d017f45786368616e67655261746573000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016104639190610896565b60206040518083038186803b15801561047b57600080fd5b505afa15801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b391906105f2565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d017f53796e74686574697800000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016105349190610868565b60206040518083038186803b15801561054c57600080fd5b505afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058491906105f2565b905090565b60008135905061059881610a24565b92915050565b6000815190506105ad81610a24565b92915050565b6000813590506105c281610a3b565b92915050565b6000813590506105d781610a52565b92915050565b6000815190506105ec81610a52565b92915050565b600060208284031215610608576106076109a4565b5b60006106168482850161059e565b91505092915050565b600080600080600060a0868803121561063b5761063a6109a4565b5b6000610649888289016105b3565b955050602061065a888289016105c8565b945050604061066b888289016105b3565b935050606061067c88828901610589565b925050608061068d888289016105b3565b9150509295509295909350565b6000602082840312156106b0576106af6109a4565b5b60006106be848285016105dd565b91505092915050565b6000806000606084860312156106e0576106df6109a4565b5b60006106ee868287016105dd565b93505060206106ff868287016105dd565b9250506040610710868287016105dd565b9150509250925092565b6107238161095e565b82525050565b61073281610970565b82525050565b600061074560178361094d565b9150610750826109a9565b602082019050919050565b600061076860178361094d565b9150610773826109d2565b602082019050919050565b600061078b601b8361094d565b9150610796826109fb565b602082019050919050565b6107aa8161099a565b82525050565b600060c0820190506107c5600083018961071a565b6107d26020830188610729565b6107df60408301876107a1565b6107ec6060830186610729565b6107f9608083018561071a565b61080660a0830184610729565b979650505050505050565b6000604082019050610826600083018561071a565b61083360208301846107a1565b9392505050565b600060408201905061084f6000830184610729565b818103602083015261086081610738565b905092915050565b600060408201905061087d6000830184610729565b818103602083015261088e8161075b565b905092915050565b60006040820190506108ab6000830184610729565b81810360208301526108bc8161077e565b905092915050565b60006060820190506108d96000830186610729565b6108e660208301856107a1565b6108f36040830184610729565b949350505050565b600060208201905061091060008301846107a1565b92915050565b600060608201905061092b60008301866107a1565b6109386020830185610729565b6109456040830184610729565b949350505050565b600082825260208201905092915050565b60006109698261097a565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b7f436f756c64206e6f74206765742045786368616e676572000000000000000000600082015250565b7f436f756c64206e6f74206765742053796e746865746978000000000000000000600082015250565b7f436f756c64206e6f74206765742045786368616e676552617465730000000000600082015250565b610a2d8161095e565b8114610a3857600080fd5b50565b610a4481610970565b8114610a4f57600080fd5b50565b610a5b8161099a565b8114610a6657600080fd5b5056fea2646970667358221220d44c4dedf7f586afbbcb9cb4e0354bc7280d40bdd328d3750fd1fcda644fbfce64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3614,
        "contract": "contracts/ExchangerProxy.sol:ExchangerProxy",
        "label": "addressResolver",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressResolver)7086"
      },
      {
        "astId": 3617,
        "contract": "contracts/ExchangerProxy.sol:ExchangerProxy",
        "label": "stakingRewards",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IStakingRewards)7691"
      }
    ],
    "types": {
      "t_contract(IAddressResolver)7086": {
        "encoding": "inplace",
        "label": "contract IAddressResolver",
        "numberOfBytes": "20"
      },
      "t_contract(IStakingRewards)7691": {
        "encoding": "inplace",
        "label": "contract IStakingRewards",
        "numberOfBytes": "20"
      }
    }
  }
}