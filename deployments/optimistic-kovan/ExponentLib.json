{
  "address": "0xaE78CbCCA52dd33ac0fEa6E9357353aa2432aa94",
  "abi": [],
  "numDeployments": 1,
  "solcInputHash": "ee7a47eef76e566acaa3fa51ec176ca2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ExponentLib.sol\":\"ExponentLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/ExponentLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT   \\npragma solidity ^0.8.0;\\n\\nimport \\\"./FixidityLib.sol\\\";\\nimport \\\"./LogarithmLib.sol\\\";\\n\\nlibrary ExponentLib {\\n\\n    using FixidityLib for FixidityLib.Fixidity;\\n    using LogarithmLib for FixidityLib.Fixidity;\\n\\n    function power_e(FixidityLib.Fixidity storage fixidity, int256 x) public view returns (int256) {\\n        assert(x < 172 * fixidity.fixed_1);\\n        int256 r = fixidity.fixed_1;\\n        while(x >= 10 * fixidity.fixed_1) {\\n            x -= 10 * fixidity.fixed_1;\\n            r = fixidity.multiply(r, fixidity.fixed_exp_10);\\n        }\\n        if(x == fixidity.fixed_1) {\\n            return fixidity.multiply(r, fixidity.fixed_e);\\n        } else if(x == 0) {\\n            return r;\\n        }\\n        int256 tr = 100 * fixidity.fixed_1;\\n        int256 d = tr;\\n        for(uint8 i = 1; i <= 2 * fixidity.digits; i++) {\\n            d = (d * x) / (fixidity.fixed_1 * int8(i));\\n            tr += d;\\n        }\\n        return fixidity.trunc_digits(fixidity.multiply(tr, r), 2);\\n    }\\n\\n    function power_any(FixidityLib.Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        return power_e(fixidity, fixidity.multiply(fixidity.log_e(a), b));\\n    }\\n\\n    function root_any(FixidityLib.Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        return power_any(fixidity, a, fixidity.reciprocal(b));\\n    }\\n\\n    function root_n(FixidityLib.Fixidity storage fixidity, int256 a, uint256 n) public view returns (int256) {\\n        return power_e(fixidity, fixidity.divide(fixidity.log_e(a), fixidity.fixed_1 * int256(n)));\\n    }\\n}\",\"keccak256\":\"0x9202083b1422462d313c8f328d1975973cf1ccdc93b6cb2a475738bff7f859fe\",\"license\":\"MIT\"},\"contracts/libraries/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary FixidityLib {\\n\\n    uint8 constant public initial_digits = 36;\\n    int256 constant public fixed_e =            2718281828459045235360287471352662498;\\n    int256 constant public fixed_pi =           3141592653589793238462643383279502884;\\n    int256 constant public fixed_exp_10 =   22026465794806716516957900645284244000000;\\n\\n    struct Fixidity {\\n        uint8 digits;\\n        int256 fixed_1;\\n        int256 fixed_e;\\n        int256 fixed_pi;\\n        int256 fixed_exp_10;\\n    }\\n\\n    function init(Fixidity storage fixidity, uint8 digits) public {\\n        assert(digits < 36);\\n        fixidity.digits = digits;\\n        fixidity.fixed_1 = int256(uint256(10) ** uint256(digits));\\n        int256 t = int256(uint256(10) ** uint256(initial_digits - digits));\\n        fixidity.fixed_e = fixed_e / t;\\n        fixidity.fixed_pi = fixed_pi / t;\\n        fixidity.fixed_exp_10 = fixed_exp_10 / t;\\n    }\\n\\n    function round(Fixidity storage fixidity, int256 v) public view returns (int256) {\\n        return round_off(fixidity, v, fixidity.digits);\\n    }\\n\\n    function floor(Fixidity storage fixidity, int256 v) public view returns (int256) {\\n        return (v / fixidity.fixed_1) * fixidity.fixed_1;\\n    }\\n\\n    function multiply(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        if(b == fixidity.fixed_1) return a;\\n        int256 x1 = a / fixidity.fixed_1;\\n        int256 x2 = a - fixidity.fixed_1 * x1;\\n        int256 y1 = b / fixidity.fixed_1;\\n        int256 y2 = b - fixidity.fixed_1 * y1;\\n        return fixidity.fixed_1 * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixidity.fixed_1;\\n    }\\n\\n    function divide(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        if(b == fixidity.fixed_1) return a;\\n        assert(b != 0);\\n        return multiply(fixidity, a, reciprocal(fixidity, b));\\n    }\\n\\n    function add(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        int256 t = a + b;\\n        assert(t - a == b);\\n        return t;\\n    }\\n\\n    function subtract(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        int256 t = a - b;\\n        assert(t + a == b);\\n        return t;\\n    }\\n\\n    function reciprocal(Fixidity storage fixidity, int256 a) public view returns (int256) {\\n        return round_off(fixidity, 10 * fixidity.fixed_1 * fixidity.fixed_1 / a, 1) / 10;\\n    }\\n\\n    function round_off(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\\n        int256 t = int256(uint256(10) ** uint256(digits));\\n        int8 sign = 1;\\n        if(v < 0) {\\n            sign = -1;\\n            v = 0 - v;\\n        }\\n        if(v % t >= t / 2) v = v + t - v % t;\\n        return v * sign;\\n    }\\n\\n    function round_to(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\\n        assert(digits < fixidity.digits);\\n        return round_off(fixidity, v, fixidity.digits - digits);\\n    }\\n\\n    function trunc_digits(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\\n        if(digits <= 0) return v;\\n        return round_off(fixidity, v, digits) / int256((10 ** digits));\\n    }\\n}\",\"keccak256\":\"0x9a7373b576cea0813fc24387c93fe4caca7e7e8def1f1dba31412610b70ae410\",\"license\":\"MIT\"},\"contracts/libraries/LogarithmLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FixidityLib.sol\\\";\\n\\nlibrary LogarithmLib {\\n\\n    using FixidityLib for FixidityLib.Fixidity;\\n\\n    uint8 constant public longer_digits = 36;\\n    int256 constant public longer_fixed_log_e_1_5 =     405465108108164381978013115464349137;    \\n    int256 constant public longer_fixed_1 =            1000000000000000000000000000000000000;    \\n    int256 constant public longer_fixed_log_e_10 =     2302585092994045684017991454684364208;\\n\\n    function log_e(FixidityLib.Fixidity storage fixidity, int256 v) public view returns (int256) {\\n        assert(v > 0);\\n        int256 r = 0;\\n        uint8 extra_digits = longer_digits - fixidity.digits;\\n        int256 t = int256(uint256(10) ** uint256(extra_digits));\\n        while(v <= fixidity.fixed_1 / 10) {\\n            v = v * 10;\\n            r -= longer_fixed_log_e_10;\\n        }\\n        while(v >= 10 * fixidity.fixed_1) {\\n            v = v / 10;\\n            r += longer_fixed_log_e_10;\\n        }\\n        while(v < fixidity.fixed_1) {\\n            v = fixidity.multiply(v, fixidity.fixed_e);\\n            r -= longer_fixed_1;\\n        }\\n        while(v > fixidity.fixed_e) {\\n            v = fixidity.divide(v, fixidity.fixed_e);\\n            r += longer_fixed_1;\\n        }\\n        if(v == fixidity.fixed_1) {\\n            return FixidityLib.round_off(fixidity, r, extra_digits) / t;\\n        }\\n        if(v == fixidity.fixed_e) {\\n            return fixidity.fixed_1 + FixidityLib.round_off(fixidity, r, extra_digits) / t;\\n        }\\n        v *= t;\\n        v = v - 3 * longer_fixed_1 / 2;\\n        r = r + longer_fixed_log_e_1_5;\\n        int256 m = longer_fixed_1 * v / (v + 3 * longer_fixed_1);\\n        r = r + 2 * m;\\n        int256 m_2 = m * m / longer_fixed_1;\\n        int256 i = 3;\\n        while(true) {\\n            m = m * m_2 / longer_fixed_1;\\n            r = r + 2 * m / i;\\n            i += 2;\\n            if(i >= 3 + 2 * int8(fixidity.digits)) break;\\n        }\\n        return FixidityLib.round_off(fixidity, r, extra_digits) / t;\\n    }\\n\\n    function log_any(FixidityLib.Fixidity storage fixidity, int256 base, int256 v) public view returns (int256) {\\n        return fixidity.divide(log_e(fixidity, v), log_e(fixidity, base));\\n    }\\n}\",\"keccak256\":\"0x5e5f30f2fc574832dde222e69ddf0321732399ef49c1ae45ff88789a69786fe7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610e24610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80633d37f8b21461005b5780636065713e1461008b578063b043c00f146100bb578063b0ed1d3a146100eb575b600080fd5b6100756004803603810190610070919061084f565b61011b565b604051610082919061091a565b60405180910390f35b6100a560048036038101906100a091906108a2565b610246565b6040516100b2919061091a565b60405180910390f35b6100d560048036038101906100d0919061084f565b610380565b6040516100e2919061091a565b60405180910390f35b6101056004803603810190610100919061080f565b610420565b604051610112919061091a565b60405180910390f35b600061023d848573__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e490918873__$9f7de4dc44b03be48f78ba09eab9313dc7$__630f7c99fe90918a6040518363ffffffff1660e01b8152600401610179929190610935565b60206040518083038186803b15801561019157600080fd5b505af41580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c991906107e2565b876040518463ffffffff1660e01b81526004016101e89392919061095e565b60206040518083038186803b15801561020057600080fd5b505af4158015610214573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023891906107e2565b610420565b90509392505050565b6000610377848573__$58bf06b23003f263f89da1a87991e621d6$__63ea71c72090918873__$9f7de4dc44b03be48f78ba09eab9313dc7$__630f7c99fe90918a6040518363ffffffff1660e01b81526004016102a4929190610935565b60206040518083038186803b1580156102bc57600080fd5b505af41580156102d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f491906107e2565b878a600101546103049190610aca565b6040518463ffffffff1660e01b81526004016103229392919061095e565b60206040518083038186803b15801561033a57600080fd5b505af415801561034e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037291906107e2565b610420565b90509392505050565b600061041784848673__$58bf06b23003f263f89da1a87991e621d6$__637b0cc5769091876040518363ffffffff1660e01b81526004016103c2929190610935565b60206040518083038186803b1580156103da57600080fd5b505af41580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041291906107e2565b61011b565b90509392505050565b6000826001015460ac6104339190610aca565b821261044257610441610d17565b5b6000836001015490505b8360010154600a61045d9190610aca565b8312610519578360010154600a6104749190610aca565b8361047f9190610c1c565b92508373__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e490918387600401546040518463ffffffff1660e01b81526004016104c29392919061095e565b60206040518083038186803b1580156104da57600080fd5b505af41580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051291906107e2565b905061044c565b83600101548314156105be578373__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e490918387600201546040518463ffffffff1660e01b81526004016105669392919061095e565b60206040518083038186803b15801561057e57600080fd5b505af4158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b691906107e2565b915050610788565b60008314156105d05780915050610788565b6000846001015460646105e39190610aca565b905060008190506000600190505b8660000160009054906101000a900460ff16600261060f9190610be1565b60ff168160ff1611610667578060000b876001015461062e9190610aca565b868361063a9190610aca565b6106449190610a60565b9150818361065291906109cc565b9250808061065f90610ced565b9150506105f1565b508573__$58bf06b23003f263f89da1a87991e621d6$__631fbf952490918873__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e4909187896040518463ffffffff1660e01b81526004016106c29392919061095e565b60206040518083038186803b1580156106da57600080fd5b505af41580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071291906107e2565b60026040518463ffffffff1660e01b815260040161073293929190610995565b60206040518083038186803b15801561074a57600080fd5b505af415801561075e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078291906107e2565b93505050505b92915050565b60008135905061079d81610da9565b92915050565b6000815190506107b281610da9565b92915050565b6000813590506107c781610dc0565b92915050565b6000813590506107dc81610dd7565b92915050565b6000602082840312156107f8576107f7610da4565b5b6000610806848285016107a3565b91505092915050565b6000806040838503121561082657610825610da4565b5b6000610834858286016107b8565b92505060206108458582860161078e565b9150509250929050565b60008060006060848603121561086857610867610da4565b5b6000610876868287016107b8565b93505060206108878682870161078e565b92505060406108988682870161078e565b9150509250925092565b6000806000606084860312156108bb576108ba610da4565b5b60006108c9868287016107b8565b93505060206108da8682870161078e565b92505060406108eb868287016107cd565b9150509250925092565b6108fe81610cb0565b82525050565b61090d81610cdb565b82525050565b8082525050565b600060208201905061092f60008301846108f5565b92915050565b600060408201905061094a6000830185610913565b61095760208301846108f5565b9392505050565b60006060820190506109736000830186610913565b61098060208301856108f5565b61098d60408301846108f5565b949350505050565b60006060820190506109aa6000830186610913565b6109b760208301856108f5565b6109c46040830184610904565b949350505050565b60006109d782610cb0565b91506109e283610cb0565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610a1d57610a1c610d46565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610a5557610a54610d46565b5b828201905092915050565b6000610a6b82610cb0565b9150610a7683610cb0565b925082610a8657610a85610d75565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610abf57610abe610d46565b5b828205905092915050565b6000610ad582610cb0565b9150610ae083610cb0565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610b1f57610b1e610d46565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610b5c57610b5b610d46565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610b9957610b98610d46565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610bd657610bd5610d46565b5b828202905092915050565b6000610bec82610cce565b9150610bf783610cce565b92508160ff0483118215151615610c1157610c10610d46565b5b828202905092915050565b6000610c2782610cb0565b9150610c3283610cb0565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610c6d57610c6c610d46565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610ca557610ca4610d46565b5b828203905092915050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b6000610ce682610cce565b9050919050565b6000610cf882610cce565b915060ff821415610d0c57610d0b610d46565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610db281610cb0565b8114610dbd57600080fd5b50565b610dc981610cba565b8114610dd457600080fd5b50565b610de081610cc4565b8114610deb57600080fd5b5056fea2646970667358221220917559419d66b00d5c74c4ca4e63e9f4c987f223dd8e06fd8703c097db4945e864736f6c63430008070033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80633d37f8b21461005b5780636065713e1461008b578063b043c00f146100bb578063b0ed1d3a146100eb575b600080fd5b6100756004803603810190610070919061084f565b61011b565b604051610082919061091a565b60405180910390f35b6100a560048036038101906100a091906108a2565b610246565b6040516100b2919061091a565b60405180910390f35b6100d560048036038101906100d0919061084f565b610380565b6040516100e2919061091a565b60405180910390f35b6101056004803603810190610100919061080f565b610420565b604051610112919061091a565b60405180910390f35b600061023d848573__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e490918873__$9f7de4dc44b03be48f78ba09eab9313dc7$__630f7c99fe90918a6040518363ffffffff1660e01b8152600401610179929190610935565b60206040518083038186803b15801561019157600080fd5b505af41580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c991906107e2565b876040518463ffffffff1660e01b81526004016101e89392919061095e565b60206040518083038186803b15801561020057600080fd5b505af4158015610214573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023891906107e2565b610420565b90509392505050565b6000610377848573__$58bf06b23003f263f89da1a87991e621d6$__63ea71c72090918873__$9f7de4dc44b03be48f78ba09eab9313dc7$__630f7c99fe90918a6040518363ffffffff1660e01b81526004016102a4929190610935565b60206040518083038186803b1580156102bc57600080fd5b505af41580156102d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f491906107e2565b878a600101546103049190610aca565b6040518463ffffffff1660e01b81526004016103229392919061095e565b60206040518083038186803b15801561033a57600080fd5b505af415801561034e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037291906107e2565b610420565b90509392505050565b600061041784848673__$58bf06b23003f263f89da1a87991e621d6$__637b0cc5769091876040518363ffffffff1660e01b81526004016103c2929190610935565b60206040518083038186803b1580156103da57600080fd5b505af41580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041291906107e2565b61011b565b90509392505050565b6000826001015460ac6104339190610aca565b821261044257610441610d17565b5b6000836001015490505b8360010154600a61045d9190610aca565b8312610519578360010154600a6104749190610aca565b8361047f9190610c1c565b92508373__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e490918387600401546040518463ffffffff1660e01b81526004016104c29392919061095e565b60206040518083038186803b1580156104da57600080fd5b505af41580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051291906107e2565b905061044c565b83600101548314156105be578373__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e490918387600201546040518463ffffffff1660e01b81526004016105669392919061095e565b60206040518083038186803b15801561057e57600080fd5b505af4158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b691906107e2565b915050610788565b60008314156105d05780915050610788565b6000846001015460646105e39190610aca565b905060008190506000600190505b8660000160009054906101000a900460ff16600261060f9190610be1565b60ff168160ff1611610667578060000b876001015461062e9190610aca565b868361063a9190610aca565b6106449190610a60565b9150818361065291906109cc565b9250808061065f90610ced565b9150506105f1565b508573__$58bf06b23003f263f89da1a87991e621d6$__631fbf952490918873__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e4909187896040518463ffffffff1660e01b81526004016106c29392919061095e565b60206040518083038186803b1580156106da57600080fd5b505af41580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071291906107e2565b60026040518463ffffffff1660e01b815260040161073293929190610995565b60206040518083038186803b15801561074a57600080fd5b505af415801561075e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078291906107e2565b93505050505b92915050565b60008135905061079d81610da9565b92915050565b6000815190506107b281610da9565b92915050565b6000813590506107c781610dc0565b92915050565b6000813590506107dc81610dd7565b92915050565b6000602082840312156107f8576107f7610da4565b5b6000610806848285016107a3565b91505092915050565b6000806040838503121561082657610825610da4565b5b6000610834858286016107b8565b92505060206108458582860161078e565b9150509250929050565b60008060006060848603121561086857610867610da4565b5b6000610876868287016107b8565b93505060206108878682870161078e565b92505060406108988682870161078e565b9150509250925092565b6000806000606084860312156108bb576108ba610da4565b5b60006108c9868287016107b8565b93505060206108da8682870161078e565b92505060406108eb868287016107cd565b9150509250925092565b6108fe81610cb0565b82525050565b61090d81610cdb565b82525050565b8082525050565b600060208201905061092f60008301846108f5565b92915050565b600060408201905061094a6000830185610913565b61095760208301846108f5565b9392505050565b60006060820190506109736000830186610913565b61098060208301856108f5565b61098d60408301846108f5565b949350505050565b60006060820190506109aa6000830186610913565b6109b760208301856108f5565b6109c46040830184610904565b949350505050565b60006109d782610cb0565b91506109e283610cb0565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610a1d57610a1c610d46565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610a5557610a54610d46565b5b828201905092915050565b6000610a6b82610cb0565b9150610a7683610cb0565b925082610a8657610a85610d75565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610abf57610abe610d46565b5b828205905092915050565b6000610ad582610cb0565b9150610ae083610cb0565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610b1f57610b1e610d46565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610b5c57610b5b610d46565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610b9957610b98610d46565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610bd657610bd5610d46565b5b828202905092915050565b6000610bec82610cce565b9150610bf783610cce565b92508160ff0483118215151615610c1157610c10610d46565b5b828202905092915050565b6000610c2782610cb0565b9150610c3283610cb0565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610c6d57610c6c610d46565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610ca557610ca4610d46565b5b828203905092915050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b6000610ce682610cce565b9050919050565b6000610cf882610cce565b915060ff821415610d0c57610d0b610d46565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610db281610cb0565b8114610dbd57600080fd5b50565b610dc981610cba565b8114610dd457600080fd5b50565b610de081610cc4565b8114610deb57600080fd5b5056fea2646970667358221220917559419d66b00d5c74c4ca4e63e9f4c987f223dd8e06fd8703c097db4945e864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}