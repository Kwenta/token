{
  "language": "Solidity",
  "sources": {
    "contracts/ControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n// This contracts runs on L1, and controls a MerkleDistributor on L2\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IControlL2MerkleDistributor.sol\";\n\nimport { ICrossDomainMessenger } from \n    \"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\";\n    \ncontract ControlL2MerkleDistributor is IControlL2MerkleDistributor {\n    // communication between L1 and L2 is enabled by two special smart contracts called the \"messengers\"\n    // and below is the address for the messenger on L1\n    address immutable crossDomainMessengerAddr;\n\n    // MerkleDistributor deployed on L2\n    address immutable merkleDistributorL2Address;\n\n    constructor(address _crossDomainMessengerAddr, address _merkleDistributorL2Address) {\n        crossDomainMessengerAddr = _crossDomainMessengerAddr;\n        merkleDistributorL2Address = _merkleDistributorL2Address;\n    }\n\n    /*\n     * claim $KWENTA on L2 from an L1 address\n     * @notice destAccount will be the address used to create new escrow entry\n     * @param index: used for merkle tree verification\n     * @param destAccount: address used for escrow entry\n     * @param amount: $KWENTA amount to be escrowed\n     * @param merkleProof: off-chain generated proof of merkle tree inclusion\n     */ \n    function claimToAddress(uint256 index, address destAccount, uint256 amount, bytes32[] calldata merkleProof) external override {\n        bytes memory message;\n        message = abi.encodeWithSignature(\n            \"claimToAddress(uint256,address,uint256,bytes32[])\",\n            index, \n            destAccount, \n            amount, \n            merkleProof\n        );\n\n        ICrossDomainMessenger(crossDomainMessengerAddr).sendMessage(\n            merkleDistributorL2Address,\n            message,\n            1000000   // within the free gas limit amount\n        );\n    }\n\n}\n"
    },
    "contracts/interfaces/IControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// allows messages from L1 -> L2\ninterface IControlL2MerkleDistributor {\n    // allows an L1 account to call MerkleDistributor.claimToAddress() on L2\n    function claimToAddress(uint256 index, address destAccount, uint256 amount, bytes32[] calldata merkleProof) external;\n}\n"
    },
    "@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\n/**\n * @title ICrossDomainMessenger\n */\ninterface ICrossDomainMessenger {\n    /**********\n     * Events *\n     **********/\n\n    event SentMessage(\n        address indexed target,\n        address sender,\n        bytes message,\n        uint256 messageNonce,\n        uint256 gasLimit\n    );\n    event RelayedMessage(bytes32 indexed msgHash);\n    event FailedRelayedMessage(bytes32 indexed msgHash);\n\n    /*************\n     * Variables *\n     *************/\n\n    function xDomainMessageSender() external view returns (address);\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * Sends a cross domain message to the target messenger.\n     * @param _target Target contract address.\n     * @param _message Message to send to the target.\n     * @param _gasLimit Gas limit for the provided message.\n     */\n    function sendMessage(\n        address _target,\n        bytes calldata _message,\n        uint32 _gasLimit\n    ) external;\n}\n"
    },
    "contracts/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\nimport \"./interfaces/IMerkleDistributor.sol\";\n\nimport { ICrossDomainMessenger } from \n    \"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\";\n\ncontract MerkleDistributor is IMerkleDistributor {\n    // escrow for tokens claimed\n    address public immutable override rewardEscrow;\n\n    address public immutable override token;\n    bytes32 public immutable override merkleRoot;\n\n    // communication between L1 and L2 is enabled by two special smart contracts called the \"messengers\"\n    // and below is the address for the messenger on L2\n    address private crossDomainMessengerAddr = 0x4200000000000000000000000000000000000007;\n\n    // This is a packed array of booleans.\n    mapping(uint256 => uint256) private claimedBitMap;\n\n    constructor(address _token, address _rewardEscrow, bytes32 _merkleRoot) {\n        token = _token;\n        rewardEscrow = _rewardEscrow;\n        merkleRoot = _merkleRoot;\n    }\n\n    function isClaimed(uint256 index) public view override returns (bool) {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    function _setClaimed(uint256 index) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n    }\n\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external override {\n        require(!isClaimed(index), 'MerkleDistributor: Drop already claimed.');\n\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\n\n        // Mark it claimed and send the token to RewardEscrow\n        _setClaimed(index);\n        IERC20(token).approve(rewardEscrow, amount);\n        IRewardEscrow(rewardEscrow).createEscrowEntry(account, amount, 52 weeks);\n        \n        emit Claimed(index, account, amount);\n    }\n\n    function claimToAddress(uint256 index, address destAccount, uint256 amount, bytes32[] calldata merkleProof) external override {\n        require(!isClaimed(index), 'MerkleDistributor: Drop already claimed.');\n        require(msg.sender == crossDomainMessengerAddr, \n            \"MerkleDistributor: Only the OVM-ICrossDomainMessenger can call this function\"\n        );\n\n        // caller address from L1 (effectively the msg.sender on L1)\n        address caller = ICrossDomainMessenger(crossDomainMessengerAddr).xDomainMessageSender();\n\n        // Verify the merkle proof with the L1 caller's address\n        bytes32 node = keccak256(abi.encodePacked(index, caller, amount));\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\n\n        // Mark it claimed and send the token to RewardEscrow\n        _setClaimed(index);\n        IERC20(token).approve(rewardEscrow, amount);\n        // @notice destAccount is NOT necessarily the caller's address\n        IRewardEscrow(rewardEscrow).createEscrowEntry(destAccount, amount, 52 weeks);\n        \n        emit Claimed(index, caller, amount);\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "contracts/interfaces/IRewardEscrow.sol": {
      "content": "pragma solidity >=0.4.24;\npragma experimental ABIEncoderV2;\n\nlibrary VestingEntries {\n    struct VestingEntry {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 duration;\n    }\n    struct VestingEntryWithID {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 entryID;\n    }\n}\n\ninterface IRewardEscrow {\n    // Views\n    function balanceOf(address account) external view returns (uint);\n\n    function numVestingEntries(address account) external view returns (uint);\n\n    function totalEscrowedAccountBalance(address account) external view returns (uint);\n\n    function totalVestedAccountBalance(address account) external view returns (uint);\n\n    function getVestingQuantity(address account, uint256[] calldata entryIDs) external view returns (uint, uint);\n\n    function getVestingSchedules(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\n\n    function getAccountVestingEntryIDs(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (uint256[] memory);\n\n    function getVestingEntryClaimable(address account, uint256 entryID) external view returns (uint, uint);\n\n    function getVestingEntry(address account, uint256 entryID) external view returns (uint64, uint256, uint256);\n\n    // Mutative functions\n    function vest(uint256[] calldata entryIDs) external;\n\n    function createEscrowEntry(\n        address beneficiary,\n        uint256 deposit,\n        uint256 duration\n    ) external;\n\n    function appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) external;\n\n    function stakeEscrow(uint256 _amount) external;\n\n    function unstakeEscrow(uint256 _amount) external;\n}"
    },
    "contracts/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMerkleDistributor {\n    // Returns the address of the token distributed by this contract\n    function token() external view returns (address);\n\n    // Returns the address of the RewardEscrow used by this contract\n    function rewardEscrow() external view returns (address);\n\n    // Returns the merkle root of the merkle tree containing account balances available to claim\n    function merkleRoot() external view returns (bytes32);\n\n    // Returns true if the index has been marked claimed\n    function isClaimed(uint256 index) external view returns (bool);\n    \n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\n\n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid\n    function claimToAddress(uint256 index, address destAccount, uint256 amount, bytes32[] calldata merkleProof) external;\n\n    // This event is triggered whenever a call to #claim succeeds\n    event Claimed(uint256 index, address account, uint256 amount);\n}"
    },
    "contracts-exposed/ControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ControlL2MerkleDistributor.sol\";\n\ncontract $ControlL2MerkleDistributor is ControlL2MerkleDistributor {\n    constructor(address _crossDomainMessengerAddr, address _merkleDistributorL2Address) ControlL2MerkleDistributor(_crossDomainMessengerAddr, _merkleDistributorL2Address) {}\n\n    function $crossDomainMessengerAddr() external view returns (address) {\n        return crossDomainMessengerAddr;\n    }\n\n    function $merkleDistributorL2Address() external view returns (address) {\n        return merkleDistributorL2Address;\n    }\n}\n"
    },
    "contracts-exposed/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/MerkleDistributor.sol\";\n\ncontract $MerkleDistributor is MerkleDistributor {\n    constructor(address _token, address _rewardEscrow, bytes32 _merkleRoot) MerkleDistributor(_token, _rewardEscrow, _merkleRoot) {}\n}\n"
    },
    "contracts-exposed/interfaces/IControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IControlL2MerkleDistributor.sol\";\n\nabstract contract $IControlL2MerkleDistributor is IControlL2MerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IMerkleDistributor.sol\";\n\nabstract contract $IMerkleDistributor is IMerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IRewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IRewardEscrow.sol\";\n\ncontract $VestingEntries {\n    constructor() {}\n}\n\nabstract contract $IRewardEscrow is IRewardEscrow {\n    constructor() {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}