{
  "language": "Solidity",
  "sources": {
    "contracts/ExchangerProxy.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IAddressResolver.sol\";\nimport \"./interfaces/ISynthetix.sol\";\nimport \"./interfaces/IExchanger.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\nimport \"./interfaces/IExchangeRates.sol\";\nimport \"./interfaces/IERC20.sol\";\n\ncontract ExchangerProxy {\n    IAddressResolver addressResolver;\n    IStakingRewards stakingRewards;\n    bytes32 private constant CONTRACT_SYNTHETIX = \"Synthetix\";\n    bytes32 private constant CONTRACT_EXCHANGER = \"Exchanger\";\n    bytes32 private constant CONTRACT_EXRATES = \"ExchangeRates\";\n    bytes32 private constant sUSD_CURRENCY_KEY = \"sUSD\";\n    \n    constructor(address _addressResolver, address _stakingRewards) {\n        addressResolver = IAddressResolver(_addressResolver);\n        stakingRewards = IStakingRewards(_stakingRewards);\n    }\n\n    function synthetix() internal view returns (ISynthetix) {\n        return ISynthetix(addressResolver.requireAndGetAddress(\n            CONTRACT_SYNTHETIX, \n            \"Could not get Synthetix\"\n        ));\n    }\n\n    function exchanger() internal view returns (IExchanger) {\n        return IExchanger(addressResolver.requireAndGetAddress(\n            CONTRACT_EXCHANGER, \n            \"Could not get Exchanger\"\n        ));\n    }\n\n    function exchangeRates() internal view returns (IExchangeRates) {\n        return IExchangeRates(addressResolver.requireAndGetAddress(\n            CONTRACT_EXRATES,\n            \"Could not get ExchangeRates\"\n        ));\n    }\n\n    function exchangeOnBehalfWithTraderScoreTracking(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address rewardAddress,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived) {\n        // Get fee\n        ( , uint fee, ) = exchanger().getAmountsForExchange(\n            sourceAmount, \n            sourceCurrencyKey, \n            destinationCurrencyKey\n        );\n\n        // If fee is NOT denoted in sUSD, query Synthetix for exchange rate in sUSD\n        if (destinationCurrencyKey != sUSD_CURRENCY_KEY) {\n            fee = exchangeRates().effectiveValue(destinationCurrencyKey, fee, sUSD_CURRENCY_KEY);\n        }\n\n        // Execute exchange on behalf of user\n        uint received = synthetix().exchangeOnBehalfWithTracking(\n            msg.sender,\n            sourceCurrencyKey,\n            sourceAmount,\n            destinationCurrencyKey,\n            rewardAddress,\n            trackingCode\n        );\n\n        // Update StakingRewards trader score\n        stakingRewards.updateTraderScore(msg.sender, fee);\n        return received;\n    }\n}"
    },
    "contracts/interfaces/IAddressResolver.sol": {
      "content": "pragma solidity >=0.4.24;\n\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\ninterface IAddressResolver {\n    function getAddress(bytes32 name) external view returns (address);\n\n    function getSynth(bytes32 key) external view returns (address);\n\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\n}\n"
    },
    "contracts/interfaces/ISynthetix.sol": {
      "content": "pragma solidity >=0.4.24;\n\nimport \"./ISynth.sol\";\nimport \"./IVirtualSynth.sol\";\n\n// https://docs.synthetix.io/contracts/source/interfaces/isynthetix\ninterface ISynthetix {\n    // Views\n    function anySynthOrSNXRateIsInvalid() external view returns (bool anyRateInvalid);\n\n    function availableCurrencyKeys() external view returns (bytes32[] memory);\n\n    function availableSynthCount() external view returns (uint);\n\n    function availableSynths(uint index) external view returns (ISynth);\n\n    function collateral(address account) external view returns (uint);\n\n    function collateralisationRatio(address issuer) external view returns (uint);\n\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns (uint);\n\n    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n\n    function maxIssuableSynths(address issuer) external view returns (uint maxIssuable);\n\n    function remainingIssuableSynths(address issuer)\n        external\n        view\n        returns (\n            uint maxIssuable,\n            uint alreadyIssued,\n            uint totalSystemDebt\n        );\n\n    function synths(bytes32 currencyKey) external view returns (ISynth);\n\n    function synthsByAddress(address synthAddress) external view returns (bytes32);\n\n    function totalIssuedSynths(bytes32 currencyKey) external view returns (uint);\n\n    function totalIssuedSynthsExcludeOtherCollateral(bytes32 currencyKey) external view returns (uint);\n\n    function transferableSynthetix(address account) external view returns (uint transferable);\n\n    // Mutative Functions\n    function burnSynths(uint amount) external;\n\n    function burnSynthsOnBehalf(address burnForAddress, uint amount) external;\n\n    function burnSynthsToTarget() external;\n\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\n\n    function exchange(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalf(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external returns (uint amountReceived);\n\n    function exchangeWithTracking(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address rewardAddress,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeWithTrackingForInitiator(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address rewardAddress,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeOnBehalfWithTracking(\n        address exchangeForAddress,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address rewardAddress,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived);\n\n    function exchangeWithVirtual(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\n\n    function issueMaxSynths() external;\n\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\n\n    function issueSynths(uint amount) external;\n\n    function issueSynthsOnBehalf(address issueForAddress, uint amount) external;\n\n    function mint() external returns (bool);\n\n    function settle(bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    // Liquidations\n    function liquidateDelinquentAccount(address account, uint susdAmount) external returns (bool);\n\n    // Restricted Functions\n\n    function mintSecondary(address account, uint amount) external;\n\n    function mintSecondaryRewards(uint amount) external;\n\n    function burnSecondary(address account, uint amount) external;\n}"
    },
    "contracts/interfaces/IExchanger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.24;\n\nimport \"./IVirtualSynth.sol\";\n\n// https://docs.synthetix.io/contracts/source/interfaces/iexchanger\ninterface IExchanger {\n    // Views\n    function calculateAmountAfterSettlement(\n        address from,\n        bytes32 currencyKey,\n        uint amount,\n        uint refunded\n    ) external view returns (uint amountAfterSettlement);\n\n    function isSynthRateInvalid(bytes32 currencyKey) external view returns (bool);\n\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\n\n    function settlementOwing(address account, bytes32 currencyKey)\n        external\n        view\n        returns (\n            uint reclaimAmount,\n            uint rebateAmount,\n            uint numEntries\n        );\n\n    function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) external view returns (bool);\n\n    function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey)\n        external\n        view\n        returns (uint exchangeFeeRate);\n\n    function getAmountsForExchange(\n        uint sourceAmount,\n        bytes32 sourceCurrencyKey,\n        bytes32 destinationCurrencyKey\n    )\n        external\n        view\n        returns (\n            uint amountReceived,\n            uint fee,\n            uint exchangeFeeRate\n        );\n\n    function priceDeviationThresholdFactor() external view returns (uint);\n\n    function waitingPeriodSecs() external view returns (uint);\n\n    // Mutative functions\n    function exchange(\n        address exchangeForAddress,\n        address from,\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey,\n        address destinationAddress,\n        bool virtualSynth,\n        address rewardAddress,\n        bytes32 trackingCode\n    ) external returns (uint amountReceived, IVirtualSynth vSynth);\n\n    function settle(address from, bytes32 currencyKey)\n        external\n        returns (\n            uint reclaimed,\n            uint refunded,\n            uint numEntries\n        );\n\n    function resetLastExchangeRate(bytes32[] calldata currencyKeys) external;\n\n    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\n}\n"
    },
    "contracts/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IStakingRewards {\n    // Views\n\n    function escrowedBalanceOf(address account) external view returns (uint256);\n\n    function totalRewardScore() external view returns (uint256);\n    \n    function stakedBalanceOf(address account) external view returns (uint256);\n    \n    function totalBalanceOf(address account) external view returns (uint256);\n\n    function rewardScoreOf(address account) external view returns (uint256);\n\n    function rewardPerRewardScoreOfEpoch(uint256 _epoch) external view returns (uint256);\n\n    function feesPaidBy(address account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    // Mutative\n\n    function setPercentageRewards(uint256 _percentageStaking, uint256 _percentageTrading) external;\n\n    function updateTraderScore(address _trader, uint256 _newFeesPaid) external;\n\n    function exit() external;\n\n    function getReward() external;\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function setRewards(uint256 reward) external;\n\n    function stakeEscrow(address _account, uint256 _amount) external;\n\n    function unstakeEscrow(address _account, uint256 _amount) external;\n\n}"
    },
    "contracts/interfaces/IExchangeRates.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.24;\n\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\ninterface IExchangeRates {\n    // Views\n\n    // Given a quantity of a source currency, returns a quantity \n    // of a destination currency that is of equivalent value at \n    // current exchange rates, if those rates are fresh\n    function effectiveValue(\n        bytes32 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes32 destinationCurrencyKey\n    ) external view returns (uint value);\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0 <0.9.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/ISynth.sol": {
      "content": "pragma solidity >=0.4.24;\n\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\ninterface ISynth {\n    // Views\n    function currencyKey() external view returns (bytes32);\n\n    function transferableSynths(address account) external view returns (uint);\n\n    // Mutative functions\n    function transferAndSettle(address to, uint value) external returns (bool);\n\n    function transferFromAndSettle(\n        address from,\n        address to,\n        uint value\n    ) external returns (bool);\n\n    // Restricted: used internally to Synthetix\n    function burn(address account, uint amount) external;\n\n    function issue(address account, uint amount) external;\n}"
    },
    "contracts/interfaces/IVirtualSynth.sol": {
      "content": "pragma solidity >=0.4.24;\n\nimport \"./ISynth.sol\";\n\ninterface IVirtualSynth {\n    // Views\n    function balanceOfUnderlying(address account) external view returns (uint);\n\n    function rate() external view returns (uint);\n\n    function readyToSettle() external view returns (bool);\n\n    function secsLeftInWaitingPeriod() external view returns (uint);\n\n    function settled() external view returns (bool);\n\n    function synth() external view returns (ISynth);\n\n    // Mutative functions\n    function settle(address account) external;\n}"
    },
    "contracts/SupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/ISupplySchedule.sol\";\n\n// Libraries\nimport \"./libraries/SafeDecimalMath.sol\";\nimport \"./libraries/Math.sol\";\n\n// Internal references\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IKwenta.sol\";\nimport './interfaces/IStakingRewards.sol';\n\n// https://docs.synthetix.io/contracts/source/contracts/supplyschedule\ncontract SupplySchedule is Owned, ISupplySchedule {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n    using Math for uint;\n\n    IKwenta public kwenta;\n\n    // Time of the last inflation supply mint event\n    uint public lastMintEvent;\n\n    // Counter for number of weeks since the start of supply inflation\n    uint public weekCounter;\n\n    // The number of KWENTA rewarded to the caller of Kwenta.mint()\n    uint public minterReward = 1e18;\n\n    uint public constant INITIAL_SUPPLY = 313373e18;\n\n    // Initial Supply * 240% Initial Inflation Rate / 52 weeks.\n    uint public constant INITIAL_WEEKLY_SUPPLY = INITIAL_SUPPLY * 240 / 100 / 52;\n\n    // Max KWENTA rewards for minter\n    uint public constant MAX_MINTER_REWARD = 20 * 1e18;\n\n    // How long each inflation period is before mint can be called\n    uint public constant MINT_PERIOD_DURATION = 1 weeks;\n\n    uint public immutable INFLATION_START_DATE;\n    uint public constant MINT_BUFFER = 1 days;\n    uint8 public constant SUPPLY_DECAY_START = 2; // Supply decay starts on the 2nd week of rewards\n    uint8 public constant SUPPLY_DECAY_END = 208; // Inclusive of SUPPLY_DECAY_END week.\n\n    // Weekly percentage decay of inflationary supply\n    uint public constant DECAY_RATE = 20500000000000000; // 2.05% weekly\n\n    // Percentage growth of terminal supply per annum\n    uint public constant TERMINAL_SUPPLY_RATE_ANNUAL = 10000000000000000; // 1.0% pa\n\n    uint public treasuryDiversion = 2000; // 20% to treasury\n\n    address immutable treasuryDAO;\n    IStakingRewards public stakingRewards;\n\n    constructor(\n        address _owner,\n        address _treasuryDAO\n    ) Owned(_owner) {\n        treasuryDAO = _treasuryDAO;\n\n        INFLATION_START_DATE = block.timestamp; //Inflation starts as soon as the contract is deployed.\n        lastMintEvent = block.timestamp;\n        weekCounter = 0;\n    }\n\n    // ========== VIEWS ==========\n\n    /**\n     * @return The amount of KWENTA mintable for the inflationary supply\n     */\n    function mintableSupply() override public view returns (uint) {\n        uint totalAmount;\n\n        if (!isMintable()) {\n            return totalAmount;\n        }\n\n        uint remainingWeeksToMint = weeksSinceLastIssuance();\n\n        uint currentWeek = weekCounter;\n\n        // Calculate total mintable supply from exponential decay function\n        // The decay function stops after week 234\n        while (remainingWeeksToMint > 0) {\n            currentWeek++;\n\n            if (currentWeek < SUPPLY_DECAY_START) {\n                // If current week is before supply decay we add initial supply to mintableSupply\n                totalAmount = totalAmount.add(INITIAL_WEEKLY_SUPPLY);\n                remainingWeeksToMint--;\n            } else if (currentWeek <= SUPPLY_DECAY_END) {\n                // if current week before supply decay ends we add the new supply for the week\n                // diff between current week and (supply decay start week - 1)\n                uint decayCount = currentWeek.sub(SUPPLY_DECAY_START - 1);\n\n                totalAmount = totalAmount.add(tokenDecaySupplyForWeek(decayCount));\n                remainingWeeksToMint--;\n            } else {\n                // Terminal supply is calculated on the total supply of Kwenta including any new supply\n                // We can compound the remaining week's supply at the fixed terminal rate\n                uint totalSupply = IERC20(kwenta).totalSupply();\n                uint currentTotalSupply = totalSupply.add(totalAmount);\n\n                totalAmount = totalAmount.add(terminalInflationSupply(currentTotalSupply, remainingWeeksToMint));\n                remainingWeeksToMint = 0;\n            }\n        }\n\n        return totalAmount;\n    }\n\n    /**\n     * @return A unit amount of decaying inflationary supply from the INITIAL_WEEKLY_SUPPLY\n     * @dev New token supply reduces by the decay rate each week calculated as supply = INITIAL_WEEKLY_SUPPLY * ()\n     */\n    function tokenDecaySupplyForWeek(uint counter) public pure returns (uint) {\n        // Apply exponential decay function to number of weeks since\n        // start of inflation smoothing to calculate diminishing supply for the week.\n        uint effectiveDecay = (SafeDecimalMath.unit().sub(DECAY_RATE)).powDecimal(counter);\n        uint supplyForWeek = INITIAL_WEEKLY_SUPPLY.multiplyDecimal(effectiveDecay);\n\n        return supplyForWeek;\n    }\n\n    /**\n     * @return A unit amount of terminal inflation supply\n     * @dev Weekly compound rate based on number of weeks\n     */\n    function terminalInflationSupply(uint totalSupply, uint numOfWeeks) public pure returns (uint) {\n        // rate = (1 + weekly rate) ^ num of weeks\n        uint effectiveCompoundRate = SafeDecimalMath.unit().add(TERMINAL_SUPPLY_RATE_ANNUAL.div(52)).powDecimal(numOfWeeks);\n\n        // return Supply * (effectiveRate - 1) for extra supply to issue based on number of weeks\n        return totalSupply.multiplyDecimal(effectiveCompoundRate.sub(SafeDecimalMath.unit()));\n    }\n\n    /**\n     * @dev Take timeDiff in seconds (Dividend) and MINT_PERIOD_DURATION as (Divisor)\n     * @return Calculate the numberOfWeeks since last mint rounded down to 1 week\n     */\n    function weeksSinceLastIssuance() public view returns (uint) {\n        // Get weeks since lastMintEvent\n        // If lastMintEvent not set or 0, then start from inflation start date.\n        uint timeDiff = lastMintEvent > 0 ? block.timestamp.sub(lastMintEvent) : block.timestamp.sub(INFLATION_START_DATE);\n        return timeDiff.div(MINT_PERIOD_DURATION);\n    }\n\n    /**\n     * @return boolean whether the MINT_PERIOD_DURATION (7 days)\n     * has passed since the lastMintEvent.\n     * */\n    function isMintable() override public view returns (bool) {\n        return block.timestamp - lastMintEvent > MINT_PERIOD_DURATION;\n    }\n\n    // ========== MUTATIVE FUNCTIONS ==========\n\n    /**\n     * @notice Record the mint event from Kwenta by incrementing the inflation\n     * week counter for the number of weeks minted (probabaly always 1)\n     * and store the time of the event.\n     * @param supplyMinted the amount of KWENTA the total supply was inflated by.\n     * */\n    function recordMintEvent(uint supplyMinted) internal returns (bool) {\n        uint numberOfWeeksIssued = weeksSinceLastIssuance();\n\n        // add number of weeks minted to weekCounter\n        weekCounter = weekCounter.add(numberOfWeeksIssued);\n\n        // Update mint event to latest week issued (start date + number of weeks issued * seconds in week)\n        // 1 day time buffer is added so inflation is minted after feePeriod closes\n        lastMintEvent = INFLATION_START_DATE.add(weekCounter.mul(MINT_PERIOD_DURATION)).add(MINT_BUFFER);\n\n        emit SupplyMinted(supplyMinted, numberOfWeeksIssued, lastMintEvent, block.timestamp);\n        return true;\n    }\n\n    /**\n     * @notice Mints new inflationary supply weekly\n     * New KWENTA is distributed between the minter, treasury, and StakingRewards contract\n     * */\n    function mint() override external {\n        require(address(stakingRewards) != address(0), \"Staking rewards not set\");\n\n        uint supplyToMint = mintableSupply();\n        require(supplyToMint > 0, \"No supply is mintable\");\n\n        // record minting event before mutation to token supply\n        recordMintEvent(supplyToMint);\n\n        uint amountToDistribute = supplyToMint - minterReward;\n        uint amountToTreasury = amountToDistribute * treasuryDiversion / 10000;\n        uint amountToStakingRewards = amountToDistribute - amountToTreasury;\n\n        kwenta.mint(treasuryDAO, amountToTreasury);\n        kwenta.mint(address(stakingRewards), amountToStakingRewards);\n        stakingRewards.setRewards(amountToStakingRewards);\n        kwenta.mint(msg.sender, minterReward);\n    }\n\n    // ========== SETTERS ========== */\n\n    /**\n     * @notice Set the Kwenta should it ever change.\n     * SupplySchedule requires Kwenta address as it has the authority\n     * to record mint event.\n     * */\n    function setKwenta(IKwenta _kwenta) external onlyOwner {\n        require(address(_kwenta) != address(0), \"Address cannot be 0\");\n        kwenta = _kwenta;\n        emit KwentaUpdated(address(kwenta));\n    }\n\n    /**\n     * @notice Sets the reward amount of KWENTA for the caller of the public\n     * function Kwenta.mint().\n     * This incentivises anyone to mint the inflationary supply and the mintr\n     * Reward will be deducted from the inflationary supply and sent to the caller.\n     * @param amount the amount of KWENTA to reward the minter.\n     * */\n    function setMinterReward(uint amount) external onlyOwner {\n        require(amount <= MAX_MINTER_REWARD, \"Reward cannot exceed max minter reward\");\n        minterReward = amount;\n        emit MinterRewardUpdated(minterReward);\n    }\n\n    function setTreasuryDiversion(uint _treasuryDiversion) override public onlyOwner {\n        require(_treasuryDiversion < 10000, \"Represented in basis points\");\n        treasuryDiversion = _treasuryDiversion;\n        emit TreasuryDiversionUpdated(_treasuryDiversion);\n    }\n\n    function setStakingRewards(address _stakingRewards) override external onlyOwner {\n        stakingRewards = IStakingRewards(_stakingRewards);\n        emit StakingRewardsUpdated(_stakingRewards);\n    }\n\n    // ========== MODIFIERS ==========\n\n    /**\n     * @notice Only the Kwenta contract is authorised to call this function\n     * */\n    modifier onlyKwenta() {\n        require(\n            msg.sender == address(kwenta),\n            \"Only the kwenta contract can perform this action\"\n        );\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n    /**\n     * @notice Emitted when the inflationary supply is minted\n     * */\n    event SupplyMinted(uint supplyMinted, uint numberOfWeeksIssued, uint lastMintEvent, uint timestamp);\n\n    /**\n     * @notice Emitted when the KWENTA minter reward amount is updated\n     * */\n    event MinterRewardUpdated(uint newRewardAmount);\n\n    /**\n     * @notice Emitted when setKwenta is called changing the Kwenta Proxy address\n     * */\n    event KwentaUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when setKwenta is called changing the Kwenta Proxy address\n     * */\n    event TreasuryDiversionUpdated(uint newPercentage);\n\n    /**\n     * @notice Emitted when setKwenta is called changing the Kwenta Proxy address\n     * */\n    event StakingRewardsUpdated(address newAddress);\n}"
    },
    "contracts/utils/Owned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// https://docs.synthetix.io/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n"
    },
    "contracts/interfaces/ISupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.24;\n\ninterface ISupplySchedule {\n    // Views\n    function mintableSupply() external view returns (uint);\n\n    function isMintable() external view returns (bool);\n\n    // Mutative functions\n\n    function mint() external;\n\n    function setTreasuryDiversion(uint _treasuryDiversion) external;\n    \n    function setStakingRewards(address _stakingRewards) external;\n}"
    },
    "contracts/libraries/SafeDecimalMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10**uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y) internal pure returns (uint) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint x,\n        uint y,\n        uint precisionUnit\n    ) private pure returns (uint) {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i) internal pure returns (uint) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i) internal pure returns (uint) {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    // Computes `a - b`, setting the value to 0 if b > a.\n    function floorsub(uint a, uint b) internal pure returns (uint) {\n        return b >= a ? 0 : a - b;\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Libraries\nimport \"./SafeDecimalMath.sol\";\n\n// https://docs.synthetix.io/contracts/source/libraries/math\nlibrary Math {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    /**\n     * @dev Uses \"exponentiation by squaring\" algorithm where cost is 0(logN)\n     * vs 0(N) for naive repeated multiplication.\n     * Calculates x^n with x as fixed-point and n as regular unsigned int.\n     * Calculates to 18 digits of precision with SafeDecimalMath.unit()\n     */\n    function powDecimal(uint x, uint n) internal pure returns (uint) {\n        // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\n\n        uint result = SafeDecimalMath.unit();\n        while (n > 0) {\n            if (n % 2 != 0) {\n                result = result.multiplyDecimal(x);\n            }\n            x = x.multiplyDecimal(x);\n            n /= 2;\n        }\n        return result;\n    }\n}"
    },
    "contracts/interfaces/IKwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IKwenta is IERC20 {\n\n    function mint(address account, uint amount) external;\n\n    function burn(uint amount) external;\n\n    function setSupplySchedule(address _supplySchedule) external;\n\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/RewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n// Inheritance\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\n\n// Libraries\nimport \"./libraries/SafeDecimalMath.sol\";\n\n// Internal references\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IKwenta.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\n\ncontract RewardEscrow is Owned, IRewardEscrow {\n    using SafeDecimalMath for uint;\n\n    IKwenta public immutable kwenta;\n\n    IStakingRewards public stakingRewards;\n    bool private stakingRewardsSet = false;\n\n    mapping(address => mapping(uint256 => VestingEntries.VestingEntry)) public vestingSchedules;\n\n    mapping(address => uint256[]) public accountVestingEntryIDs;\n\n    /*Counter for new vesting entry ids. */\n    uint256 public nextEntryId;\n\n    /* An account's total escrowed KWENTA balance to save recomputing this for fee extraction purposes. */\n    mapping(address => uint256) override public totalEscrowedAccountBalance;\n\n    /* An account's total vested reward KWENTA. */\n    mapping(address => uint256) override public totalVestedAccountBalance;\n\n    /* The total remaining escrowed balance, for verifying the actual KWENTA balance of this contract against. */\n    uint256 public totalEscrowedBalance;\n\n    /* Max escrow duration */\n    uint public constant max_duration = 2 * 52 weeks; // Default max 2 years duration\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _owner, address _kwenta) Owned(_owner) {\n        nextEntryId = 1;\n\n        // set the Kwenta contract address as we need to transfer KWENTA when the user vests\n        kwenta = IKwenta(_kwenta);\n    }\n\n    /* ========== SETTERS ========== */\n\n    /*\n    * @notice Function used to define the StakingRewards to use\n    */\n    function setStakingRewards(address _stakingRewards) public onlyOwner {\n        require(!stakingRewardsSet, \"Staking Rewards already set\");\n        stakingRewardsSet = true;\n        \n        stakingRewards = IStakingRewards(_stakingRewards);\n        emit StakingRewardsSet(address(_stakingRewards));\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice A simple alias to totalEscrowedAccountBalance: provides ERC20 balance integration.\n     */\n    function balanceOf(address account) override public view returns (uint) {\n        return totalEscrowedAccountBalance[account];\n    }\n\n    /**\n     * @notice The number of vesting dates in an account's schedule.\n     */\n    function numVestingEntries(address account) override external view returns (uint) {\n        return accountVestingEntryIDs[account].length;\n    }\n\n    /**\n     * @notice Get a particular schedule entry for an account.\n     * @return endTime the vesting entry object \n     * @return escrowAmount rate per second emission.\n     */\n    function getVestingEntry(address account, uint256 entryID) override external view returns (uint64 endTime, uint256 escrowAmount, uint256 duration) {\n        endTime = vestingSchedules[account][entryID].endTime;\n        escrowAmount = vestingSchedules[account][entryID].escrowAmount;\n        duration = vestingSchedules[account][entryID].duration;\n    }\n\n    function getVestingSchedules(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) override external view returns (VestingEntries.VestingEntryWithID[] memory) {\n        uint256 endIndex = index + pageSize;\n\n        // If index starts after the endIndex return no results\n        if (endIndex <= index) {\n            return new VestingEntries.VestingEntryWithID[](0);\n        }\n\n        // If the page extends past the end of the accountVestingEntryIDs, truncate it.\n        if (endIndex > accountVestingEntryIDs[account].length) {\n            endIndex = accountVestingEntryIDs[account].length;\n        }\n\n        uint256 n = endIndex - index;\n        VestingEntries.VestingEntryWithID[] memory vestingEntries = new VestingEntries.VestingEntryWithID[](n);\n        for (uint256 i; i < n; i++) {\n            uint256 entryID = accountVestingEntryIDs[account][i + index];\n\n            VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryID];\n\n            vestingEntries[i] = VestingEntries.VestingEntryWithID({\n                endTime: uint64(entry.endTime),\n                escrowAmount: entry.escrowAmount,\n                entryID: entryID\n            });\n        }\n        return vestingEntries;\n    }\n\n    function getAccountVestingEntryIDs(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) override external view returns (uint256[] memory) {\n        uint256 endIndex = index + pageSize;\n\n        // If the page extends past the end of the accountVestingEntryIDs, truncate it.\n        if (endIndex > accountVestingEntryIDs[account].length) {\n            endIndex = accountVestingEntryIDs[account].length;\n        }\n        if (endIndex <= index) {\n            return new uint256[](0);\n        }\n\n        uint256 n = endIndex - index;\n        uint256[] memory page = new uint256[](n);\n        for (uint256 i; i < n; i++) {\n            page[i] = accountVestingEntryIDs[account][i + index];\n        }\n        return page;\n    }\n\n    function getVestingQuantity(address account, uint256[] calldata entryIDs) override external view returns (uint total, uint totalFee) {\n        for (uint i = 0; i < entryIDs.length; i++) {\n            VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryIDs[i]];\n\n            /* Skip entry if escrowAmount == 0 */\n            if (entry.escrowAmount != 0) {\n                (uint256 quantity, uint256 fee) = _claimableAmount(entry);\n\n                /* add quantity to total */\n                total += quantity;\n                totalFee += fee;\n            }\n        }\n    }\n\n    function getVestingEntryClaimable(address account, uint256 entryID) override external view returns (uint, uint) {\n        VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryID];\n        return _claimableAmount(entry);\n    }\n\n    function _claimableAmount(VestingEntries.VestingEntry memory _entry) internal view returns (uint256, uint256) {\n        uint256 escrowAmount = _entry.escrowAmount;\n        uint256 quantity;\n        uint256 fee;\n        if (escrowAmount != 0) {\n            /* Full escrow amounts claimable if block.timestamp equal to or after entry endTime */\n            if (block.timestamp >= _entry.endTime) {\n                quantity = escrowAmount;\n            } else {\n                fee = _earlyVestFee(_entry);\n                quantity = escrowAmount - fee;\n            }\n        }\n        return (quantity, fee);\n    }\n\n    function _earlyVestFee(VestingEntries.VestingEntry memory _entry) internal view returns (uint256) {\n        uint timeUntilVest = _entry.endTime - block.timestamp;\n        // Fee starts at 80% and falls linearly\n        uint initialFee = _entry.escrowAmount * 8 / 10;\n        return initialFee * timeUntilVest / _entry.duration;\n    }\n\n    function _isStaked(address _account) internal view returns (bool) {\n        return stakingRewards.escrowedBalanceOf(_account) > 0;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * Vest escrowed amounts that are claimable\n     * Allows users to vest their vesting entries based on msg.sender\n     */\n\n    function vest(uint256[] calldata entryIDs) override external {\n        uint256 total;\n        uint256 totalFee;\n        for (uint i = 0; i < entryIDs.length; i++) {\n            VestingEntries.VestingEntry storage entry = vestingSchedules[msg.sender][entryIDs[i]];\n\n            /* Skip entry if escrowAmount == 0 already vested */\n            if (entry.escrowAmount != 0) {\n                (uint256 quantity, uint256 fee) = _claimableAmount(entry);\n\n                /* update entry to remove escrowAmount */\n                entry.escrowAmount = 0;\n\n                /* add quantity to total */\n                total += quantity;\n                totalFee += fee;\n            }\n        }\n\n        /* Transfer vested tokens. Will revert if total > totalEscrowedAccountBalance */\n        if (total != 0) {\n            // Withdraw staked escrowed kwenta if needed for reward\n            if (_isStaked(msg.sender)) {\n                uint totalWithFee = total + totalFee;\n                uint unstakedEscrow = totalEscrowedAccountBalance[msg.sender] - stakingRewards.escrowedBalanceOf(msg.sender);\n                if (totalWithFee > unstakedEscrow) {\n                    uint amountToUnstake = totalWithFee - unstakedEscrow;\n                    unstakeEscrow(amountToUnstake);\n                }\n            }\n\n            // Burn kwenta if fee\n            if (totalFee != 0) {\n                _reduceAccountEscrowBalances(msg.sender, totalFee);\n                kwenta.burn(totalFee);\n            }\n\n            // Transfer kwenta\n            _transferVestedTokens(msg.sender, total);\n        }\n        \n    }\n\n    /**\n     * @notice Create an escrow entry to lock KWENTA for a given duration in seconds\n     * @dev This call expects that the depositor (msg.sender) has already approved the Reward escrow contract\n     to spend the the amount being escrowed.\n     */\n    function createEscrowEntry(\n        address beneficiary,\n        uint256 deposit,\n        uint256 duration\n    ) override external {\n        require(beneficiary != address(0), \"Cannot create escrow with address(0)\");\n\n        /* Transfer KWENTA from msg.sender */\n        require(IERC20(kwenta).transferFrom(msg.sender, address(this), deposit), \"Token transfer failed\");\n\n        /* Append vesting entry for the beneficiary address */\n        _appendVestingEntry(beneficiary, deposit, duration);\n    }\n\n    /**\n     * @notice Add a new vesting entry at a given time and quantity to an account's schedule.\n     * @dev A call to this should accompany a previous successful call to kwenta.transfer(rewardEscrow, amount),\n     * to ensure that when the funds are withdrawn, there is enough balance.\n     * @param account The account to append a new vesting entry to.\n     * @param quantity The quantity of KWENTA that will be escrowed.\n     * @param duration The duration that KWENTA will be emitted.\n     */\n    function appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) override external onlyStakingRewards {\n        _appendVestingEntry(account, quantity, duration);\n    }\n\n    /**\n     * @notice Stakes escrowed KWENTA.\n     * @dev No tokens are transfered during this process, but the StakingRewards escrowed balance is updated.\n     * @param _amount The amount of escrowed KWENTA to be staked.\n     */\n    function stakeEscrow(uint256 _amount) override external {\n        require(_amount + stakingRewards.escrowedBalanceOf(msg.sender) <= totalEscrowedAccountBalance[msg.sender], \"Insufficient unstaked escrow\");\n        stakingRewards.stakeEscrow(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Unstakes escrowed KWENTA.\n     * @dev No tokens are transfered during this process, but the StakingRewards escrowed balance is updated.\n     * @param _amount The amount of escrowed KWENTA to be unstaked.\n     */\n    function unstakeEscrow(uint256 _amount) override public {\n        stakingRewards.unstakeEscrow(msg.sender, _amount);\n    }\n\n    /* Transfer vested tokens and update totalEscrowedAccountBalance, totalVestedAccountBalance */\n    function _transferVestedTokens(address _account, uint256 _amount) internal {\n        _reduceAccountEscrowBalances(_account, _amount);\n        totalVestedAccountBalance[_account] += _amount;\n        IERC20(address(kwenta)).transfer(_account, _amount);\n        emit Vested(_account, block.timestamp, _amount);\n    }\n\n    function _reduceAccountEscrowBalances(address _account, uint256 _amount) internal {\n        // Reverts if amount being vested is greater than the account's existing totalEscrowedAccountBalance\n        totalEscrowedBalance -= _amount;\n        totalEscrowedAccountBalance[_account] -= _amount;\n    }\n\n    /* ========== INTERNALS ========== */\n\n    function _appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) internal {\n        /* No empty or already-passed vesting entries allowed. */\n        require(quantity != 0, \"Quantity cannot be zero\");\n        require(duration > 0 && duration <= max_duration, \"Cannot escrow with 0 duration OR above max_duration\");\n\n        /* There must be enough balance in the contract to provide for the vesting entry. */\n        totalEscrowedBalance += quantity;\n\n        require(\n            totalEscrowedBalance <= IERC20(address(kwenta)).balanceOf(address(this)),\n            \"Must be enough balance in the contract to provide for the vesting entry\"\n        );\n\n        /* Escrow the tokens for duration. */\n        uint endTime = block.timestamp + duration;\n\n        /* Add quantity to account's escrowed balance */\n        totalEscrowedAccountBalance[account] += quantity;\n\n        uint entryID = nextEntryId;\n        vestingSchedules[account][entryID] = VestingEntries.VestingEntry({endTime: uint64(endTime), escrowAmount: quantity, duration: duration});\n\n        accountVestingEntryIDs[account].push(entryID);\n\n        /* Increment the next entry id. */\n        nextEntryId++;\n\n        emit VestingEntryCreated(account, block.timestamp, quantity, duration, entryID);\n    }\n\n    /* ========== MODIFIERS ========== */\n    modifier onlyStakingRewards() {\n        require(msg.sender == address(stakingRewards), \"Only the StakingRewards can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n    event Vested(address indexed beneficiary, uint time, uint value);\n    event VestingEntryCreated(address indexed beneficiary, uint time, uint value, uint duration, uint entryID);\n    event StakingRewardsSet(address rewardEscrow);\n}\n"
    },
    "contracts/interfaces/IRewardEscrow.sol": {
      "content": "pragma solidity >=0.4.24;\npragma experimental ABIEncoderV2;\n\nlibrary VestingEntries {\n    struct VestingEntry {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 duration;\n    }\n    struct VestingEntryWithID {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 entryID;\n    }\n}\n\ninterface IRewardEscrow {\n    // Views\n    function balanceOf(address account) external view returns (uint);\n\n    function numVestingEntries(address account) external view returns (uint);\n\n    function totalEscrowedAccountBalance(address account) external view returns (uint);\n\n    function totalVestedAccountBalance(address account) external view returns (uint);\n\n    function getVestingQuantity(address account, uint256[] calldata entryIDs) external view returns (uint, uint);\n\n    function getVestingSchedules(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\n\n    function getAccountVestingEntryIDs(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (uint256[] memory);\n\n    function getVestingEntryClaimable(address account, uint256 entryID) external view returns (uint, uint);\n\n    function getVestingEntry(address account, uint256 entryID) external view returns (uint64, uint256, uint256);\n\n    // Mutative functions\n    function vest(uint256[] calldata entryIDs) external;\n\n    function createEscrowEntry(\n        address beneficiary,\n        uint256 deposit,\n        uint256 duration\n    ) external;\n\n    function appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) external;\n\n    function stakeEscrow(uint256 _amount) external;\n\n    function unstakeEscrow(uint256 _amount) external;\n}"
    },
    "contracts/Kwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport './utils/ERC20.sol';\nimport './utils/Owned.sol';\nimport './interfaces/ISupplySchedule.sol';\nimport './interfaces/IKwenta.sol';\n\ncontract Kwenta is ERC20, Owned, IKwenta {\n\n    ISupplySchedule public supplySchedule;\n\n    constructor(\n        string memory name, \n        string memory symbol, \n        uint _initialSupply, \n        address _owner,\n        address _treasuryDAO\n    ) ERC20(name, symbol) Owned(_owner) {\n        // Provide treasury with 100% of the initial supply\n        _mint(_treasuryDAO, _initialSupply);\n    }\n\n    // Mints inflationary supply\n    function mint(address account, uint amount) override external onlySupplySchedule {\n        require(address(supplySchedule) != address(0), \"SupplySchedule not set\");\n        _mint(account, amount);\n    }\n\n    function burn(uint amount) override external {\n        _burn(msg.sender, amount);\n    }\n\n    function setSupplySchedule(address _supplySchedule) override external onlyOwner {\n        supplySchedule = ISupplySchedule(_supplySchedule);\n    }\n\n    modifier onlySupplySchedule() {\n        require(msg.sender == address(supplySchedule), \"Only SupplySchedule can perform this action\");\n        _;\n    }\n\n}"
    },
    "contracts/utils/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    },
    "contracts/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Import necessary contracts for math operations and Token handling\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"./libraries/FixidityLib.sol\";\nimport \"./libraries/ExponentLib.sol\";\nimport \"./libraries/LogarithmLib.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\n// Import SupplySchedule interface for access control of setReward\nimport \"./interfaces/ISupplySchedule.sol\";\n\n// Inheritance\nimport \"./utils/Pausable.sol\";\n// Import RewardEscrow contract for Escrow interactions\nimport \"./RewardEscrow.sol\";\n\n/*\n    StakingRewards contract for Kwenta responsible for:\n    - Staking KWENTA tokens\n    - Withdrawing KWENTA tokens\n    - Updating staker and trader scores\n    - Calculating and notifying rewards\n*/\ncontract StakingRewards is IStakingRewards, ReentrancyGuardUpgradeable, Pausable, UUPSUpgradeable {\n    using FixidityLib for FixidityLib.Fixidity;\n    using ExponentLib for FixidityLib.Fixidity;\n\n    /* ========== STATE VARIABLES ========== */\n\n    FixidityLib.Fixidity private fixidity;\n\n    // Reward Escrow\n    RewardEscrow public rewardEscrow;\n\n    // Supply Schedule\n    ISupplySchedule public supplySchedule;\n\n    // ExchangerProxy\n    address public exchangerProxy;\n\n    // Token to stake and reward\n    IERC20 public stakingToken;\n    // Time handling:\n    // Time where new reward epoch finishes \n    uint256 public periodFinish;\n    uint256 public weeklyStartRewards;\n    // Reward rate per second for next epoch\n    uint256 public rewardRate;\n    uint256 public rewardRateStaking;\n    uint256 public rewardRateTrading;\n    // Last Update Time for staking Rewards\n    uint256 private lastUpdateTime;\n    // Last reward per token staked\n    uint256 private rewardPerTokenStored;\n    uint256 public currentEpoch;\n    \n    // Save the date of the latest interaction for each address (Trading Rewards)\n    mapping(address => uint256) private lastTradeUserEpoch;\n    // Save the rewardPerRewardScore of each epoch for backward reward calculation\n    mapping(uint256 => uint256) private epochRewardPerRewardScore;\n    // Save the latest reward per Token applicable for each address (Staking Rewards)\n    mapping(address => uint256) private userRewardPerTokenPaid;\n    // Rewards due to each account\n    mapping(address => uint256) public rewards;\n\n    // Total RewardsScore\n    uint256 private _totalRewardScore;\n    // Total tokens included in rewards (both staked and escrowed)\n    uint256 private _totalSupply;\n    \n    // Tokens escrowed for each address\n    mapping(address => uint256) private _escrowedBalances;\n    // Fees paid for each address\n    mapping(address => uint256) private _feesPaid;\n    // Save the latest total token to account for rewards (staked + escrowed rewards)\n    mapping(address => uint256) private _totalBalances;\n    // Save the rewardScore per address\n    mapping(address => uint256) private _rewardScores;\n    // Division of rewards between staking and trading\n    uint256 public PERCENTAGE_STAKING;\n    uint256 public PERCENTAGE_TRADING;\n    \n    // Decimals calculations\n    uint256 private constant MAX_BPS = 10_000;\n    uint256 private constant DECIMALS_DIFFERENCE = 1e30;\n    // Constant to return the reward scores with the correct decimal precision\n    uint256 private constant TOKEN_DECIMALS = 1e18;\n    // Needs to be int256 for power library, root to calculate is equal to 0.7\n    int256 public WEIGHT_FEES;\n    // Needs to be int256 for power library, root to calculate is equal to 0.3\n    int256 public WEIGHT_STAKING;\n    // Time constants\n    uint256 private constant DAY = 1 days;\n    uint256 private constant WEEK = 7 days;\n\n    uint256 public constant STAKING_SAFETY_MINIMUM = 1e4;\n    uint256 public constant FEES_PAID_SAFETY_MINIMUM = 1e12;\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n    event RewardsDurationUpdated(uint256 newDuration);\n    event Recovered(address token, uint256 amount);\n    event EscrowStaked(address account, uint256 amount);\n    event EscrowUnstaked(address account, uint256 amount);\n    event RewardEscrowUpdated(address account);\n    event ExchangerProxyUpdated(address account);\n    \n    /* ========== INITIALIZER ========== */\n    \n    function initialize(\n        address _owner,\n        address _stakingToken,\n        address _rewardEscrow,\n        address _supplySchedule,\n        uint256 _weeklyStartRewards\n    ) public initializer {\n        __Pausable_init(_owner);\n\n        __ReentrancyGuard_init();\n\n        periodFinish = 0;\n        rewardRate = 0;\n\n        stakingToken = IERC20(_stakingToken);\n        fixidity.init(18);\n\n        rewardEscrow = RewardEscrow(_rewardEscrow);\n        supplySchedule = ISupplySchedule(_supplySchedule);\n\n        PERCENTAGE_STAKING = 8_000;\n        PERCENTAGE_TRADING = 2_000;\n\n        WEIGHT_STAKING = 3e17;\n        WEIGHT_FEES = 7e17;\n\n        weeklyStartRewards = _weeklyStartRewards;\n    }\n\n    /* ========== VIEWS ========== */\n\n    /*\n     * @notice Getter function for the state variable _totalRewardScore\n     * Divided by 1e18 as during the calculation we are multiplying two 18 decimal numbers, ending up with \n     * a 36 precision number. To avoid losing any precision by scaling it down during internal calculations,\n     * we only scale it down for the getters\n     * @return sum of all rewardScores\n     */\n    function totalRewardScore() override public view returns (uint256) {\n        return _totalRewardScore / TOKEN_DECIMALS;\n    }\n\n    /*\n     * @notice Getter function for the staked balance of an account\n     * @param account address to check token balance of\n     * @return token balance of specified account\n     */\n    function stakedBalanceOf(address account) override public view returns (uint256) {\n        return _totalBalances[account] - _escrowedBalances[account];\n    }\n\n    /*\n     * @notice Getter function for the reward score of an account\n     * Divided by 1e18 as during the calculation we are multiplying two 18 decimal numbers, ending up with \n     * a 36 precision number. To avoid losing any precision by scaling it down during internal calculations,\n     * we only scale it down for the getters\n     * @param account address to check the reward score of\n     * @return reward score of specified account\n     */\n    function rewardScoreOf(address account) override external view returns (uint256) {\n        return _rewardScores[account] / TOKEN_DECIMALS;\n    }\n\n    /*\n     * @notice Getter function for the total balances of an account (staked + escrowed rewards)\n     * @param account address to check the total balance of\n     * @return total balance of specified account\n     */\n    function totalBalanceOf(address account) override external view returns (uint256) {\n        return _totalBalances[account];\n    }\n\n    /*\n     * @notice Getter function for the escrowed balance of an account\n     * @param account address to check the escrowed balance of\n     * @return escrowed balance of specified account\n     */\n    function escrowedBalanceOf(address account) override external view returns (uint256) {\n        return _escrowedBalances[account];\n    }\n\n    /*\n     * @notice Getter function for the reward per reward score of a past epoch\n     * @param id of the week to get the reward\n     * @return reward per reward score of specified week\n     */\n    function rewardPerRewardScoreOfEpoch(uint256 _epoch) override external view returns (uint256) {\n        return epochRewardPerRewardScore[_epoch];\n    }\n\n    /*\n     * @notice Getter function for the total fees paid by an account\n     * @param account address to check the fees balance of\n     * @return fees of specified account\n     */\n    function feesPaidBy(address account) override external view returns (uint256) {\n        return _feesPaid[account];\n    }\n\n    /*\n     * @notice Calculate if we are still in the reward epoch or we reached periodFinish\n     * @return Max date to sum rewards, either now or period finish\n     */\n    function lastTimeRewardApplicable() override public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    /*\n     * @notice Calculate the reward distribution per token based on the time elapsed and current value of totalSupply\n     * @return corresponding reward per token stored\n     */\n    function rewardPerToken() override public view returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored + (\n                (lastTimeRewardApplicable() - lastUpdateTime) * rewardRateStaking * DECIMALS_DIFFERENCE / _totalSupply\n            );\n    }\n\n    /*\n     * @notice Function calculating the rewards earned by an account between the current call moment and the latest change in\n     * reward score. The function divides the reward score by the total amount, accounts for the changes between now and the \n     * last changes (deducting userRewardPerRewardScorePaid) and adds the result to the existing rewards balance of the account\n     * @param account to calculate the earned rewards\n     * @return uint256 containing the total rewards due to account\n     */\n    function earned(address account) override public view returns(uint256) {\n        uint256 stakingRewards = _totalBalances[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) / DECIMALS_DIFFERENCE;\n        uint256 tradingRewards = 0;\n        if (lastTradeUserEpoch[account] < currentEpoch) {\n            tradingRewards = _rewardScores[account] * epochRewardPerRewardScore[lastTradeUserEpoch[account]] / DECIMALS_DIFFERENCE;\n        }\n        return stakingRewards + tradingRewards + rewards[account];\n    }\n\n    /**\n     * @notice Calculate the reward epoch for a specific date, taking into account the day they start\n     * @param _date to calculate the reward epoch for\n     * @return uint256 containing the date of the start of the epoch\n     */\n    function getEpochForDate(uint256 _date) internal view returns(uint256) {\n        _date = (_date / DAY) * DAY;\n        uint256 naturalEpoch = (_date / WEEK) * WEEK;\n\n        if (_date - naturalEpoch >= (7 - weeklyStartRewards) * DAY) {\n            return naturalEpoch + WEEK - weeklyStartRewards * DAY;\n        } else {\n            return naturalEpoch - weeklyStartRewards*DAY;\n        }\n\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Set the % distribution between staking and trading\n     * @dev Only the owner can use this function and parameters should be in base 10_000 (80% = 8_000)\n     * @param _percentageStaking the % of rewards to distribute to staking scores\n     * @param _percentageTrading the % of rewards to distribute to reward scores\n     */\n    function setPercentageRewards(uint256 _percentageStaking, uint256 _percentageTrading) override external onlyOwner {\n        require(_percentageTrading + _percentageStaking == 10_000);\n        PERCENTAGE_STAKING = _percentageStaking;\n        PERCENTAGE_TRADING = _percentageTrading;\n    }\n\n    /**\n     * @notice Set the day of the week the reward epochs start\n     * @dev As UNIX times started on a Thursday (January 1st 1970), shift n days as necessary, e.g. to start\n     * on a Monday go 3 days prior (Wednesday, Tuesday, Monday), the remaining options are:\n     * Friday: 6\n     * Saturday: 5\n     * Sunday: 4 \n     * Monday: 3\n     * Tuesday: 2\n     * Wednesday: 1\n     * Thursday: 0\n     * @param newWeeklyStart the number of days to shift\n     */\n    function setWeeklyStartRewards(uint256 newWeeklyStart) external onlyOwner {\n        require(newWeeklyStart < 7);\n        weeklyStartRewards = newWeeklyStart;\n    }\n\n    /**\n     * @notice If this is the first interaction with the contract in a new Epoch, save the rewardPerRewardScore\n     * in the epochs mapping\n     */\n    function updateRewardEpoch() internal {\n        // Dividing by week to get the last batch of 7 days, as UNIX started in 1970/01/01 (Thursday), we\n        // go back 3 days to start a Monday\n        uint256 newEpoch = getEpochForDate(block.timestamp);\n\n        if(newEpoch > currentEpoch) {\n            // Save rewardRateTrading * WEEK / _totalRewardScore to epoch mapping\n            if(_totalRewardScore > 0 && currentEpoch < getEpochForDate(periodFinish)) {\n                epochRewardPerRewardScore[currentEpoch] = rewardRateTrading * WEEK * DECIMALS_DIFFERENCE / _totalRewardScore;\n            }\n            _totalRewardScore = 0;\n            currentEpoch = newEpoch;\n        }\n\n    }\n\n    /*\n     * @notice Function called by the ExchangerProxy updating the fees paid by each account and the contribution\n     * to the total reward scores\n     * @param _trader: address, for which to update the score\n     * @param _feesPaid: uint256, total fees paid in this period\n     */\n    function updateTraderScore(address _trader, uint256 _newFeesPaid) override external onlyExchangerProxy updateRewards(_trader) {\n        uint256 oldRewardScore = _rewardScores[_trader];\n        if (lastTradeUserEpoch[_trader] < currentEpoch) {\n            _feesPaid[_trader] = _newFeesPaid;\n            lastTradeUserEpoch[_trader] = currentEpoch;\n            oldRewardScore = 0;\n        } else {\n            _feesPaid[_trader] += _newFeesPaid;\n        }\n        updateRewardScore(_trader, oldRewardScore);\n    }\n\n    /*\n     * @notice update the reward score:\n     * - if there hasn´t been a trade in the currentEpoch, return 0\n     * - if there has, update the reward score\n     * @param _account, the user to update the reward score to\n     */\n    function updateRewardScore(address _account, uint256 _oldRewardScore) internal {\n        // Prevent any staking balance change from falling within the danger threshold\n        require(_totalBalances[_account] == 0 || _totalBalances[_account] >= STAKING_SAFETY_MINIMUM, \"STAKING_SAFETY_MINIMUM\");\n        // Prevent any fees paid change from falling witihin the danger threshold\n        require(_feesPaid[_account] == 0 || _feesPaid[_account] >= FEES_PAID_SAFETY_MINIMUM, \"FEES_PAID_SAFETY_MINIMUM\");\n        \n        uint256 newRewardScore = 0;\n        if((lastTradeUserEpoch[_account] == currentEpoch) && (_totalBalances[_account] > 0)) {\n            newRewardScore = uint256(fixidity.power_any(int256(_totalBalances[_account]), WEIGHT_STAKING)) * (uint256(fixidity.power_any(int256(_feesPaid[_account]), WEIGHT_FEES)));\n        }\n\n        if(lastTradeUserEpoch[_account] < currentEpoch) {\n            _oldRewardScore = 0;\n        }\n\n        _rewardScores[_account] = newRewardScore;\n        _totalRewardScore = _totalRewardScore  - _oldRewardScore + newRewardScore;\n\n    }\n\n\n    /*\n     * @notice Function staking the requested tokens by the user.\n     * @param _amount: uint256, containing the number of tokens to stake\n     */\n    function stake(uint256 _amount) override external nonReentrant notPaused updateRewards(msg.sender) {\n        require(_amount > 0);\n        // Update caller balance\n        _totalBalances[msg.sender] += _amount;\n        _totalSupply += _amount;\n        updateRewardScore(msg.sender, _rewardScores[msg.sender]);\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\n        emit Staked(msg.sender, _amount);\n    }\n\n    /*\n     * @notice Function withdrawing the requested tokens by the user.\n     * @param _amount: uint256, containing the number of tokens to stake\n     */\n    function withdraw(uint256 _amount) override public nonReentrant updateRewards(msg.sender) {\n        require(_amount > 0, \"Cannot withdraw 0\");\n        require(stakedBalanceOf(msg.sender) >= _amount);\n        // Update caller balance\n        _totalBalances[msg.sender] -= _amount;\n        _totalSupply -=  _amount;\n        updateRewardScore(msg.sender, _rewardScores[msg.sender]);\n        stakingToken.transfer(msg.sender, _amount);\n        emit Withdrawn(msg.sender, _amount);\n    }\n\n    /*\n     * @notice Function transferring the accumulated rewards for the caller address and updating the state mapping \n     * containing the current rewards\n     */\n    function getReward() override public updateRewards(msg.sender) nonReentrant {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            \n            // Send the rewards to Escrow for 1 year\n            stakingToken.transfer(address(rewardEscrow), reward);\n            rewardEscrow.appendVestingEntry(msg.sender, reward, 52 weeks);\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    /*\n     * @notice Function handling the exit of the protocol of the caller:\n     * - Withdraws all tokens\n     * - Transfers all rewards to caller's address\n     */\n    function exit() override external {\n        withdraw(stakedBalanceOf(msg.sender));\n        getReward();\n    }\n\n    /*\n     * @notice Function called from RewardEscrow to accumulate escrowed tokens into rewards\n     * @param _account: address escrowing the rewards\n     * @param _amount: uint256, amount escrowed\n     */\n    function stakeEscrow(address _account, uint256 _amount) override public onlyRewardEscrow updateRewards(_account) {\n        _totalBalances[_account] +=  _amount;\n        _totalSupply +=  _amount;\n        _escrowedBalances[_account] +=  _amount;\n        updateRewardScore(msg.sender, _rewardScores[msg.sender]);\n        emit EscrowStaked(_account, _amount);\n    }\n\n    /*\n     * @notice Function called from RewardEscrow (vest) to deduct the escrowed tokens and not accumulate rewards\n     * @param _account: address escrowing the rewards\n     * @param _amount: uint256, amount escrowed\n     */\n    function unstakeEscrow(address _account, uint256 _amount) override public nonReentrant onlyRewardEscrow updateRewards(_account) {\n        require(_escrowedBalances[_account] >= _amount);\n        _totalBalances[_account] -= _amount;\n        _totalSupply -= _amount;\n        _escrowedBalances[_account] -= _amount;\n        updateRewardScore(msg.sender, _rewardScores[msg.sender]);\n        emit EscrowUnstaked(_account, _amount);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    /*\n     * @notice Function used to set the rewards for the next epoch\n     * @param reward, total amount to distribute\n     */  \n    function setRewards(uint256 reward) override external onlySupplySchedule updateRewards(address(0)) {\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward / WEEK;\n        } else {\n            uint256 remaining = periodFinish - block.timestamp;\n            // @notice this is previous rewardRate\n            uint256 leftover = remaining * rewardRate;\n            rewardRate = reward + (leftover / WEEK);\n        }\n\n        rewardRateStaking = rewardRate * PERCENTAGE_STAKING / MAX_BPS;\n        rewardRateTrading = rewardRate * PERCENTAGE_TRADING / MAX_BPS;\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp + WEEK;\n        emit RewardAdded(reward);\n    }\n\n    // @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\n        require(tokenAddress != address(stakingToken));\n        IERC20(tokenAddress).transfer(owner, tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n\n    /*\n     * @notice Function available for the owner to change the rewardEscrow contract to use\n     * @param address of the rewardEsxrow contract to use\n     */\n    function setRewardEscrow(address _rewardEscrow) external onlyOwner {\n        require(\n            address(RewardEscrow(_rewardEscrow).kwenta()) == address(stakingToken), \n            \"staking token address not equal to RewardEscrow KWENTA address\"\n        );\n        rewardEscrow = RewardEscrow(_rewardEscrow);\n        emit RewardEscrowUpdated(address(_rewardEscrow));\n    }\n\n    /*\n     * @notice Function available for the owner to change the exchangerProxy contract to use\n     * @param address of the exchanger proxy to use\n     */\n    function setExchangerProxy(address _exchangerProxy) external onlyOwner {\n        exchangerProxy = _exchangerProxy;\n        emit ExchangerProxyUpdated(_exchangerProxy);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    /*\n     * @notice Modifier called each time an event changing the trading score is updated:\n     * - update trader score\n     * - notify reward amount\n     * The modifier saves the state of the reward rate per fee until this point for the specific \n     * address to be able to calculate the marginal contribution to rewards afterwards and adds the accumulated\n     * rewards since the last change to the account rewards\n     * @param address to update rewards to\n     */  \n    modifier updateRewards(address account) {\n        _updateRewards(account);\n        _;\n    }\n\n    /*\n     * @notice internal function used in the modifier with the same name to optimize bytecode\n     */\n    function _updateRewards(address account) internal {\n        // Calculate the reward per unit of reward score applicable to the last stint of account\n        rewardPerTokenStored = rewardPerToken();\n        // Calculate if the epoch is finished or not\n        lastUpdateTime = lastTimeRewardApplicable();\n        updateRewardEpoch();\n        if (account != address(0)) {\n            // Add the rewards added during the last stint\n            rewards[account] = earned(account);\n            // Reset the reward score as we have already paid these trading rewards\n            if (lastTradeUserEpoch[msg.sender] < currentEpoch) {\n                _rewardScores[msg.sender] = 0;\n            }\n            // Reset the reward per token as we have already paid these staking rewards\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n    }\n\n    /*\n     * @notice access control modifier for exchanger proxy\n     */\n    modifier onlyExchangerProxy() {\n        _onlyExchangerProxy();\n        _;\n    }\n\n    /*\n     * @notice internal function used in the modifier with the same name to optimize bytecode\n     */\n    function _onlyExchangerProxy() internal view {\n        bool isEP = msg.sender == address(exchangerProxy);\n\n        require(isEP);\n    }\n\n    /*\n     * @notice access control modifier for rewardEscrow\n     */\n    modifier onlyRewardEscrow() {\n        _onlyRewardEscrow();\n        _;\n    }\n\n    /*\n     * @notice internal function used in the modifier with the same name to optimize bytecode\n     */\n    function _onlyRewardEscrow() internal view {\n        bool isRE = msg.sender == address(rewardEscrow);\n\n        require(isRE);\n    }\n\n    /*\n     * @notice access control modifier for rewardEscrow\n     */\n    modifier onlySupplySchedule() {\n        _onlySupplySchedule();\n        _;\n    }\n\n    /*\n     * @notice internal function used in the modifier with the same name to optimize bytecode\n     */\n    function _onlySupplySchedule() internal view {\n        bool isSS = msg.sender == address(supplySchedule);\n\n        require(isSS);\n    }\n\n    /* ========== PROXY FUNCTIONS ========== */\n    \n    /*\n     * @notice Necessary override for Open Zeppelin UUPS proxy to make sure the owner logic is included\n     */\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\n\n    }\n\n}"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal initializer {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/libraries/FixidityLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary FixidityLib {\n\n    uint8 constant public initial_digits = 36;\n    int256 constant public fixed_e =            2718281828459045235360287471352662498;\n    int256 constant public fixed_pi =           3141592653589793238462643383279502884;\n    int256 constant public fixed_exp_10 =   22026465794806716516957900645284244000000;\n\n    struct Fixidity {\n        uint8 digits;\n        int256 fixed_1;\n        int256 fixed_e;\n        int256 fixed_pi;\n        int256 fixed_exp_10;\n    }\n\n    function init(Fixidity storage fixidity, uint8 digits) public {\n        assert(digits < 36);\n        fixidity.digits = digits;\n        fixidity.fixed_1 = int256(uint256(10) ** uint256(digits));\n        int256 t = int256(uint256(10) ** uint256(initial_digits - digits));\n        fixidity.fixed_e = fixed_e / t;\n        fixidity.fixed_pi = fixed_pi / t;\n        fixidity.fixed_exp_10 = fixed_exp_10 / t;\n    }\n\n    function round(Fixidity storage fixidity, int256 v) public view returns (int256) {\n        return round_off(fixidity, v, fixidity.digits);\n    }\n\n    function floor(Fixidity storage fixidity, int256 v) public view returns (int256) {\n        return (v / fixidity.fixed_1) * fixidity.fixed_1;\n    }\n\n    function multiply(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\n        if(b == fixidity.fixed_1) return a;\n        int256 x1 = a / fixidity.fixed_1;\n        int256 x2 = a - fixidity.fixed_1 * x1;\n        int256 y1 = b / fixidity.fixed_1;\n        int256 y2 = b - fixidity.fixed_1 * y1;\n        return fixidity.fixed_1 * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixidity.fixed_1;\n    }\n\n    function divide(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\n        if(b == fixidity.fixed_1) return a;\n        assert(b != 0);\n        return multiply(fixidity, a, reciprocal(fixidity, b));\n    }\n\n    function add(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\n        int256 t = a + b;\n        assert(t - a == b);\n        return t;\n    }\n\n    function subtract(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\n        int256 t = a - b;\n        assert(t + a == b);\n        return t;\n    }\n\n    function reciprocal(Fixidity storage fixidity, int256 a) public view returns (int256) {\n        return round_off(fixidity, 10 * fixidity.fixed_1 * fixidity.fixed_1 / a, 1) / 10;\n    }\n\n    function round_off(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\n        int256 t = int256(uint256(10) ** uint256(digits));\n        int8 sign = 1;\n        if(v < 0) {\n            sign = -1;\n            v = 0 - v;\n        }\n        if(v % t >= t / 2) v = v + t - v % t;\n        return v * sign;\n    }\n\n    function round_to(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\n        assert(digits < fixidity.digits);\n        return round_off(fixidity, v, fixidity.digits - digits);\n    }\n\n    function trunc_digits(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\n        if(digits <= 0) return v;\n        return round_off(fixidity, v, digits) / int256((10 ** digits));\n    }\n}"
    },
    "contracts/libraries/ExponentLib.sol": {
      "content": "// SPDX-License-Identifier: MIT   \npragma solidity ^0.8.0;\n\nimport \"./FixidityLib.sol\";\nimport \"./LogarithmLib.sol\";\n\nlibrary ExponentLib {\n\n    using FixidityLib for FixidityLib.Fixidity;\n    using LogarithmLib for FixidityLib.Fixidity;\n\n    function power_e(FixidityLib.Fixidity storage fixidity, int256 x) public view returns (int256) {\n        assert(x < 172 * fixidity.fixed_1);\n        int256 r = fixidity.fixed_1;\n        while(x >= 10 * fixidity.fixed_1) {\n            x -= 10 * fixidity.fixed_1;\n            r = fixidity.multiply(r, fixidity.fixed_exp_10);\n        }\n        if(x == fixidity.fixed_1) {\n            return fixidity.multiply(r, fixidity.fixed_e);\n        } else if(x == 0) {\n            return r;\n        }\n        int256 tr = 100 * fixidity.fixed_1;\n        int256 d = tr;\n        for(uint8 i = 1; i <= 2 * fixidity.digits; i++) {\n            d = (d * x) / (fixidity.fixed_1 * int8(i));\n            tr += d;\n        }\n        return fixidity.trunc_digits(fixidity.multiply(tr, r), 2);\n    }\n\n    function power_any(FixidityLib.Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\n        return power_e(fixidity, fixidity.multiply(fixidity.log_e(a), b));\n    }\n\n    function root_any(FixidityLib.Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\n        return power_any(fixidity, a, fixidity.reciprocal(b));\n    }\n\n    function root_n(FixidityLib.Fixidity storage fixidity, int256 a, uint256 n) public view returns (int256) {\n        return power_e(fixidity, fixidity.divide(fixidity.log_e(a), fixidity.fixed_1 * int256(n)));\n    }\n}"
    },
    "contracts/libraries/LogarithmLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./FixidityLib.sol\";\n\nlibrary LogarithmLib {\n\n    using FixidityLib for FixidityLib.Fixidity;\n\n    uint8 constant public longer_digits = 36;\n    int256 constant public longer_fixed_log_e_1_5 =     405465108108164381978013115464349137;    \n    int256 constant public longer_fixed_1 =            1000000000000000000000000000000000000;    \n    int256 constant public longer_fixed_log_e_10 =     2302585092994045684017991454684364208;\n\n    function log_e(FixidityLib.Fixidity storage fixidity, int256 v) public view returns (int256) {\n        assert(v > 0);\n        int256 r = 0;\n        uint8 extra_digits = longer_digits - fixidity.digits;\n        int256 t = int256(uint256(10) ** uint256(extra_digits));\n        while(v <= fixidity.fixed_1 / 10) {\n            v = v * 10;\n            r -= longer_fixed_log_e_10;\n        }\n        while(v >= 10 * fixidity.fixed_1) {\n            v = v / 10;\n            r += longer_fixed_log_e_10;\n        }\n        while(v < fixidity.fixed_1) {\n            v = fixidity.multiply(v, fixidity.fixed_e);\n            r -= longer_fixed_1;\n        }\n        while(v > fixidity.fixed_e) {\n            v = fixidity.divide(v, fixidity.fixed_e);\n            r += longer_fixed_1;\n        }\n        if(v == fixidity.fixed_1) {\n            return FixidityLib.round_off(fixidity, r, extra_digits) / t;\n        }\n        if(v == fixidity.fixed_e) {\n            return fixidity.fixed_1 + FixidityLib.round_off(fixidity, r, extra_digits) / t;\n        }\n        v *= t;\n        v = v - 3 * longer_fixed_1 / 2;\n        r = r + longer_fixed_log_e_1_5;\n        int256 m = longer_fixed_1 * v / (v + 3 * longer_fixed_1);\n        r = r + 2 * m;\n        int256 m_2 = m * m / longer_fixed_1;\n        int256 i = 3;\n        while(true) {\n            m = m * m_2 / longer_fixed_1;\n            r = r + 2 * m / i;\n            i += 2;\n            if(i >= 3 + 2 * int8(fixidity.digits)) break;\n        }\n        return FixidityLib.round_off(fixidity, r, extra_digits) / t;\n    }\n\n    function log_any(FixidityLib.Fixidity storage fixidity, int256 base, int256 v) public view returns (int256) {\n        return fixidity.divide(log_e(fixidity, v), log_e(fixidity, base));\n    }\n}"
    },
    "contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"./OwnedUpgradeable.sol\";\n\n// https://docs.synthetix.io/contracts/source/contracts/pausable\nabstract contract Pausable is OwnedUpgradeable {\n    uint public lastPauseTime;\n    bool public paused;\n\n    function __Pausable_init(address _owner) public initializer {\n        __Owned_init(_owner);\n        require(owner != address(0), \"Owner must be set\");\n    }\n\n    /**\n     * @notice Change the paused state of the contract\n     * @dev Only the contract owner may call this.\n     */\n    function setPaused(bool _paused) external onlyOwner {\n        // Ensure we're actually changing the state before we do anything\n        if (_paused == paused) {\n            return;\n        }\n\n        // Set our paused state.\n        paused = _paused;\n\n        // If applicable, set the last pause time.\n        if (paused) {\n            lastPauseTime = block.timestamp;\n        }\n\n        // Let everyone know that our pause state has changed.\n        emit PauseChanged(paused);\n    }\n\n    event PauseChanged(bool isPaused);\n\n    modifier notPaused {\n        _notPaused();\n        _;\n    }\n\n    function _notPaused() internal view {\n        require(!paused, \"This action cannot be performed while the contract is paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal initializer {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal initializer {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/utils/OwnedUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n// https://docs.synthetix.io/contracts/source/contracts/owned\ncontract OwnedUpgradeable is Initializable {\n    address public owner;\n    address public nominatedOwner;\n\n    function __Owned_init(address _owner) public initializer {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}"
    },
    "contracts/mock/upgradeable/StakingRewardsV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Import necessary contracts for math operations and Token handling\n\nimport \"../../StakingRewards.sol\";\n\n\ncontract StakingRewardsV2 is StakingRewards{\n\n    string private version;\n    \n    function setVersion(string memory _version) public onlyOwner {\n        version = _version;\n    }\n\n    function getVersion() public view returns(string memory){\n        return version;\n    }\n    \n}"
    },
    "contracts/mock/upgradeable/StakingRewardsV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Import necessary contracts for math operations and Token handling\n\nimport \"./StakingRewardsV2.sol\";\n\n\ncontract StakingRewardsV3 is StakingRewardsV2 {\n\n    uint256 private _totalRewardScoreAdded;\n\n    function setTotalRewardScoreAdded() public onlyOwner {\n        _totalRewardScoreAdded =  totalRewardScore() + 2;\n    }\n\n    function getTotalRewardScoreAdded() public view returns(uint256) {\n        return _totalRewardScoreAdded;\n    }\n    \n}"
    },
    "contracts/vKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport './interfaces/IvKwentaRedeemer.sol';\nimport './utils/ERC20.sol';\n\n/// @title A redemption contract for Kwenta\n/// @dev All vKwenta used for redemption is locked within this contract\ncontract vKwentaRedeemer is IvKwentaRedeemer {\n    /// token to be burned\n    address public immutable vToken;\n    /// token to be redeemed\n    address public immutable token;\n\n    event Redeemed(address redeemer, uint256 redeemedAmount);\n\n    constructor(address _vToken, address _token) {\n        vToken = _vToken;\n        token = _token;\n    }\n\n    /// Allows caller to redeem an equivalent amount of token for vToken\n    /// @dev caller must approve this contract to spend vToken\n    /// @notice vToken is locked within this contract prior to transfer of token\n    function redeem() override external {\n        uint vTokenBalance = IERC20(vToken).balanceOf(msg.sender);\n\n        /// ensure valid balance\n        require(vTokenBalance > 0, \"vKwentaRedeemer: No balance to redeem\");\n        require(vTokenBalance <= IERC20(token).balanceOf(address(this)), \n            \"vKwentaRedeemer: Insufficient contract balance\"\n        );\n\n        /// lock vToken in this contract\n        require(\n            IERC20(vToken).transferFrom(msg.sender, address(this), vTokenBalance),\n            \"vKwentaRedeemer: vToken transfer failed\"\n        );\n\n        /// transfer token\n        require(\n            IERC20(token).transfer(msg.sender, vTokenBalance),\n            \"vKwentaRedeemer: token transfer failed\"\n        );\n\n        emit Redeemed(msg.sender, vTokenBalance);\n    }\n}"
    },
    "contracts/interfaces/IvKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IvKwentaRedeemer {\n    \n    function redeem() external;\n\n}"
    },
    "contracts/vKwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport './utils/ERC20.sol';\n\n/// @notice Purpose of this contract was to mint vKwenta for the initial Aelin raise.\n/// @dev This is a one time use contract and supply can never be increased.\ncontract vKwenta is ERC20 {\n    \n    constructor(\n        string memory _name, \n        string memory _symbol, \n        address _beneficiary,\n        uint _amount\n    ) ERC20(_name, _symbol)  {\n        _mint(_beneficiary, _amount);\n    }\n\n}"
    },
    "contracts/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\nimport \"./interfaces/IMerkleDistributor.sol\";\n\ncontract MerkleDistributor is IMerkleDistributor {\n    // escrow for tokens claimed\n    address public immutable override rewardEscrow;\n    \n    address public immutable override token;\n    bytes32 public immutable override merkleRoot;\n\n    // This is a packed array of booleans.\n    mapping(uint256 => uint256) private claimedBitMap;\n\n    constructor(address _token, address _rewardEscrow, bytes32 _merkleRoot) {\n        token = _token;\n        rewardEscrow = _rewardEscrow;\n        merkleRoot = _merkleRoot;\n    }\n\n    function isClaimed(uint256 index) public view override returns (bool) {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    function _setClaimed(uint256 index) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n    }\n\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external override {\n        require(!isClaimed(index), 'MerkleDistributor: Drop already claimed.');\n\n        // Verify the merkle proof.\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), 'MerkleDistributor: Invalid proof.');\n\n        // Mark it claimed and send the token to RewardEscrow\n        _setClaimed(index);\n        IERC20(token).approve(rewardEscrow, amount);\n        IRewardEscrow(rewardEscrow).createEscrowEntry(account, amount, 52 weeks);\n        \n        emit Claimed(index, account, amount);\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "contracts/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMerkleDistributor {\n    // Returns the address of the token distributed by this contract\n    function token() external view returns (address);\n\n    // Returns the address of the RewardEscrow used by this contract\n    function rewardEscrow() external view returns (address);\n\n    // Returns the merkle root of the merkle tree containing account balances available to claim\n    function merkleRoot() external view returns (bytes32);\n\n    // Returns true if the index has been marked claimed\n    function isClaimed(uint256 index) external view returns (bool);\n    \n    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid\n    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\n\n    // This event is triggered whenever a call to #claim succeeds\n    event Claimed(uint256 index, address account, uint256 amount);\n}"
    },
    "contracts/interfaces/IDelegateApprovals.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.24;\n\n// https://docs.synthetix.io/contracts/source/interfaces/idelegateapprovals\ninterface IDelegateApprovals {\n    // Views\n    function canExchangeFor(address authoriser, address delegate) external view returns (bool);\n    // Mutative\n    function approveExchangeOnBehalf(address delegate) external;\n    function removeExchangeOnBehalf(address delegate) external;\n}"
    },
    "contracts/mock/MockStakingRewards.sol": {
      "content": "pragma solidity ^0.8.0;\n\ncontract MockStakingRewards {\n\n    function setRewards(uint256 reward) external {\n        emit RewardAdded(reward);\n    }\n\n    event RewardAdded(uint256 reward);\n\n}\n"
    },
    "contracts-exposed/ExchangerProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ExchangerProxy.sol\";\n\ncontract $ExchangerProxy is ExchangerProxy {\n    constructor(address _addressResolver, address _stakingRewards) ExchangerProxy(_addressResolver, _stakingRewards) {}\n\n    function $addressResolver() external view returns (IAddressResolver) {\n        return addressResolver;\n    }\n\n    function $stakingRewards() external view returns (IStakingRewards) {\n        return stakingRewards;\n    }\n\n    function $synthetix() external view returns (ISynthetix) {\n        return super.synthetix();\n    }\n\n    function $exchanger() external view returns (IExchanger) {\n        return super.exchanger();\n    }\n\n    function $exchangeRates() external view returns (IExchangeRates) {\n        return super.exchangeRates();\n    }\n}\n"
    },
    "contracts-exposed/Kwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/Kwenta.sol\";\n\ncontract $Kwenta is Kwenta {\n    constructor(string memory name, string memory symbol, uint256 _initialSupply, address _owner, address _treasuryDAO) Kwenta(name, symbol, _initialSupply, _owner, _treasuryDAO) {}\n\n    function $_transfer(address sender,address recipient,uint256 amount) external {\n        return super._transfer(sender,recipient,amount);\n    }\n\n    function $_mint(address account,uint256 amount) external {\n        return super._mint(account,amount);\n    }\n\n    function $_burn(address account,uint256 amount) external {\n        return super._burn(account,amount);\n    }\n\n    function $_approve(address owner,address spender,uint256 amount) external {\n        return super._approve(owner,spender,amount);\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 amount) external {\n        return super._beforeTokenTransfer(from,to,amount);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 amount) external {\n        return super._afterTokenTransfer(from,to,amount);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/MerkleDistributor.sol\";\n\ncontract $MerkleDistributor is MerkleDistributor {\n    constructor(address _token, address _rewardEscrow, bytes32 _merkleRoot) MerkleDistributor(_token, _rewardEscrow, _merkleRoot) {}\n}\n"
    },
    "contracts-exposed/RewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/RewardEscrow.sol\";\n\ncontract $RewardEscrow is RewardEscrow {\n    constructor(address _owner, address _kwenta) RewardEscrow(_owner, _kwenta) {}\n\n    function $_claimableAmount(VestingEntries.VestingEntry calldata _entry) external view returns (uint256, uint256) {\n        return super._claimableAmount(_entry);\n    }\n\n    function $_earlyVestFee(VestingEntries.VestingEntry calldata _entry) external view returns (uint256) {\n        return super._earlyVestFee(_entry);\n    }\n\n    function $_isStaked(address _account) external view returns (bool) {\n        return super._isStaked(_account);\n    }\n\n    function $_transferVestedTokens(address _account,uint256 _amount) external {\n        return super._transferVestedTokens(_account,_amount);\n    }\n\n    function $_reduceAccountEscrowBalances(address _account,uint256 _amount) external {\n        return super._reduceAccountEscrowBalances(_account,_amount);\n    }\n\n    function $_appendVestingEntry(address account,uint256 quantity,uint256 duration) external {\n        return super._appendVestingEntry(account,quantity,duration);\n    }\n}\n"
    },
    "contracts-exposed/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/StakingRewards.sol\";\n\ncontract $StakingRewards is StakingRewards {\n    constructor() {}\n\n    function $_IMPLEMENTATION_SLOT() external view returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    function $_ADMIN_SLOT() external view returns (bytes32) {\n        return _ADMIN_SLOT;\n    }\n\n    function $_BEACON_SLOT() external view returns (bytes32) {\n        return _BEACON_SLOT;\n    }\n\n    function $getEpochForDate(uint256 _date) external view returns (uint256) {\n        return super.getEpochForDate(_date);\n    }\n\n    function $updateRewardEpoch() external {\n        return super.updateRewardEpoch();\n    }\n\n    function $updateRewardScore(address _account,uint256 _oldRewardScore) external {\n        return super.updateRewardScore(_account,_oldRewardScore);\n    }\n\n    function $_updateRewards(address account) external {\n        return super._updateRewards(account);\n    }\n\n    function $_onlyExchangerProxy() external view {\n        return super._onlyExchangerProxy();\n    }\n\n    function $_onlyRewardEscrow() external view {\n        return super._onlyRewardEscrow();\n    }\n\n    function $_onlySupplySchedule() external view {\n        return super._onlySupplySchedule();\n    }\n\n    function $_authorizeUpgrade(address newImplementation) external {\n        return super._authorizeUpgrade(newImplementation);\n    }\n\n    function $__UUPSUpgradeable_init() external {\n        return super.__UUPSUpgradeable_init();\n    }\n\n    function $__UUPSUpgradeable_init_unchained() external {\n        return super.__UUPSUpgradeable_init_unchained();\n    }\n\n    function $__ERC1967Upgrade_init() external {\n        return super.__ERC1967Upgrade_init();\n    }\n\n    function $__ERC1967Upgrade_init_unchained() external {\n        return super.__ERC1967Upgrade_init_unchained();\n    }\n\n    function $_getImplementation() external view returns (address) {\n        return super._getImplementation();\n    }\n\n    function $_upgradeTo(address newImplementation) external {\n        return super._upgradeTo(newImplementation);\n    }\n\n    function $_upgradeToAndCall(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCall(newImplementation,data,forceCall);\n    }\n\n    function $_upgradeToAndCallSecure(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCallSecure(newImplementation,data,forceCall);\n    }\n\n    function $_getAdmin() external view returns (address) {\n        return super._getAdmin();\n    }\n\n    function $_changeAdmin(address newAdmin) external {\n        return super._changeAdmin(newAdmin);\n    }\n\n    function $_getBeacon() external view returns (address) {\n        return super._getBeacon();\n    }\n\n    function $_upgradeBeaconToAndCall(address newBeacon,bytes calldata data,bool forceCall) external {\n        return super._upgradeBeaconToAndCall(newBeacon,data,forceCall);\n    }\n\n    function $_notPaused() external view {\n        return super._notPaused();\n    }\n\n    function $__ReentrancyGuard_init() external {\n        return super.__ReentrancyGuard_init();\n    }\n\n    function $__ReentrancyGuard_init_unchained() external {\n        return super.__ReentrancyGuard_init_unchained();\n    }\n}\n"
    },
    "contracts-exposed/SupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/SupplySchedule.sol\";\n\ncontract $SupplySchedule is SupplySchedule {\n    constructor(address _owner, address _treasuryDAO) SupplySchedule(_owner, _treasuryDAO) {}\n\n    function $treasuryDAO() external view returns (address) {\n        return treasuryDAO;\n    }\n\n    function $recordMintEvent(uint256 supplyMinted) external returns (bool) {\n        return super.recordMintEvent(supplyMinted);\n    }\n}\n"
    },
    "contracts-exposed/interfaces/IAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IAddressResolver.sol\";\n\nabstract contract $IAddressResolver is IAddressResolver {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IDelegateApprovals.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IDelegateApprovals.sol\";\n\nabstract contract $IDelegateApprovals is IDelegateApprovals {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IERC20.sol\";\n\nabstract contract $IERC20 is IERC20 {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IERC20Metadata.sol\";\n\nabstract contract $IERC20Metadata is IERC20Metadata {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IExchangeRates.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IExchangeRates.sol\";\n\nabstract contract $IExchangeRates is IExchangeRates {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IExchanger.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IExchanger.sol\";\n\nabstract contract $IExchanger is IExchanger {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IKwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IKwenta.sol\";\n\nabstract contract $IKwenta is IKwenta {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IMerkleDistributor.sol\";\n\nabstract contract $IMerkleDistributor is IMerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IRewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IRewardEscrow.sol\";\n\ncontract $VestingEntries {\n    constructor() {}\n}\n\nabstract contract $IRewardEscrow is IRewardEscrow {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IStakingRewards.sol\";\n\nabstract contract $IStakingRewards is IStakingRewards {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/ISupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/ISupplySchedule.sol\";\n\nabstract contract $ISupplySchedule is ISupplySchedule {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/ISynth.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/ISynth.sol\";\n\nabstract contract $ISynth is ISynth {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/ISynthetix.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/ISynthetix.sol\";\n\nabstract contract $ISynthetix is ISynthetix {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IVirtualSynth.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IVirtualSynth.sol\";\n\nabstract contract $IVirtualSynth is IVirtualSynth {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IvKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IvKwentaRedeemer.sol\";\n\nabstract contract $IvKwentaRedeemer is IvKwentaRedeemer {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/libraries/ExponentLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/libraries/ExponentLib.sol\";\n\ncontract $ExponentLib {\n    FixidityLib.Fixidity[] public $v_FixidityLib_Fixidity;\n\n    constructor() {}\n\n    function $power_e(uint fixidity,int256 x) external view returns (int256) {\n        return ExponentLib.power_e($v_FixidityLib_Fixidity[fixidity],x);\n    }\n\n    function $power_any(uint fixidity,int256 a,int256 b) external view returns (int256) {\n        return ExponentLib.power_any($v_FixidityLib_Fixidity[fixidity],a,b);\n    }\n\n    function $root_any(uint fixidity,int256 a,int256 b) external view returns (int256) {\n        return ExponentLib.root_any($v_FixidityLib_Fixidity[fixidity],a,b);\n    }\n\n    function $root_n(uint fixidity,int256 a,uint256 n) external view returns (int256) {\n        return ExponentLib.root_n($v_FixidityLib_Fixidity[fixidity],a,n);\n    }\n}\n"
    },
    "contracts-exposed/libraries/FixidityLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/libraries/FixidityLib.sol\";\n\ncontract $FixidityLib {\n    FixidityLib.Fixidity[] public $v_FixidityLib_Fixidity;\n\n    constructor() {}\n\n    function $init(uint fixidity,uint8 digits) external {\n        return FixidityLib.init($v_FixidityLib_Fixidity[fixidity],digits);\n    }\n\n    function $round(uint fixidity,int256 v) external view returns (int256) {\n        return FixidityLib.round($v_FixidityLib_Fixidity[fixidity],v);\n    }\n\n    function $floor(uint fixidity,int256 v) external view returns (int256) {\n        return FixidityLib.floor($v_FixidityLib_Fixidity[fixidity],v);\n    }\n\n    function $multiply(uint fixidity,int256 a,int256 b) external view returns (int256) {\n        return FixidityLib.multiply($v_FixidityLib_Fixidity[fixidity],a,b);\n    }\n\n    function $divide(uint fixidity,int256 a,int256 b) external view returns (int256) {\n        return FixidityLib.divide($v_FixidityLib_Fixidity[fixidity],a,b);\n    }\n\n    function $add(uint fixidity,int256 a,int256 b) external view returns (int256) {\n        return FixidityLib.add($v_FixidityLib_Fixidity[fixidity],a,b);\n    }\n\n    function $subtract(uint fixidity,int256 a,int256 b) external view returns (int256) {\n        return FixidityLib.subtract($v_FixidityLib_Fixidity[fixidity],a,b);\n    }\n\n    function $reciprocal(uint fixidity,int256 a) external view returns (int256) {\n        return FixidityLib.reciprocal($v_FixidityLib_Fixidity[fixidity],a);\n    }\n\n    function $round_off(uint fixidity,int256 v,uint8 digits) external view returns (int256) {\n        return FixidityLib.round_off($v_FixidityLib_Fixidity[fixidity],v,digits);\n    }\n\n    function $round_to(uint fixidity,int256 v,uint8 digits) external view returns (int256) {\n        return FixidityLib.round_to($v_FixidityLib_Fixidity[fixidity],v,digits);\n    }\n\n    function $trunc_digits(uint fixidity,int256 v,uint8 digits) external view returns (int256) {\n        return FixidityLib.trunc_digits($v_FixidityLib_Fixidity[fixidity],v,digits);\n    }\n}\n"
    },
    "contracts-exposed/libraries/LogarithmLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/libraries/LogarithmLib.sol\";\n\ncontract $LogarithmLib {\n    FixidityLib.Fixidity[] public $v_FixidityLib_Fixidity;\n\n    constructor() {}\n\n    function $log_e(uint fixidity,int256 v) external view returns (int256) {\n        return LogarithmLib.log_e($v_FixidityLib_Fixidity[fixidity],v);\n    }\n\n    function $log_any(uint fixidity,int256 base,int256 v) external view returns (int256) {\n        return LogarithmLib.log_any($v_FixidityLib_Fixidity[fixidity],base,v);\n    }\n}\n"
    },
    "contracts-exposed/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/libraries/Math.sol\";\n\ncontract $Math {\n    constructor() {}\n\n    function $powDecimal(uint256 x,uint256 n) external pure returns (uint256) {\n        return Math.powDecimal(x,n);\n    }\n}\n"
    },
    "contracts-exposed/mock/MockStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/mock/MockStakingRewards.sol\";\n\ncontract $MockStakingRewards is MockStakingRewards {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/mock/upgradeable/StakingRewardsV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../../contracts/mock/upgradeable/StakingRewardsV2.sol\";\n\ncontract $StakingRewardsV2 is StakingRewardsV2 {\n    constructor() {}\n\n    function $_IMPLEMENTATION_SLOT() external view returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    function $_ADMIN_SLOT() external view returns (bytes32) {\n        return _ADMIN_SLOT;\n    }\n\n    function $_BEACON_SLOT() external view returns (bytes32) {\n        return _BEACON_SLOT;\n    }\n\n    function $getEpochForDate(uint256 _date) external view returns (uint256) {\n        return super.getEpochForDate(_date);\n    }\n\n    function $updateRewardEpoch() external {\n        return super.updateRewardEpoch();\n    }\n\n    function $updateRewardScore(address _account,uint256 _oldRewardScore) external {\n        return super.updateRewardScore(_account,_oldRewardScore);\n    }\n\n    function $_updateRewards(address account) external {\n        return super._updateRewards(account);\n    }\n\n    function $_onlyExchangerProxy() external view {\n        return super._onlyExchangerProxy();\n    }\n\n    function $_onlyRewardEscrow() external view {\n        return super._onlyRewardEscrow();\n    }\n\n    function $_onlySupplySchedule() external view {\n        return super._onlySupplySchedule();\n    }\n\n    function $_authorizeUpgrade(address newImplementation) external {\n        return super._authorizeUpgrade(newImplementation);\n    }\n\n    function $__UUPSUpgradeable_init() external {\n        return super.__UUPSUpgradeable_init();\n    }\n\n    function $__UUPSUpgradeable_init_unchained() external {\n        return super.__UUPSUpgradeable_init_unchained();\n    }\n\n    function $__ERC1967Upgrade_init() external {\n        return super.__ERC1967Upgrade_init();\n    }\n\n    function $__ERC1967Upgrade_init_unchained() external {\n        return super.__ERC1967Upgrade_init_unchained();\n    }\n\n    function $_getImplementation() external view returns (address) {\n        return super._getImplementation();\n    }\n\n    function $_upgradeTo(address newImplementation) external {\n        return super._upgradeTo(newImplementation);\n    }\n\n    function $_upgradeToAndCall(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCall(newImplementation,data,forceCall);\n    }\n\n    function $_upgradeToAndCallSecure(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCallSecure(newImplementation,data,forceCall);\n    }\n\n    function $_getAdmin() external view returns (address) {\n        return super._getAdmin();\n    }\n\n    function $_changeAdmin(address newAdmin) external {\n        return super._changeAdmin(newAdmin);\n    }\n\n    function $_getBeacon() external view returns (address) {\n        return super._getBeacon();\n    }\n\n    function $_upgradeBeaconToAndCall(address newBeacon,bytes calldata data,bool forceCall) external {\n        return super._upgradeBeaconToAndCall(newBeacon,data,forceCall);\n    }\n\n    function $_notPaused() external view {\n        return super._notPaused();\n    }\n\n    function $__ReentrancyGuard_init() external {\n        return super.__ReentrancyGuard_init();\n    }\n\n    function $__ReentrancyGuard_init_unchained() external {\n        return super.__ReentrancyGuard_init_unchained();\n    }\n}\n"
    },
    "contracts-exposed/mock/upgradeable/StakingRewardsV3.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../../contracts/mock/upgradeable/StakingRewardsV3.sol\";\n\ncontract $StakingRewardsV3 is StakingRewardsV3 {\n    constructor() {}\n\n    function $_IMPLEMENTATION_SLOT() external view returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    function $_ADMIN_SLOT() external view returns (bytes32) {\n        return _ADMIN_SLOT;\n    }\n\n    function $_BEACON_SLOT() external view returns (bytes32) {\n        return _BEACON_SLOT;\n    }\n\n    function $getEpochForDate(uint256 _date) external view returns (uint256) {\n        return super.getEpochForDate(_date);\n    }\n\n    function $updateRewardEpoch() external {\n        return super.updateRewardEpoch();\n    }\n\n    function $updateRewardScore(address _account,uint256 _oldRewardScore) external {\n        return super.updateRewardScore(_account,_oldRewardScore);\n    }\n\n    function $_updateRewards(address account) external {\n        return super._updateRewards(account);\n    }\n\n    function $_onlyExchangerProxy() external view {\n        return super._onlyExchangerProxy();\n    }\n\n    function $_onlyRewardEscrow() external view {\n        return super._onlyRewardEscrow();\n    }\n\n    function $_onlySupplySchedule() external view {\n        return super._onlySupplySchedule();\n    }\n\n    function $_authorizeUpgrade(address newImplementation) external {\n        return super._authorizeUpgrade(newImplementation);\n    }\n\n    function $__UUPSUpgradeable_init() external {\n        return super.__UUPSUpgradeable_init();\n    }\n\n    function $__UUPSUpgradeable_init_unchained() external {\n        return super.__UUPSUpgradeable_init_unchained();\n    }\n\n    function $__ERC1967Upgrade_init() external {\n        return super.__ERC1967Upgrade_init();\n    }\n\n    function $__ERC1967Upgrade_init_unchained() external {\n        return super.__ERC1967Upgrade_init_unchained();\n    }\n\n    function $_getImplementation() external view returns (address) {\n        return super._getImplementation();\n    }\n\n    function $_upgradeTo(address newImplementation) external {\n        return super._upgradeTo(newImplementation);\n    }\n\n    function $_upgradeToAndCall(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCall(newImplementation,data,forceCall);\n    }\n\n    function $_upgradeToAndCallSecure(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCallSecure(newImplementation,data,forceCall);\n    }\n\n    function $_getAdmin() external view returns (address) {\n        return super._getAdmin();\n    }\n\n    function $_changeAdmin(address newAdmin) external {\n        return super._changeAdmin(newAdmin);\n    }\n\n    function $_getBeacon() external view returns (address) {\n        return super._getBeacon();\n    }\n\n    function $_upgradeBeaconToAndCall(address newBeacon,bytes calldata data,bool forceCall) external {\n        return super._upgradeBeaconToAndCall(newBeacon,data,forceCall);\n    }\n\n    function $_notPaused() external view {\n        return super._notPaused();\n    }\n\n    function $__ReentrancyGuard_init() external {\n        return super.__ReentrancyGuard_init();\n    }\n\n    function $__ReentrancyGuard_init_unchained() external {\n        return super.__ReentrancyGuard_init_unchained();\n    }\n}\n"
    },
    "contracts-exposed/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/Context.sol\";\n\ncontract $Context is Context {\n    constructor() {}\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/utils/ERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/ERC20.sol\";\n\ncontract $ERC20 is ERC20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\n\n    function $_transfer(address sender,address recipient,uint256 amount) external {\n        return super._transfer(sender,recipient,amount);\n    }\n\n    function $_mint(address account,uint256 amount) external {\n        return super._mint(account,amount);\n    }\n\n    function $_burn(address account,uint256 amount) external {\n        return super._burn(account,amount);\n    }\n\n    function $_approve(address owner,address spender,uint256 amount) external {\n        return super._approve(owner,spender,amount);\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 amount) external {\n        return super._beforeTokenTransfer(from,to,amount);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 amount) external {\n        return super._afterTokenTransfer(from,to,amount);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/utils/Owned.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/Owned.sol\";\n\ncontract $Owned is Owned {\n    constructor(address _owner) Owned(_owner) {}\n}\n"
    },
    "contracts-exposed/utils/OwnedUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/OwnedUpgradeable.sol\";\n\ncontract $OwnedUpgradeable is OwnedUpgradeable {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/Pausable.sol\";\n\ncontract $Pausable is Pausable {\n    constructor() {}\n\n    function $_notPaused() external view {\n        return super._notPaused();\n    }\n}\n"
    },
    "contracts-exposed/vKwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/vKwenta.sol\";\n\ncontract $vKwenta is vKwenta {\n    constructor(string memory _name, string memory _symbol, address _beneficiary, uint256 _amount) vKwenta(_name, _symbol, _beneficiary, _amount) {}\n\n    function $_transfer(address sender,address recipient,uint256 amount) external {\n        return super._transfer(sender,recipient,amount);\n    }\n\n    function $_mint(address account,uint256 amount) external {\n        return super._mint(account,amount);\n    }\n\n    function $_burn(address account,uint256 amount) external {\n        return super._burn(account,amount);\n    }\n\n    function $_approve(address owner,address spender,uint256 amount) external {\n        return super._approve(owner,spender,amount);\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 amount) external {\n        return super._beforeTokenTransfer(from,to,amount);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 amount) external {\n        return super._afterTokenTransfer(from,to,amount);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/vKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/vKwentaRedeemer.sol\";\n\ncontract $vKwentaRedeemer is vKwentaRedeemer {\n    constructor(address _vToken, address _token) vKwentaRedeemer(_vToken, _token) {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}