{
  "address": "0xdBf82cE8F54D62D89c075d297009E49D7d394802",
  "abi": [
    {
      "inputs": [],
      "name": "longer_digits",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "longer_fixed_1",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "longer_fixed_log_e_10",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "longer_fixed_log_e_1_5",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "ee7a47eef76e566acaa3fa51ec176ca2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"longer_digits\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"longer_fixed_1\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"longer_fixed_log_e_10\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"longer_fixed_log_e_1_5\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/LogarithmLib.sol\":\"LogarithmLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/FixidityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary FixidityLib {\\n\\n    uint8 constant public initial_digits = 36;\\n    int256 constant public fixed_e =            2718281828459045235360287471352662498;\\n    int256 constant public fixed_pi =           3141592653589793238462643383279502884;\\n    int256 constant public fixed_exp_10 =   22026465794806716516957900645284244000000;\\n\\n    struct Fixidity {\\n        uint8 digits;\\n        int256 fixed_1;\\n        int256 fixed_e;\\n        int256 fixed_pi;\\n        int256 fixed_exp_10;\\n    }\\n\\n    function init(Fixidity storage fixidity, uint8 digits) public {\\n        assert(digits < 36);\\n        fixidity.digits = digits;\\n        fixidity.fixed_1 = int256(uint256(10) ** uint256(digits));\\n        int256 t = int256(uint256(10) ** uint256(initial_digits - digits));\\n        fixidity.fixed_e = fixed_e / t;\\n        fixidity.fixed_pi = fixed_pi / t;\\n        fixidity.fixed_exp_10 = fixed_exp_10 / t;\\n    }\\n\\n    function round(Fixidity storage fixidity, int256 v) public view returns (int256) {\\n        return round_off(fixidity, v, fixidity.digits);\\n    }\\n\\n    function floor(Fixidity storage fixidity, int256 v) public view returns (int256) {\\n        return (v / fixidity.fixed_1) * fixidity.fixed_1;\\n    }\\n\\n    function multiply(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        if(b == fixidity.fixed_1) return a;\\n        int256 x1 = a / fixidity.fixed_1;\\n        int256 x2 = a - fixidity.fixed_1 * x1;\\n        int256 y1 = b / fixidity.fixed_1;\\n        int256 y2 = b - fixidity.fixed_1 * y1;\\n        return fixidity.fixed_1 * x1 * y1 + x1 * y2 + x2 * y1 + x2 * y2 / fixidity.fixed_1;\\n    }\\n\\n    function divide(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        if(b == fixidity.fixed_1) return a;\\n        assert(b != 0);\\n        return multiply(fixidity, a, reciprocal(fixidity, b));\\n    }\\n\\n    function add(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        int256 t = a + b;\\n        assert(t - a == b);\\n        return t;\\n    }\\n\\n    function subtract(Fixidity storage fixidity, int256 a, int256 b) public view returns (int256) {\\n        int256 t = a - b;\\n        assert(t + a == b);\\n        return t;\\n    }\\n\\n    function reciprocal(Fixidity storage fixidity, int256 a) public view returns (int256) {\\n        return round_off(fixidity, 10 * fixidity.fixed_1 * fixidity.fixed_1 / a, 1) / 10;\\n    }\\n\\n    function round_off(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\\n        int256 t = int256(uint256(10) ** uint256(digits));\\n        int8 sign = 1;\\n        if(v < 0) {\\n            sign = -1;\\n            v = 0 - v;\\n        }\\n        if(v % t >= t / 2) v = v + t - v % t;\\n        return v * sign;\\n    }\\n\\n    function round_to(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\\n        assert(digits < fixidity.digits);\\n        return round_off(fixidity, v, fixidity.digits - digits);\\n    }\\n\\n    function trunc_digits(Fixidity storage fixidity, int256 v, uint8 digits) public view returns (int256) {\\n        if(digits <= 0) return v;\\n        return round_off(fixidity, v, digits) / int256((10 ** digits));\\n    }\\n}\",\"keccak256\":\"0x9a7373b576cea0813fc24387c93fe4caca7e7e8def1f1dba31412610b70ae410\",\"license\":\"MIT\"},\"contracts/libraries/LogarithmLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FixidityLib.sol\\\";\\n\\nlibrary LogarithmLib {\\n\\n    using FixidityLib for FixidityLib.Fixidity;\\n\\n    uint8 constant public longer_digits = 36;\\n    int256 constant public longer_fixed_log_e_1_5 =     405465108108164381978013115464349137;    \\n    int256 constant public longer_fixed_1 =            1000000000000000000000000000000000000;    \\n    int256 constant public longer_fixed_log_e_10 =     2302585092994045684017991454684364208;\\n\\n    function log_e(FixidityLib.Fixidity storage fixidity, int256 v) public view returns (int256) {\\n        assert(v > 0);\\n        int256 r = 0;\\n        uint8 extra_digits = longer_digits - fixidity.digits;\\n        int256 t = int256(uint256(10) ** uint256(extra_digits));\\n        while(v <= fixidity.fixed_1 / 10) {\\n            v = v * 10;\\n            r -= longer_fixed_log_e_10;\\n        }\\n        while(v >= 10 * fixidity.fixed_1) {\\n            v = v / 10;\\n            r += longer_fixed_log_e_10;\\n        }\\n        while(v < fixidity.fixed_1) {\\n            v = fixidity.multiply(v, fixidity.fixed_e);\\n            r -= longer_fixed_1;\\n        }\\n        while(v > fixidity.fixed_e) {\\n            v = fixidity.divide(v, fixidity.fixed_e);\\n            r += longer_fixed_1;\\n        }\\n        if(v == fixidity.fixed_1) {\\n            return FixidityLib.round_off(fixidity, r, extra_digits) / t;\\n        }\\n        if(v == fixidity.fixed_e) {\\n            return fixidity.fixed_1 + FixidityLib.round_off(fixidity, r, extra_digits) / t;\\n        }\\n        v *= t;\\n        v = v - 3 * longer_fixed_1 / 2;\\n        r = r + longer_fixed_log_e_1_5;\\n        int256 m = longer_fixed_1 * v / (v + 3 * longer_fixed_1);\\n        r = r + 2 * m;\\n        int256 m_2 = m * m / longer_fixed_1;\\n        int256 i = 3;\\n        while(true) {\\n            m = m * m_2 / longer_fixed_1;\\n            r = r + 2 * m / i;\\n            i += 2;\\n            if(i >= 3 + 2 * int8(fixidity.digits)) break;\\n        }\\n        return FixidityLib.round_off(fixidity, r, extra_digits) / t;\\n    }\\n\\n    function log_any(FixidityLib.Fixidity storage fixidity, int256 base, int256 v) public view returns (int256) {\\n        return fixidity.divide(log_e(fixidity, v), log_e(fixidity, base));\\n    }\\n}\",\"keccak256\":\"0x5e5f30f2fc574832dde222e69ddf0321732399ef49c1ae45ff88789a69786fe7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6110d9610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80630f7c99fe14610071578063214d4744146100a15780633e089565146100bf57806353ed6b51146100dd578063839eef8f1461010d578063f29e26321461012b575b600080fd5b61008b600480360381019061008691906108a6565b610149565b604051610098919061095e565b60405180910390f35b6100a9610751565b6040516100b6919061095e565b60405180910390f35b6100c7610764565b6040516100d4919061095e565b60405180910390f35b6100f760048036038101906100f291906108e6565b610777565b604051610104919061095e565b60405180910390f35b610115610821565b60405161012291906109e7565b60405180910390f35b610133610826565b604051610140919061095e565b60405180910390f35b600080821361015b5761015a610fd6565b5b6000808460000160009054906101000a900460ff16602461017c9190610f6a565b905060008160ff16600a6101909190610bc8565b90505b600a86600101546101a49190610b0b565b85136101dc57600a856101b79190610ce6565b94506f01bb7635c5de48ef4ce5b7b41cc43db0836101d59190610ed6565b9250610193565b5b8560010154600a6101ee9190610ce6565b851261022657600a856102019190610b0b565b94506f01bb7635c5de48ef4ce5b7b41cc43db08361021f9190610a02565b92506101dd565b5b85600101548512156102e8578573__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e490918789600201546040518463ffffffff1660e01b815260040161027493929190610979565b60206040518083038186803b15801561028c57600080fd5b505af41580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610879565b94506ec097ce7bc90715b34b9f1000000000836102e19190610ed6565b9250610227565b5b85600201548513156103aa578573__$58bf06b23003f263f89da1a87991e621d6$__63ea71c72090918789600201546040518463ffffffff1660e01b815260040161033693929190610979565b60206040518083038186803b15801561034e57600080fd5b505af4158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190610879565b94506ec097ce7bc90715b34b9f1000000000836103a39190610a02565b92506102e9565b8560010154851415610456578073__$58bf06b23003f263f89da1a87991e621d6$__63bc8bde7a8886866040518463ffffffff1660e01b81526004016103f2939291906109b0565b60206040518083038186803b15801561040a57600080fd5b505af415801561041e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104429190610879565b61044c9190610b0b565b935050505061074b565b8560020154851415610511578073__$58bf06b23003f263f89da1a87991e621d6$__63bc8bde7a8886866040518463ffffffff1660e01b815260040161049e939291906109b0565b60206040518083038186803b1580156104b657600080fd5b505af41580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610879565b6104f89190610b0b565b86600101546105079190610a02565b935050505061074b565b808561051d9190610ce6565b945060026ec097ce7bc90715b34b9f1000000000600361053d9190610ce6565b6105479190610b0b565b856105529190610ed6565b94506e4e16f927cdca7f15b39123f740f5d18361056f9190610a02565b925060006ec097ce7bc90715b34b9f1000000000600361058f9190610ce6565b8661059a9190610a02565b866ec097ce7bc90715b34b9f10000000006105b59190610ce6565b6105bf9190610b0b565b90508060026105ce9190610ce6565b846105d99190610a02565b935060006ec097ce7bc90715b34b9f100000000082836105f99190610ce6565b6106039190610b0b565b90506000600390505b6001156106ac576ec097ce7bc90715b34b9f1000000000828461062f9190610ce6565b6106399190610b0b565b9250808360026106499190610ce6565b6106539190610b0b565b8661065e9190610a02565b955060028161066d9190610a02565b90508860000160009054906101000a900460ff16600261068d9190610dfd565b60036106999190610a96565b60000b81126106a7576106ac565b61060c565b8373__$58bf06b23003f263f89da1a87991e621d6$__63bc8bde7a8b89896040518463ffffffff1660e01b81526004016106e8939291906109b0565b60206040518083038186803b15801561070057600080fd5b505af4158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190610879565b6107429190610b0b565b96505050505050505b92915050565b6e4e16f927cdca7f15b39123f740f5d181565b6ec097ce7bc90715b34b9f100000000081565b60008373__$58bf06b23003f263f89da1a87991e621d6$__63ea71c72090916107a08786610149565b6107aa8888610149565b6040518463ffffffff1660e01b81526004016107c893929190610979565b60206040518083038186803b1580156107e057600080fd5b505af41580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190610879565b90509392505050565b602481565b6f01bb7635c5de48ef4ce5b7b41cc43db081565b60008135905061084981611075565b92915050565b60008151905061085e81611075565b92915050565b6000813590506108738161108c565b92915050565b60006020828403121561088f5761088e611063565b5b600061089d8482850161084f565b91505092915050565b600080604083850312156108bd576108bc611063565b5b60006108cb85828601610864565b92505060206108dc8582860161083a565b9150509250929050565b6000806000606084860312156108ff576108fe611063565b5b600061090d86828701610864565b935050602061091e8682870161083a565b925050604061092f8682870161083a565b9150509250925092565b61094281610f9e565b82525050565b8082525050565b61095881610fc9565b82525050565b60006020820190506109736000830184610939565b92915050565b600060608201905061098e6000830186610948565b61099b6020830185610939565b6109a86040830184610939565b949350505050565b60006060820190506109c56000830186610948565b6109d26020830185610939565b6109df604083018461094f565b949350505050565b60006020820190506109fc600083018461094f565b92915050565b6000610a0d82610f9e565b9150610a1883610f9e565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610a5357610a52611005565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610a8b57610a8a611005565b5b828201905092915050565b6000610aa182610fa8565b9150610aac83610fa8565b925081607f03831360008312151615610ac857610ac7611005565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80038312600083121615610b0057610aff611005565b5b828201905092915050565b6000610b1682610f9e565b9150610b2183610f9e565b925082610b3157610b30611034565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610b6a57610b69611005565b5b828205905092915050565b6000808291508390505b6001851115610bbf57808604811115610b9b57610b9a611005565b5b6001851615610baa5780820291505b8081029050610bb885611068565b9450610b7f565b94509492505050565b6000610bd382610fbf565b9150610bde83610fbf565b9250610c0b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610c13565b905092915050565b600082610c235760019050610cdf565b81610c315760009050610cdf565b8160018114610c475760028114610c5157610c80565b6001915050610cdf565b60ff841115610c6357610c62611005565b5b8360020a915084821115610c7a57610c79611005565b5b50610cdf565b5060208310610133831016604e8410600b8410161715610cb55782820a905083811115610cb057610caf611005565b5b610cdf565b610cc28484846001610b75565b92509050818404811115610cd957610cd8611005565b5b81810290505b9392505050565b6000610cf182610f9e565b9150610cfc83610f9e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d3b57610d3a611005565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d7857610d77611005565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610db557610db4611005565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610df257610df1611005565b5b828202905092915050565b6000610e0882610fa8565b9150610e1383610fa8565b925082607f0482116000841360008413161615610e3357610e32611005565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800583126000841260008413161615610e7057610e6f611005565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800582126000841360008412161615610ead57610eac611005565b5b82607f0582126000841260008412161615610ecb57610eca611005565b5b828202905092915050565b6000610ee182610f9e565b9150610eec83610f9e565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610f2757610f26611005565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610f5f57610f5e611005565b5b828203905092915050565b6000610f7582610fc9565b9150610f8083610fc9565b925082821015610f9357610f92611005565b5b828203905092915050565b6000819050919050565b60008160000b9050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b60008160011c9050919050565b61107e81610f9e565b811461108957600080fd5b50565b61109581610fb5565b81146110a057600080fd5b5056fea26469706673582212203de4e9a5b04f81e802129e565f6d991004a39486f5a2de1c75ecb74c8a30eb0164736f6c63430008070033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80630f7c99fe14610071578063214d4744146100a15780633e089565146100bf57806353ed6b51146100dd578063839eef8f1461010d578063f29e26321461012b575b600080fd5b61008b600480360381019061008691906108a6565b610149565b604051610098919061095e565b60405180910390f35b6100a9610751565b6040516100b6919061095e565b60405180910390f35b6100c7610764565b6040516100d4919061095e565b60405180910390f35b6100f760048036038101906100f291906108e6565b610777565b604051610104919061095e565b60405180910390f35b610115610821565b60405161012291906109e7565b60405180910390f35b610133610826565b604051610140919061095e565b60405180910390f35b600080821361015b5761015a610fd6565b5b6000808460000160009054906101000a900460ff16602461017c9190610f6a565b905060008160ff16600a6101909190610bc8565b90505b600a86600101546101a49190610b0b565b85136101dc57600a856101b79190610ce6565b94506f01bb7635c5de48ef4ce5b7b41cc43db0836101d59190610ed6565b9250610193565b5b8560010154600a6101ee9190610ce6565b851261022657600a856102019190610b0b565b94506f01bb7635c5de48ef4ce5b7b41cc43db08361021f9190610a02565b92506101dd565b5b85600101548512156102e8578573__$58bf06b23003f263f89da1a87991e621d6$__6380ff93e490918789600201546040518463ffffffff1660e01b815260040161027493929190610979565b60206040518083038186803b15801561028c57600080fd5b505af41580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c49190610879565b94506ec097ce7bc90715b34b9f1000000000836102e19190610ed6565b9250610227565b5b85600201548513156103aa578573__$58bf06b23003f263f89da1a87991e621d6$__63ea71c72090918789600201546040518463ffffffff1660e01b815260040161033693929190610979565b60206040518083038186803b15801561034e57600080fd5b505af4158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190610879565b94506ec097ce7bc90715b34b9f1000000000836103a39190610a02565b92506102e9565b8560010154851415610456578073__$58bf06b23003f263f89da1a87991e621d6$__63bc8bde7a8886866040518463ffffffff1660e01b81526004016103f2939291906109b0565b60206040518083038186803b15801561040a57600080fd5b505af415801561041e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104429190610879565b61044c9190610b0b565b935050505061074b565b8560020154851415610511578073__$58bf06b23003f263f89da1a87991e621d6$__63bc8bde7a8886866040518463ffffffff1660e01b815260040161049e939291906109b0565b60206040518083038186803b1580156104b657600080fd5b505af41580156104ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ee9190610879565b6104f89190610b0b565b86600101546105079190610a02565b935050505061074b565b808561051d9190610ce6565b945060026ec097ce7bc90715b34b9f1000000000600361053d9190610ce6565b6105479190610b0b565b856105529190610ed6565b94506e4e16f927cdca7f15b39123f740f5d18361056f9190610a02565b925060006ec097ce7bc90715b34b9f1000000000600361058f9190610ce6565b8661059a9190610a02565b866ec097ce7bc90715b34b9f10000000006105b59190610ce6565b6105bf9190610b0b565b90508060026105ce9190610ce6565b846105d99190610a02565b935060006ec097ce7bc90715b34b9f100000000082836105f99190610ce6565b6106039190610b0b565b90506000600390505b6001156106ac576ec097ce7bc90715b34b9f1000000000828461062f9190610ce6565b6106399190610b0b565b9250808360026106499190610ce6565b6106539190610b0b565b8661065e9190610a02565b955060028161066d9190610a02565b90508860000160009054906101000a900460ff16600261068d9190610dfd565b60036106999190610a96565b60000b81126106a7576106ac565b61060c565b8373__$58bf06b23003f263f89da1a87991e621d6$__63bc8bde7a8b89896040518463ffffffff1660e01b81526004016106e8939291906109b0565b60206040518083038186803b15801561070057600080fd5b505af4158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190610879565b6107429190610b0b565b96505050505050505b92915050565b6e4e16f927cdca7f15b39123f740f5d181565b6ec097ce7bc90715b34b9f100000000081565b60008373__$58bf06b23003f263f89da1a87991e621d6$__63ea71c72090916107a08786610149565b6107aa8888610149565b6040518463ffffffff1660e01b81526004016107c893929190610979565b60206040518083038186803b1580156107e057600080fd5b505af41580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190610879565b90509392505050565b602481565b6f01bb7635c5de48ef4ce5b7b41cc43db081565b60008135905061084981611075565b92915050565b60008151905061085e81611075565b92915050565b6000813590506108738161108c565b92915050565b60006020828403121561088f5761088e611063565b5b600061089d8482850161084f565b91505092915050565b600080604083850312156108bd576108bc611063565b5b60006108cb85828601610864565b92505060206108dc8582860161083a565b9150509250929050565b6000806000606084860312156108ff576108fe611063565b5b600061090d86828701610864565b935050602061091e8682870161083a565b925050604061092f8682870161083a565b9150509250925092565b61094281610f9e565b82525050565b8082525050565b61095881610fc9565b82525050565b60006020820190506109736000830184610939565b92915050565b600060608201905061098e6000830186610948565b61099b6020830185610939565b6109a86040830184610939565b949350505050565b60006060820190506109c56000830186610948565b6109d26020830185610939565b6109df604083018461094f565b949350505050565b60006020820190506109fc600083018461094f565b92915050565b6000610a0d82610f9e565b9150610a1883610f9e565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615610a5357610a52611005565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615610a8b57610a8a611005565b5b828201905092915050565b6000610aa182610fa8565b9150610aac83610fa8565b925081607f03831360008312151615610ac857610ac7611005565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80038312600083121615610b0057610aff611005565b5b828201905092915050565b6000610b1682610f9e565b9150610b2183610f9e565b925082610b3157610b30611034565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610b6a57610b69611005565b5b828205905092915050565b6000808291508390505b6001851115610bbf57808604811115610b9b57610b9a611005565b5b6001851615610baa5780820291505b8081029050610bb885611068565b9450610b7f565b94509492505050565b6000610bd382610fbf565b9150610bde83610fbf565b9250610c0b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610c13565b905092915050565b600082610c235760019050610cdf565b81610c315760009050610cdf565b8160018114610c475760028114610c5157610c80565b6001915050610cdf565b60ff841115610c6357610c62611005565b5b8360020a915084821115610c7a57610c79611005565b5b50610cdf565b5060208310610133831016604e8410600b8410161715610cb55782820a905083811115610cb057610caf611005565b5b610cdf565b610cc28484846001610b75565b92509050818404811115610cd957610cd8611005565b5b81810290505b9392505050565b6000610cf182610f9e565b9150610cfc83610f9e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d3b57610d3a611005565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d7857610d77611005565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610db557610db4611005565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610df257610df1611005565b5b828202905092915050565b6000610e0882610fa8565b9150610e1383610fa8565b925082607f0482116000841360008413161615610e3357610e32611005565b5b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800583126000841260008413161615610e7057610e6f611005565b5b827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800582126000841360008412161615610ead57610eac611005565b5b82607f0582126000841260008412161615610ecb57610eca611005565b5b828202905092915050565b6000610ee182610f9e565b9150610eec83610f9e565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615610f2757610f26611005565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615610f5f57610f5e611005565b5b828203905092915050565b6000610f7582610fc9565b9150610f8083610fc9565b925082821015610f9357610f92611005565b5b828203905092915050565b6000819050919050565b60008160000b9050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b60008160011c9050919050565b61107e81610f9e565b811461108957600080fd5b50565b61109581610fb5565b81146110a057600080fd5b5056fea26469706673582212203de4e9a5b04f81e802129e565f6d991004a39486f5a2de1c75ecb74c8a30eb0164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}