{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "contracts-exposed/EscrowDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/EscrowDistributor.sol\";\n\ncontract $EscrowDistributor is EscrowDistributor {\n    constructor(address kwentaAddr, address rewardEscrowAddr) EscrowDistributor(kwentaAddr, rewardEscrowAddr) {}\n}\n"
    },
    "contracts-exposed/EscrowedMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/EscrowedMultipleMerkleDistributor.sol\";\n\ncontract $EscrowedMultipleMerkleDistributor is EscrowedMultipleMerkleDistributor {\n    constructor(address _owner, address _token, address _rewardEscrow) EscrowedMultipleMerkleDistributor(_owner, _token, _rewardEscrow) {}\n}\n"
    },
    "contracts-exposed/EscrowMigrator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/EscrowMigrator.sol\";\n\ncontract $EscrowMigrator is EscrowMigrator {\n    constructor(address _kwenta, address _rewardEscrowV1, address _rewardEscrowV2, address _stakingRewardsV2) EscrowMigrator(_kwenta, _rewardEscrowV1, _rewardEscrowV2, _stakingRewardsV2) {}\n\n    function $_IMPLEMENTATION_SLOT() external view returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    function $_ADMIN_SLOT() external view returns (bytes32) {\n        return _ADMIN_SLOT;\n    }\n\n    function $_BEACON_SLOT() external view returns (bytes32) {\n        return _BEACON_SLOT;\n    }\n\n    function $_registerEntries(address _account,uint256[] calldata _entryIDs) external {\n        return super._registerEntries(_account,_entryIDs);\n    }\n\n    function $_migrateEntries(address _account,address _to,uint256[] calldata _entryIDs) external {\n        return super._migrateEntries(_account,_to,_entryIDs);\n    }\n\n    function $_checkIfMigrationAllowed(address _account) external view {\n        return super._checkIfMigrationAllowed(_account);\n    }\n\n    function $_deadlinePassed(uint256 _initiatedAt) external view returns (bool) {\n        return super._deadlinePassed(_initiatedAt);\n    }\n\n    function $_payForMigration(address _account) external {\n        return super._payForMigration(_account);\n    }\n\n    function $_authorizeUpgrade(address _newImplementation) external {\n        return super._authorizeUpgrade(_newImplementation);\n    }\n\n    function $__UUPSUpgradeable_init() external {\n        return super.__UUPSUpgradeable_init();\n    }\n\n    function $__UUPSUpgradeable_init_unchained() external {\n        return super.__UUPSUpgradeable_init_unchained();\n    }\n\n    function $__ERC1967Upgrade_init() external {\n        return super.__ERC1967Upgrade_init();\n    }\n\n    function $__ERC1967Upgrade_init_unchained() external {\n        return super.__ERC1967Upgrade_init_unchained();\n    }\n\n    function $_getImplementation() external view returns (address) {\n        return super._getImplementation();\n    }\n\n    function $_upgradeTo(address newImplementation) external {\n        return super._upgradeTo(newImplementation);\n    }\n\n    function $_upgradeToAndCall(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCall(newImplementation,data,forceCall);\n    }\n\n    function $_upgradeToAndCallUUPS(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCallUUPS(newImplementation,data,forceCall);\n    }\n\n    function $_getAdmin() external view returns (address) {\n        return super._getAdmin();\n    }\n\n    function $_changeAdmin(address newAdmin) external {\n        return super._changeAdmin(newAdmin);\n    }\n\n    function $_getBeacon() external view returns (address) {\n        return super._getBeacon();\n    }\n\n    function $_upgradeBeaconToAndCall(address newBeacon,bytes calldata data,bool forceCall) external {\n        return super._upgradeBeaconToAndCall(newBeacon,data,forceCall);\n    }\n\n    function $__Pausable_init() external {\n        return super.__Pausable_init();\n    }\n\n    function $__Pausable_init_unchained() external {\n        return super.__Pausable_init_unchained();\n    }\n\n    function $_requireNotPaused() external view {\n        return super._requireNotPaused();\n    }\n\n    function $_requirePaused() external view {\n        return super._requirePaused();\n    }\n\n    function $_pause() external {\n        return super._pause();\n    }\n\n    function $_unpause() external {\n        return super._unpause();\n    }\n\n    function $__Ownable2Step_init() external {\n        return super.__Ownable2Step_init();\n    }\n\n    function $__Ownable2Step_init_unchained() external {\n        return super.__Ownable2Step_init_unchained();\n    }\n\n    function $_transferOwnership(address newOwner) external {\n        return super._transferOwnership(newOwner);\n    }\n\n    function $__Ownable_init() external {\n        return super.__Ownable_init();\n    }\n\n    function $__Ownable_init_unchained() external {\n        return super.__Ownable_init_unchained();\n    }\n\n    function $_checkOwner() external view {\n        return super._checkOwner();\n    }\n\n    function $__Context_init() external {\n        return super.__Context_init();\n    }\n\n    function $__Context_init_unchained() external {\n        return super.__Context_init_unchained();\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    function $_disableInitializers() external {\n        return super._disableInitializers();\n    }\n\n    function $_getInitializedVersion() external view returns (uint8) {\n        return super._getInitializedVersion();\n    }\n\n    function $_isInitializing() external view returns (bool) {\n        return super._isInitializing();\n    }\n}\n"
    },
    "contracts-exposed/interfaces/IControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IControlL2MerkleDistributor.sol\";\n\nabstract contract $IControlL2MerkleDistributor is IControlL2MerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IERC20.sol\";\n\nabstract contract $IERC20 is IERC20 {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IERC20Metadata.sol\";\n\nabstract contract $IERC20Metadata is IERC20Metadata {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IEscrowedMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IEscrowedMultipleMerkleDistributor.sol\";\n\nabstract contract $IEscrowedMultipleMerkleDistributor is IEscrowedMultipleMerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IEscrowMigrator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IEscrowMigrator.sol\";\n\nabstract contract $IEscrowMigrator is IEscrowMigrator {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IKwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IKwenta.sol\";\n\nabstract contract $IKwenta is IKwenta {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IMerkleDistributor.sol\";\n\nabstract contract $IMerkleDistributor is IMerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IMultipleMerkleDistributor.sol\";\n\nabstract contract $IMultipleMerkleDistributor is IMultipleMerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IRewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IRewardEscrow.sol\";\n\ncontract $VestingEntries {\n    constructor() {}\n}\n\nabstract contract $IRewardEscrow is IRewardEscrow {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IRewardEscrowV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IRewardEscrowV2.sol\";\n\nabstract contract $IRewardEscrowV2 is IRewardEscrowV2 {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IStakingRewards.sol\";\n\nabstract contract $IStakingRewards is IStakingRewards {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IStakingRewardsIntegrator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IStakingRewardsIntegrator.sol\";\n\nabstract contract $IStakingRewardsIntegrator is IStakingRewardsIntegrator {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IStakingRewardsNotifier.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IStakingRewardsNotifier.sol\";\n\nabstract contract $IStakingRewardsNotifier is IStakingRewardsNotifier {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IStakingRewardsV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IStakingRewardsV2.sol\";\n\nabstract contract $IStakingRewardsV2 is IStakingRewardsV2 {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/ISupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/ISupplySchedule.sol\";\n\nabstract contract $ISupplySchedule is ISupplySchedule {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/ITokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/ITokenDistributor.sol\";\n\nabstract contract $ITokenDistributor is ITokenDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IvKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IvKwentaRedeemer.sol\";\n\nabstract contract $IvKwentaRedeemer is IvKwentaRedeemer {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/Kwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/Kwenta.sol\";\n\ncontract $Kwenta is Kwenta {\n    constructor(string memory name, string memory symbol, uint256 _initialSupply, address _owner, address _initialHolder) Kwenta(name, symbol, _initialSupply, _owner, _initialHolder) {}\n\n    function $_transfer(address sender,address recipient,uint256 amount) external {\n        return super._transfer(sender,recipient,amount);\n    }\n\n    function $_mint(address account,uint256 amount) external {\n        return super._mint(account,amount);\n    }\n\n    function $_burn(address account,uint256 amount) external {\n        return super._burn(account,amount);\n    }\n\n    function $_approve(address owner,address spender,uint256 amount) external {\n        return super._approve(owner,spender,amount);\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 amount) external {\n        return super._beforeTokenTransfer(from,to,amount);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 amount) external {\n        return super._afterTokenTransfer(from,to,amount);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/libraries/Math.sol\";\n\ncontract $Math {\n    constructor() {}\n\n    function $powDecimal(uint256 x,uint256 n) external pure returns (uint256) {\n        return Math.powDecimal(x,n);\n    }\n}\n"
    },
    "contracts-exposed/misc/BatchClaimer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/misc/BatchClaimer.sol\";\n\ncontract $BatchClaimer is BatchClaimer {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/MultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/MultipleMerkleDistributor.sol\";\n\ncontract $MultipleMerkleDistributor is MultipleMerkleDistributor {\n    constructor(address _owner, address _token) MultipleMerkleDistributor(_owner, _token) {}\n}\n"
    },
    "contracts-exposed/RewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/RewardEscrow.sol\";\n\ncontract $RewardEscrow is RewardEscrow {\n    constructor(address _owner, address _kwenta) RewardEscrow(_owner, _kwenta) {}\n\n    function $_claimableAmount(VestingEntries.VestingEntry calldata _entry) external view returns (uint256, uint256) {\n        return super._claimableAmount(_entry);\n    }\n\n    function $_earlyVestFee(VestingEntries.VestingEntry calldata _entry) external view returns (uint256) {\n        return super._earlyVestFee(_entry);\n    }\n\n    function $_isEscrowStaked(address _account) external view returns (bool) {\n        return super._isEscrowStaked(_account);\n    }\n\n    function $_transferVestedTokens(address _account,uint256 _amount) external {\n        return super._transferVestedTokens(_account,_amount);\n    }\n\n    function $_reduceAccountEscrowBalances(address _account,uint256 _amount) external {\n        return super._reduceAccountEscrowBalances(_account,_amount);\n    }\n\n    function $_appendVestingEntry(address account,uint256 quantity,uint256 duration) external {\n        return super._appendVestingEntry(account,quantity,duration);\n    }\n}\n"
    },
    "contracts-exposed/RewardEscrowV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/RewardEscrowV2.sol\";\n\ncontract $RewardEscrowV2 is RewardEscrowV2 {\n    constructor(address _kwenta, address _rewardsNotifier) RewardEscrowV2(_kwenta, _rewardsNotifier) {}\n\n    function $_IMPLEMENTATION_SLOT() external view returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    function $_ADMIN_SLOT() external view returns (bytes32) {\n        return _ADMIN_SLOT;\n    }\n\n    function $_BEACON_SLOT() external view returns (bytes32) {\n        return _BEACON_SLOT;\n    }\n\n    function $_onlyStakingRewards() external view {\n        return super._onlyStakingRewards();\n    }\n\n    function $_claimableAmount(IRewardEscrowV2.VestingEntry calldata _entry) external view returns (uint256, uint256) {\n        return super._claimableAmount(_entry);\n    }\n\n    function $_earlyVestFee(IRewardEscrowV2.VestingEntry calldata _entry) external view returns (uint256) {\n        return super._earlyVestFee(_entry);\n    }\n\n    function $_transfer(address _from,address _to,uint256 _entryID) external {\n        return super._transfer(_from,_to,_entryID);\n    }\n\n    function $_applyTransferBalanceUpdates(address _from,address _to,uint256 _escrowAmount) external {\n        return super._applyTransferBalanceUpdates(_from,_to,_escrowAmount);\n    }\n\n    function $_checkApproved(uint256 _entryID) external view {\n        return super._checkApproved(_entryID);\n    }\n\n    function $_mint(address _account,uint256 _endTime,uint256 _quantity,uint256 _duration,uint256 _earlyVestingFee) external {\n        return super._mint(_account,_endTime,_quantity,_duration,_earlyVestingFee);\n    }\n\n    function $_unpackVestingEntryStruct(uint256 _entryID) external view returns (IRewardEscrowV2.VestingEntry memory) {\n        return super._unpackVestingEntryStruct(_entryID);\n    }\n\n    function $_authorizeUpgrade(address _newImplementation) external {\n        return super._authorizeUpgrade(_newImplementation);\n    }\n\n    function $__UUPSUpgradeable_init() external {\n        return super.__UUPSUpgradeable_init();\n    }\n\n    function $__UUPSUpgradeable_init_unchained() external {\n        return super.__UUPSUpgradeable_init_unchained();\n    }\n\n    function $__ERC1967Upgrade_init() external {\n        return super.__ERC1967Upgrade_init();\n    }\n\n    function $__ERC1967Upgrade_init_unchained() external {\n        return super.__ERC1967Upgrade_init_unchained();\n    }\n\n    function $_getImplementation() external view returns (address) {\n        return super._getImplementation();\n    }\n\n    function $_upgradeTo(address newImplementation) external {\n        return super._upgradeTo(newImplementation);\n    }\n\n    function $_upgradeToAndCall(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCall(newImplementation,data,forceCall);\n    }\n\n    function $_upgradeToAndCallUUPS(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCallUUPS(newImplementation,data,forceCall);\n    }\n\n    function $_getAdmin() external view returns (address) {\n        return super._getAdmin();\n    }\n\n    function $_changeAdmin(address newAdmin) external {\n        return super._changeAdmin(newAdmin);\n    }\n\n    function $_getBeacon() external view returns (address) {\n        return super._getBeacon();\n    }\n\n    function $_upgradeBeaconToAndCall(address newBeacon,bytes calldata data,bool forceCall) external {\n        return super._upgradeBeaconToAndCall(newBeacon,data,forceCall);\n    }\n\n    function $__Pausable_init() external {\n        return super.__Pausable_init();\n    }\n\n    function $__Pausable_init_unchained() external {\n        return super.__Pausable_init_unchained();\n    }\n\n    function $_requireNotPaused() external view {\n        return super._requireNotPaused();\n    }\n\n    function $_requirePaused() external view {\n        return super._requirePaused();\n    }\n\n    function $_pause() external {\n        return super._pause();\n    }\n\n    function $_unpause() external {\n        return super._unpause();\n    }\n\n    function $__Ownable2Step_init() external {\n        return super.__Ownable2Step_init();\n    }\n\n    function $__Ownable2Step_init_unchained() external {\n        return super.__Ownable2Step_init_unchained();\n    }\n\n    function $_transferOwnership(address newOwner) external {\n        return super._transferOwnership(newOwner);\n    }\n\n    function $__Ownable_init() external {\n        return super.__Ownable_init();\n    }\n\n    function $__Ownable_init_unchained() external {\n        return super.__Ownable_init_unchained();\n    }\n\n    function $_checkOwner() external view {\n        return super._checkOwner();\n    }\n\n    function $__ERC721Enumerable_init() external {\n        return super.__ERC721Enumerable_init();\n    }\n\n    function $__ERC721Enumerable_init_unchained() external {\n        return super.__ERC721Enumerable_init_unchained();\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 firstTokenId,uint256 batchSize) external {\n        return super._beforeTokenTransfer(from,to,firstTokenId,batchSize);\n    }\n\n    function $__ERC721_init(string calldata name_,string calldata symbol_) external {\n        return super.__ERC721_init(name_,symbol_);\n    }\n\n    function $__ERC721_init_unchained(string calldata name_,string calldata symbol_) external {\n        return super.__ERC721_init_unchained(name_,symbol_);\n    }\n\n    function $_baseURI() external view returns (string memory) {\n        return super._baseURI();\n    }\n\n    function $_safeTransfer(address from,address to,uint256 tokenId,bytes calldata data) external {\n        return super._safeTransfer(from,to,tokenId,data);\n    }\n\n    function $_ownerOf(uint256 tokenId) external view returns (address) {\n        return super._ownerOf(tokenId);\n    }\n\n    function $_exists(uint256 tokenId) external view returns (bool) {\n        return super._exists(tokenId);\n    }\n\n    function $_isApprovedOrOwner(address spender,uint256 tokenId) external view returns (bool) {\n        return super._isApprovedOrOwner(spender,tokenId);\n    }\n\n    function $_safeMint(address to,uint256 tokenId) external {\n        return super._safeMint(to,tokenId);\n    }\n\n    function $_safeMint(address to,uint256 tokenId,bytes calldata data) external {\n        return super._safeMint(to,tokenId,data);\n    }\n\n    function $_mint(address to,uint256 tokenId) external {\n        return super._mint(to,tokenId);\n    }\n\n    function $_burn(uint256 tokenId) external {\n        return super._burn(tokenId);\n    }\n\n    function $_approve(address to,uint256 tokenId) external {\n        return super._approve(to,tokenId);\n    }\n\n    function $_setApprovalForAll(address owner,address operator,bool approved) external {\n        return super._setApprovalForAll(owner,operator,approved);\n    }\n\n    function $_requireMinted(uint256 tokenId) external view {\n        return super._requireMinted(tokenId);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 firstTokenId,uint256 batchSize) external {\n        return super._afterTokenTransfer(from,to,firstTokenId,batchSize);\n    }\n\n    function $__unsafe_increaseBalance(address account,uint256 amount) external {\n        return super.__unsafe_increaseBalance(account,amount);\n    }\n\n    function $__ERC165_init() external {\n        return super.__ERC165_init();\n    }\n\n    function $__ERC165_init_unchained() external {\n        return super.__ERC165_init_unchained();\n    }\n\n    function $__Context_init() external {\n        return super.__Context_init();\n    }\n\n    function $__Context_init_unchained() external {\n        return super.__Context_init_unchained();\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    function $_disableInitializers() external {\n        return super._disableInitializers();\n    }\n\n    function $_getInitializedVersion() external view returns (uint8) {\n        return super._getInitializedVersion();\n    }\n\n    function $_isInitializing() external view returns (bool) {\n        return super._isInitializing();\n    }\n}\n"
    },
    "contracts-exposed/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/StakingRewards.sol\";\n\ncontract $StakingRewards is StakingRewards {\n    constructor(address _token, address _rewardEscrow, address _supplySchedule) StakingRewards(_token, _rewardEscrow, _supplySchedule) {}\n\n    function $_requireNotPaused() external view {\n        return super._requireNotPaused();\n    }\n\n    function $_requirePaused() external view {\n        return super._requirePaused();\n    }\n\n    function $_pause() external {\n        return super._pause();\n    }\n\n    function $_unpause() external {\n        return super._unpause();\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/StakingRewardsNotifier.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/StakingRewardsNotifier.sol\";\n\ncontract $StakingRewardsNotifier is StakingRewardsNotifier {\n    constructor(address _contractOwner, address _kwenta, address _supplySchedule) StakingRewardsNotifier(_contractOwner, _kwenta, _supplySchedule) {}\n\n    function $_onlySupplySchedule() external view {\n        return super._onlySupplySchedule();\n    }\n\n    function $_transferOwnership(address newOwner) external {\n        return super._transferOwnership(newOwner);\n    }\n\n    function $_checkOwner() external view {\n        return super._checkOwner();\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/StakingRewardsV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/StakingRewardsV2.sol\";\n\ncontract $StakingRewardsV2 is StakingRewardsV2 {\n    IStakingRewardsV2.Checkpoint[][] public $v_IStakingRewardsV2_Checkpoint_;\n\n    constructor(address _kwenta, address _rewardEscrow, address _rewardsNotifier) StakingRewardsV2(_kwenta, _rewardEscrow, _rewardsNotifier) {}\n\n    function $_IMPLEMENTATION_SLOT() external view returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    function $_ADMIN_SLOT() external view returns (bytes32) {\n        return _ADMIN_SLOT;\n    }\n\n    function $_BEACON_SLOT() external view returns (bytes32) {\n        return _BEACON_SLOT;\n    }\n\n    function $_onlyRewardEscrow() external view {\n        return super._onlyRewardEscrow();\n    }\n\n    function $_onlyRewardsNotifier() external view {\n        return super._onlyRewardsNotifier();\n    }\n\n    function $_afterCooldown(address _account) external view {\n        return super._afterCooldown(_account);\n    }\n\n    function $_stakeEscrow(address _account,uint256 _amount) external {\n        return super._stakeEscrow(_account,_amount);\n    }\n\n    function $_unstakeEscrow(address _account,uint256 _amount) external {\n        return super._unstakeEscrow(_account,_amount);\n    }\n\n    function $_getReward(address _account) external {\n        return super._getReward(_account);\n    }\n\n    function $_getReward(address _account,address _to) external {\n        return super._getReward(_account,_to);\n    }\n\n    function $_compound(address _account) external {\n        return super._compound(_account);\n    }\n\n    function $_updateReward(address _account) external {\n        return super._updateReward(_account);\n    }\n\n    function $_onlyOperator(address _accountOwner) external view {\n        return super._onlyOperator(_accountOwner);\n    }\n\n    function $_checkpointBinarySearch(uint _checkpoints,uint256 _timestamp) external view returns (uint256) {\n        return super._checkpointBinarySearch($v_IStakingRewardsV2_Checkpoint_[_checkpoints],_timestamp);\n    }\n\n    function $_addBalancesCheckpoint(address _account,uint256 _value) external {\n        return super._addBalancesCheckpoint(_account,_value);\n    }\n\n    function $_addEscrowedBalancesCheckpoint(address _account,uint256 _value) external {\n        return super._addEscrowedBalancesCheckpoint(_account,_value);\n    }\n\n    function $_addTotalSupplyCheckpoint(uint256 _value) external {\n        return super._addTotalSupplyCheckpoint(_value);\n    }\n\n    function $_addCheckpoint(uint checkpoints,uint256 _value) external {\n        return super._addCheckpoint($v_IStakingRewardsV2_Checkpoint_[checkpoints],_value);\n    }\n\n    function $_authorizeUpgrade(address _newImplementation) external {\n        return super._authorizeUpgrade(_newImplementation);\n    }\n\n    function $__UUPSUpgradeable_init() external {\n        return super.__UUPSUpgradeable_init();\n    }\n\n    function $__UUPSUpgradeable_init_unchained() external {\n        return super.__UUPSUpgradeable_init_unchained();\n    }\n\n    function $__ERC1967Upgrade_init() external {\n        return super.__ERC1967Upgrade_init();\n    }\n\n    function $__ERC1967Upgrade_init_unchained() external {\n        return super.__ERC1967Upgrade_init_unchained();\n    }\n\n    function $_getImplementation() external view returns (address) {\n        return super._getImplementation();\n    }\n\n    function $_upgradeTo(address newImplementation) external {\n        return super._upgradeTo(newImplementation);\n    }\n\n    function $_upgradeToAndCall(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCall(newImplementation,data,forceCall);\n    }\n\n    function $_upgradeToAndCallUUPS(address newImplementation,bytes calldata data,bool forceCall) external {\n        return super._upgradeToAndCallUUPS(newImplementation,data,forceCall);\n    }\n\n    function $_getAdmin() external view returns (address) {\n        return super._getAdmin();\n    }\n\n    function $_changeAdmin(address newAdmin) external {\n        return super._changeAdmin(newAdmin);\n    }\n\n    function $_getBeacon() external view returns (address) {\n        return super._getBeacon();\n    }\n\n    function $_upgradeBeaconToAndCall(address newBeacon,bytes calldata data,bool forceCall) external {\n        return super._upgradeBeaconToAndCall(newBeacon,data,forceCall);\n    }\n\n    function $__Pausable_init() external {\n        return super.__Pausable_init();\n    }\n\n    function $__Pausable_init_unchained() external {\n        return super.__Pausable_init_unchained();\n    }\n\n    function $_requireNotPaused() external view {\n        return super._requireNotPaused();\n    }\n\n    function $_requirePaused() external view {\n        return super._requirePaused();\n    }\n\n    function $_pause() external {\n        return super._pause();\n    }\n\n    function $_unpause() external {\n        return super._unpause();\n    }\n\n    function $__Ownable2Step_init() external {\n        return super.__Ownable2Step_init();\n    }\n\n    function $__Ownable2Step_init_unchained() external {\n        return super.__Ownable2Step_init_unchained();\n    }\n\n    function $_transferOwnership(address newOwner) external {\n        return super._transferOwnership(newOwner);\n    }\n\n    function $__Ownable_init() external {\n        return super.__Ownable_init();\n    }\n\n    function $__Ownable_init_unchained() external {\n        return super.__Ownable_init_unchained();\n    }\n\n    function $_checkOwner() external view {\n        return super._checkOwner();\n    }\n\n    function $__Context_init() external {\n        return super.__Context_init();\n    }\n\n    function $__Context_init_unchained() external {\n        return super.__Context_init_unchained();\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n\n    function $_disableInitializers() external {\n        return super._disableInitializers();\n    }\n\n    function $_getInitializedVersion() external view returns (uint8) {\n        return super._getInitializedVersion();\n    }\n\n    function $_isInitializing() external view returns (bool) {\n        return super._isInitializing();\n    }\n}\n"
    },
    "contracts-exposed/SupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/SupplySchedule.sol\";\n\ncontract $SupplySchedule is SupplySchedule {\n    constructor(address _owner, address _treasuryDAO) SupplySchedule(_owner, _treasuryDAO) {}\n\n    function $recordMintEvent(uint256 supplyMinted) external returns (bool) {\n        return super.recordMintEvent(supplyMinted);\n    }\n}\n"
    },
    "contracts-exposed/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/Context.sol\";\n\ncontract $Context is Context {\n    constructor() {}\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/utils/ERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/ERC20.sol\";\n\ncontract $ERC20 is ERC20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\n\n    function $_transfer(address sender,address recipient,uint256 amount) external {\n        return super._transfer(sender,recipient,amount);\n    }\n\n    function $_mint(address account,uint256 amount) external {\n        return super._mint(account,amount);\n    }\n\n    function $_burn(address account,uint256 amount) external {\n        return super._burn(account,amount);\n    }\n\n    function $_approve(address owner,address spender,uint256 amount) external {\n        return super._approve(owner,spender,amount);\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 amount) external {\n        return super._beforeTokenTransfer(from,to,amount);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 amount) external {\n        return super._afterTokenTransfer(from,to,amount);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/utils/Owned.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/Owned.sol\";\n\ncontract $Owned is Owned {\n    constructor(address _owner) Owned(_owner) {}\n}\n"
    },
    "contracts-exposed/vKwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/vKwenta.sol\";\n\ncontract $vKwenta is vKwenta {\n    constructor(string memory _name, string memory _symbol, address _beneficiary, uint256 _amount) vKwenta(_name, _symbol, _beneficiary, _amount) {}\n\n    function $_transfer(address sender,address recipient,uint256 amount) external {\n        return super._transfer(sender,recipient,amount);\n    }\n\n    function $_mint(address account,uint256 amount) external {\n        return super._mint(account,amount);\n    }\n\n    function $_burn(address account,uint256 amount) external {\n        return super._burn(account,amount);\n    }\n\n    function $_approve(address owner,address spender,uint256 amount) external {\n        return super._approve(owner,spender,amount);\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 amount) external {\n        return super._beforeTokenTransfer(from,to,amount);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 amount) external {\n        return super._afterTokenTransfer(from,to,amount);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/vKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/vKwentaRedeemer.sol\";\n\ncontract $vKwentaRedeemer is vKwentaRedeemer {\n    constructor(address _vToken, address _token) vKwentaRedeemer(_vToken, _token) {}\n}\n"
    },
    "contracts/EscrowDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./interfaces/IRewardEscrow.sol\";\n\ncontract EscrowDistributor {\n    /// @notice rewards escrow contract\n    IRewardEscrow public immutable rewardEscrow;\n\n    /// @notice kwenta token contract\n    IERC20 public immutable kwenta;\n\n    event BatchEscrowed(\n        uint256 totalAccounts,\n        uint256 totalTokens,\n        uint256 durationWeeks\n    );\n\n    constructor(address kwentaAddr, address rewardEscrowAddr) {\n        kwenta = IERC20(kwentaAddr);\n        rewardEscrow = IRewardEscrow(rewardEscrowAddr);\n    }\n\n    /**\n     * @notice Set escrow amounts in batches.\n     * @dev required to approve this contract address to spend senders tokens before calling\n     * @param accounts: list of accounts to escrow\n     * @param amounts: corresponding list of amounts to escrow\n     * @param durationWeeks: number of weeks to escrow\n     */\n    function distributeEscrowed(\n        address[] calldata accounts,\n        uint256[] calldata amounts,\n        uint256 durationWeeks\n    ) external {\n        require(\n            accounts.length == amounts.length,\n            \"Number of accounts does not match number of values\"\n        );\n\n        uint256 length = accounts.length;\n        uint256 totalTokens;\n        uint256 duration = durationWeeks * 1 weeks;\n\n        do {\n            unchecked {\n                --length;\n            }\n            totalTokens += amounts[length];\n        } while (length != 0);\n\n        kwenta.transferFrom(msg.sender, address(this), totalTokens);\n        kwenta.approve(address(rewardEscrow), totalTokens);\n\n        length = accounts.length;\n\n        do {\n            unchecked {\n                --length;\n            }\n            rewardEscrow.createEscrowEntry(\n                accounts[length],\n                amounts[length],\n                duration\n            );\n        } while (length != 0);\n\n        emit BatchEscrowed({\n            totalAccounts: accounts.length,\n            totalTokens: totalTokens,\n            durationWeeks: duration\n        });\n    }\n}\n"
    },
    "contracts/EscrowedMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./utils/Owned.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IRewardEscrowV2.sol\";\nimport \"./interfaces/IEscrowedMultipleMerkleDistributor.sol\";\n\n/// @title Kwenta EscrowedMultipleMerkleDistributor\n/// @author JaredBorders and JChiaramonte7\n/// @notice Facilitates trading incentives distribution over multiple periods.\ncontract EscrowedMultipleMerkleDistributor is\n    IEscrowedMultipleMerkleDistributor,\n    Owned\n{\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\n    address public immutable override rewardEscrow;\n\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\n    address public immutable override token;\n\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\n    mapping(uint256 => bytes32) public override merkleRoots;\n\n    /// @notice an epoch to packed array of claimed booleans mapping\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMaps;\n\n    /// @notice set addresses for deployed rewardEscrow and KWENTA.\n    /// Establish merkle root for verification\n    /// @param _owner: designated owner of this contract\n    /// @param _token: address of erc20 token to be distributed\n    /// @param _rewardEscrow: address of kwenta escrow for tokens claimed\n    constructor(\n        address _owner,\n        address _token,\n        address _rewardEscrow\n    ) Owned(_owner) {\n        token = _token;\n        rewardEscrow = _rewardEscrow;\n    }\n\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\n    function setMerkleRootForEpoch(\n        bytes32 merkleRoot,\n        uint256 epoch\n    ) external override onlyOwner {\n        merkleRoots[epoch] = merkleRoot;\n        emit MerkleRootModified(epoch);\n    }\n\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\n    function isClaimed(\n        uint256 index,\n        uint256 epoch\n    ) public view override returns (bool) {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMaps[epoch][claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    /// @notice set claimed status for indexed claim to true\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index to check\n    function _setClaimed(uint256 index, uint256 epoch) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMaps[epoch][claimedWordIndex] =\n            claimedBitMaps[epoch][claimedWordIndex] |\n            (1 << claimedBitIndex);\n    }\n\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) public override {\n        require(\n            !isClaimed(index, epoch),\n            \"EscrowedMultipleMerkleDistributor: Drop already claimed.\"\n        );\n\n        // verify the merkle proof\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(\n            MerkleProof.verify(merkleProof, merkleRoots[epoch], node),\n            \"EscrowedMultipleMerkleDistributor: Invalid proof.\"\n        );\n\n        // mark it claimed and send the token to RewardEscrow\n        _setClaimed(index, epoch);\n        IERC20(token).approve(rewardEscrow, amount);\n        IRewardEscrowV2(rewardEscrow).createEscrowEntry(\n            account,\n            amount,\n            IRewardEscrowV2(rewardEscrow).DEFAULT_DURATION(),\n            IRewardEscrowV2(rewardEscrow).DEFAULT_EARLY_VESTING_FEE()\n        );\n\n        emit Claimed(index, account, amount, epoch);\n    }\n\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\n    function claimMultiple(Claims[] calldata claims) external override {\n        uint256 cacheLength = claims.length;\n        for (uint256 i = 0; i < cacheLength; ) {\n            claim(\n                claims[i].index,\n                claims[i].account,\n                claims[i].amount,\n                claims[i].merkleProof,\n                claims[i].epoch\n            );\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/EscrowMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n// Inheritance\nimport {IEscrowMigrator} from \"./interfaces/IEscrowMigrator.sol\";\nimport {Ownable2StepUpgradeable} from\n    \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport {PausableUpgradeable} from\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\n// Internal references\nimport {IKwenta} from \"./interfaces/IKwenta.sol\";\nimport {IRewardEscrowV2} from \"./interfaces/IRewardEscrowV2.sol\";\nimport {IStakingRewardsV2} from \"./interfaces/IStakingRewardsV2.sol\";\nimport {IRewardEscrow} from \"./interfaces/IRewardEscrow.sol\";\nimport {IStakingRewards} from \"./interfaces/IStakingRewards.sol\";\nimport {IStakingRewardsIntegrator} from \"./interfaces/IStakingRewardsIntegrator.sol\";\n\n/*//////////////////////////////////////////////////////////////\n                            WARNING\n//////////////////////////////////////////////////////////////*/\n\n/// @dev WARNING: There is a footgun when using this contract\n/// Once a user is initiated, any entries they vest BEFORE registering, they will have to pay extra for\n/// Once again:\n/// If a user vests an entry after initiating without registering it first, they will have to pay extra for it\n\n/*//////////////////////////////////////////////////////////////\n                        ESCROW MIGRATOR\n//////////////////////////////////////////////////////////////*/\n\n/// @title KWENTA Escrow Migrator\n/// Used to migrate escrow entries from RewardEscrowV1 to RewardEscrowV2\n/// @author tommyrharper (tom@zkconsulting.xyz)\ncontract EscrowMigrator is\n    IEscrowMigrator,\n    Ownable2StepUpgradeable,\n    PausableUpgradeable,\n    UUPSUpgradeable\n{\n    /*///////////////////////////////////////////////////////////////\n                        CONSTANTS/IMMUTABLES\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IEscrowMigrator\n    uint256 public constant MIGRATION_DEADLINE = 2 weeks;\n\n    /// @notice Contract for KWENTA ERC20 token\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IKwenta public immutable kwenta;\n\n    /// @notice Contract for RewardEscrowV1\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IRewardEscrow public immutable rewardEscrowV1;\n\n    /// @notice Contract for RewardEscrowV2\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IRewardEscrowV2 public immutable rewardEscrowV2;\n\n    /// @notice Contract for StakingRewardsV2\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IStakingRewardsV2 public immutable stakingRewardsV2;\n\n    /*//////////////////////////////////////////////////////////////\n                                 STATE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Address of the treasury DAO\n    address public treasuryDAO;\n\n    /// @notice Total amount of escrow registered\n    uint256 public totalRegistered;\n\n    /// @notice Total amount of escrow migrated\n    uint256 public totalMigrated;\n\n    /// @notice Total amount of escrow locked due to migration deadline\n    uint256 public totalLocked;\n\n    /// @notice Mapping of acount to entryID to registered vesting entry data\n    mapping(address => mapping(uint256 => VestingEntry)) public registeredVestingSchedules;\n\n    /// @notice Mapping of initialization time for each account\n    mapping(address => uint256) public initializationTime;\n\n    /// @notice Mapping of whether an account's funds are locked due to migration deadline\n    mapping(address => bool) public lockedFundsAccountedFor;\n\n    /// @notice Mapping of escrow already vested at start for each account\n    mapping(address => uint256) public escrowVestedAtStart;\n\n    /// @notice Mapping of $KWENTA paid so far for the migration for each account\n    mapping(address => uint256) public paidSoFar;\n\n    /// @notice Mapping of registered entry IDs for each account\n    mapping(address => uint256[]) public registeredEntryIDs;\n\n    /*///////////////////////////////////////////////////////////////\n                        CONSTRUCTOR / INITIALIZER\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev disable default constructor for disable implementation contract\n    /// Actual contract construction will take place in the initialize function via proxy\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    /// @param _kwenta The address for the KWENTA ERC20 token\n    /// @param _rewardEscrowV1 The address for the RewardEscrowV1 contract\n    /// @param _rewardEscrowV2 The address for the RewardEscrowV2 contract\n    /// @param _stakingRewardsV2 The address for the StakingRewardsV2 contract\n    constructor(\n        address _kwenta,\n        address _rewardEscrowV1,\n        address _rewardEscrowV2,\n        address _stakingRewardsV2\n    ) {\n        if (_kwenta == address(0)) revert ZeroAddress();\n        if (_rewardEscrowV1 == address(0)) revert ZeroAddress();\n        if (_rewardEscrowV2 == address(0)) revert ZeroAddress();\n        if (_stakingRewardsV2 == address(0)) revert ZeroAddress();\n\n        kwenta = IKwenta(_kwenta);\n        rewardEscrowV1 = IRewardEscrow(_rewardEscrowV1);\n        rewardEscrowV2 = IRewardEscrowV2(_rewardEscrowV2);\n        stakingRewardsV2 = IStakingRewardsV2(_stakingRewardsV2);\n\n        _disableInitializers();\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    function initialize(address _contractOwner, address _treasuryDAO) external initializer {\n        if (_contractOwner == address(0) || _treasuryDAO == address(0)) revert ZeroAddress();\n\n        // Initialize inherited contracts\n        __Ownable2Step_init();\n        __Pausable_init();\n        __UUPSUpgradeable_init();\n\n        // transfer ownership\n        _transferOwnership(_contractOwner);\n\n        // set treasuryDAO\n        treasuryDAO = _treasuryDAO;\n\n        /// @dev Start contract as paused so that users cannot begin migrating funds before\n        /// rewardEscrowV1.setTreasuryDAO(escrowMigrator) and rewardEscrowV2.setEscrowMigrator(escrowMigrator)\n        /// are called, as this could lead to expected early vest fees not being sent to the escrow migrator.\n        /// Once these functions are called, then the escrow migrator can be unpaused.\n        _pause();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                 VIEWS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IEscrowMigrator\n    function numberOfRegisteredEntries(address _account) public view returns (uint256) {\n        return registeredEntryIDs[_account].length;\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    /// @dev WARNING: this loop is potentially limitless - could revert with out of gas error if called on-chain\n    function numberOfMigratedEntries(address _account) external view returns (uint256 total) {\n        uint256[] storage entries = registeredEntryIDs[_account];\n        uint256 length = entries.length;\n\n        mapping(uint256 => VestingEntry) storage userEntries = registeredVestingSchedules[_account];\n        for (uint256 i = 0; i < length;) {\n            uint256 entryID = entries[i];\n            VestingEntry storage entry = userEntries[entryID];\n            if (entry.migrated) total++;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    /// @dev WARNING: this loop is potentially limitless - could revert with out of gas error if called on-chain\n    function totalEscrowRegistered(address _account) public view returns (uint256 total) {\n        uint256[] storage entries = registeredEntryIDs[_account];\n        uint256 length = entries.length;\n\n        mapping(uint256 => VestingEntry) storage userEntries = registeredVestingSchedules[_account];\n        for (uint256 i = 0; i < length;) {\n            uint256 entryID = entries[i];\n            VestingEntry storage entry = userEntries[entryID];\n            total += uint256(entry.escrowAmount);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    /// @dev WARNING: this loop is potentially limitless - could revert with out of gas error if called on-chain\n    function totalEscrowMigrated(address _account) public view returns (uint256 total) {\n        uint256[] storage entries = registeredEntryIDs[_account];\n        uint256 length = entries.length;\n\n        mapping(uint256 => VestingEntry) storage userEntries = registeredVestingSchedules[_account];\n        for (uint256 i = 0; i < length;) {\n            uint256 entryID = entries[i];\n            VestingEntry storage entry = userEntries[entryID];\n            if (entry.migrated) total += uint256(entry.escrowAmount);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    /// @dev WARNING: this loop is potentially limitless - could revert with out of gas error if called on-chain\n    function totalEscrowUnmigrated(address _account) public view returns (uint256 total) {\n        uint256[] storage entries = registeredEntryIDs[_account];\n        uint256 length = entries.length;\n\n        mapping(uint256 => VestingEntry) storage userEntries = registeredVestingSchedules[_account];\n        for (uint256 i = 0; i < length;) {\n            uint256 entryID = entries[i];\n            VestingEntry storage entry = userEntries[entryID];\n            if (!entry.migrated) total += uint256(entry.escrowAmount);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    function toPay(address _account) public view returns (uint256) {\n        uint256 totalPaymentRequired =\n            rewardEscrowV1.totalVestedAccountBalance(_account) - escrowVestedAtStart[_account];\n        return totalPaymentRequired - paidSoFar[_account];\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    function getRegisteredVestingEntry(address _account, uint256 _entryID)\n        external\n        view\n        returns (uint256 escrowAmount, bool migrated)\n    {\n        VestingEntry storage entry = registeredVestingSchedules[_account][_entryID];\n        escrowAmount = entry.escrowAmount;\n        migrated = entry.migrated;\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    function getRegisteredVestingSchedules(address _account, uint256 _index, uint256 _pageSize)\n        external\n        view\n        returns (VestingEntryWithID[] memory)\n    {\n        if (_pageSize == 0) {\n            return new VestingEntryWithID[](0);\n        }\n\n        uint256 endIndex = _index + _pageSize;\n\n        // If the page extends past the end of the list, truncate it.\n        uint256 numEntries = numberOfRegisteredEntries(_account);\n        if (endIndex > numEntries) {\n            endIndex = numEntries;\n        }\n\n        if (endIndex <= _index) return new VestingEntryWithID[](0);\n\n        uint256 n;\n        unchecked {\n            n = endIndex - _index;\n        }\n\n        mapping(uint256 => VestingEntry) storage userEntries = registeredVestingSchedules[_account];\n        uint256[] storage entryIDs = registeredEntryIDs[_account];\n\n        VestingEntryWithID[] memory vestingEntries = new VestingEntryWithID[](n);\n        for (uint256 i; i < n;) {\n            uint256 entryID;\n            unchecked {\n                entryID = entryIDs[i + _index];\n            }\n\n            VestingEntry storage entry = userEntries[entryID];\n\n            vestingEntries[i] = VestingEntryWithID({\n                entryID: entryID,\n                escrowAmount: entry.escrowAmount,\n                migrated: entry.migrated\n            });\n\n            unchecked {\n                ++i;\n            }\n        }\n        return vestingEntries;\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    function getRegisteredVestingEntryIDs(address _account, uint256 _index, uint256 _pageSize)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        uint256 endIndex = _index + _pageSize;\n\n        // If the page extends past the end of the list, truncate it.\n        uint256 numEntries = numberOfRegisteredEntries(_account);\n        if (endIndex > numEntries) {\n            endIndex = numEntries;\n        }\n        if (endIndex <= _index) {\n            return new uint256[](0);\n        }\n\n        uint256[] storage entryIDs = registeredEntryIDs[_account];\n\n        uint256 n = endIndex - _index;\n        uint256[] memory page = new uint256[](n);\n        for (uint256 i; i < n;) {\n            unchecked {\n                page[i] = entryIDs[i + _index];\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        return page;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                 STEP 0\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice claim any remaining StakingRewards V1 rewards\n    /// This must be done before the migration process can begin\n\n    /*//////////////////////////////////////////////////////////////\n                                 STEP 1\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IEscrowMigrator\n    function registerEntries(uint256[] calldata _entryIDs) external {\n        _registerEntries(msg.sender, _entryIDs);\n    }\n\n    function _registerEntries(address _account, uint256[] calldata _entryIDs)\n        internal\n        whenNotPaused\n    {\n        uint256 initializedAt = initializationTime[_account];\n        if (initializedAt == 0) {\n            if (rewardEscrowV1.balanceOf(_account) == 0) revert NoEscrowBalanceToMigrate();\n\n            initializationTime[_account] = block.timestamp;\n            escrowVestedAtStart[_account] = rewardEscrowV1.totalVestedAccountBalance(_account);\n        } else if (_deadlinePassed(initializedAt)) {\n            revert DeadlinePassed();\n        }\n\n        uint256[] storage userEntryIDs = registeredEntryIDs[_account];\n        mapping(uint256 => VestingEntry) storage userEntries = registeredVestingSchedules[_account];\n\n        uint256 registeredEscrow;\n        for (uint256 i = 0; i < _entryIDs.length; i++) {\n            uint256 entryID = _entryIDs[i];\n\n            // skip if already registered\n            if (userEntries[entryID].escrowAmount != 0) continue;\n\n            (, uint256 escrowAmount,) = rewardEscrowV1.getVestingEntry(_account, entryID);\n\n            // skip if entry is already vested or does not exist\n            if (escrowAmount == 0) continue;\n\n            userEntries[entryID] =\n                VestingEntry({escrowAmount: uint248(escrowAmount), migrated: false});\n\n            userEntryIDs.push(entryID);\n            registeredEscrow += escrowAmount;\n        }\n\n        totalRegistered += registeredEscrow;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                 STEP 2\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The user must vest any registered entries and approve this contract to spend `toPay` amount of liquid $KWENTA\n    /// before proceeding to step 3\n    /// @notice The user MUST NOT vest any non-registered entries at this point (or they will have to pay extra)\n\n    /*//////////////////////////////////////////////////////////////\n                                 STEP 3\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IEscrowMigrator\n    function migrateEntries(address _to, uint256[] calldata _entryIDs) external {\n        _migrateEntries(msg.sender, _to, _entryIDs);\n    }\n\n    function _migrateEntries(address _account, address _to, uint256[] calldata _entryIDs)\n        internal\n        whenNotPaused\n    {\n        _checkIfMigrationAllowed(_account);\n        _payForMigration(_account);\n\n        uint256 migratedEscrow;\n        uint256 cooldown = stakingRewardsV2.cooldownPeriod();\n        mapping(uint256 => VestingEntry) storage userEntries = registeredVestingSchedules[_account];\n\n        for (uint256 i = 0; i < _entryIDs.length; i++) {\n            uint256 entryID = _entryIDs[i];\n\n            (uint256 endTime, uint256 escrowAmount, uint256 duration) =\n                rewardEscrowV1.getVestingEntry(_account, entryID);\n            VestingEntry storage registeredEntry = userEntries[entryID];\n            uint256 originalEscrowAmount = registeredEntry.escrowAmount;\n\n            // if it is not zero, it hasn't been vested\n            if (escrowAmount != 0) continue;\n            // entry must have been registered\n            if (originalEscrowAmount == 0) continue;\n            // skip if already migrated\n            if (registeredEntry.migrated) continue;\n\n            // update state\n            registeredEntry.migrated = true;\n            migratedEscrow += originalEscrowAmount;\n\n            /// @dev it essential for security that the duration is not less than the cooldown period,\n            /// otherwise the user could do a governance attack by bypassing the unstaking cooldown lock\n            /// by migrating their escrow then staking, voting, and vesting immediately\n            if (duration < cooldown) {\n                uint256 timeCreated = endTime - duration;\n                duration = cooldown;\n                endTime = timeCreated + cooldown;\n            }\n\n            IRewardEscrowV2.VestingEntry memory entry = IRewardEscrowV2.VestingEntry({\n                escrowAmount: originalEscrowAmount,\n                duration: duration,\n                endTime: endTime,\n                earlyVestingFee: 90\n            });\n\n            // create duplicate vesting entry on v2\n            kwenta.transfer(address(rewardEscrowV2), originalEscrowAmount);\n            rewardEscrowV2.importEscrowEntry(_to, entry);\n        }\n\n        totalMigrated += migratedEscrow;\n    }\n\n    function _checkIfMigrationAllowed(address _account) internal view {\n        uint256 initiatedAt = initializationTime[_account];\n        if (initiatedAt == 0) revert MustBeInitiated();\n        if (_deadlinePassed(initiatedAt)) revert DeadlinePassed();\n    }\n\n    function _deadlinePassed(uint256 _initiatedAt) internal view returns (bool) {\n        return block.timestamp > _initiatedAt + MIGRATION_DEADLINE;\n    }\n\n    function _payForMigration(address _account) internal {\n        uint256 toPayNow = toPay(_account);\n        if (toPayNow > 0) {\n            kwenta.transferFrom(msg.sender, address(this), toPayNow);\n            paidSoFar[_account] += toPayNow;\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                       INTEGRATOR MIGRATION STEPS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev These functions will only be used by a few V1 smart contract users who set the\n    /// recipient of their V1 staked escrow to the \"beneficiary\" stored on the smart contract\n\n    /// @dev check the msg.sender is the \"beneficiary\" stored on the integrator smart contract\n    modifier onlyBeneficiary(address _integrator) {\n        address beneficiary = IStakingRewardsIntegrator(_integrator).beneficiary();\n        if (beneficiary != msg.sender) revert NotApproved();\n        _;\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    function registerIntegratorEntries(address _integrator, uint256[] calldata _entryIDs)\n        external\n        onlyBeneficiary(_integrator)\n    {\n        _registerEntries(_integrator, _entryIDs);\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    function migrateIntegratorEntries(\n        address _integrator,\n        address _to,\n        uint256[] calldata _entryIDs\n    ) external onlyBeneficiary(_integrator) {\n        _migrateEntries(_integrator, _to, _entryIDs);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             FUND RECOVERY\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IEscrowMigrator\n    function setTreasuryDAO(address _newTreasuryDAO) external onlyOwner {\n        if (_newTreasuryDAO == address(0)) revert ZeroAddress();\n        treasuryDAO = _newTreasuryDAO;\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    /// @dev warning - may fail due to unbounded loop for certain users\n    function updateTotalLocked(address[] memory _expiredMigrators) external {\n        for (uint256 i = 0; i < _expiredMigrators.length;) {\n            updateTotalLocked(_expiredMigrators[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    /// @dev warning - may fail due to unbounded loop for certain users\n    function updateTotalLocked(address _expiredMigrator) public {\n        uint256 initiatedAt = initializationTime[_expiredMigrator];\n        if (\n            initiatedAt != 0 && !lockedFundsAccountedFor[_expiredMigrator]\n                && _deadlinePassed(initiatedAt)\n        ) {\n            lockedFundsAccountedFor[_expiredMigrator] = true;\n            totalLocked += totalEscrowUnmigrated(_expiredMigrator);\n        }\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    function recoverExcessFunds() external onlyOwner {\n        uint256 leaveInContract = totalRegistered - totalMigrated - totalLocked;\n        uint256 balance = kwenta.balanceOf(address(this));\n        if (balance > leaveInContract) {\n            kwenta.transfer(treasuryDAO, balance - leaveInContract);\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             UPGRADEABILITY\n    //////////////////////////////////////////////////////////////*/\n\n    function _authorizeUpgrade(address _newImplementation) internal override onlyOwner {}\n\n    /*///////////////////////////////////////////////////////////////\n                                PAUSABLE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IEscrowMigrator\n    function pauseEscrowMigrator() external onlyOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IEscrowMigrator\n    function unpauseEscrowMigrator() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/interfaces/IControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// allows messages from L1 -> L2\ninterface IControlL2MerkleDistributor {\n    /// @notice claim $KWENTA on L2 from an L1 address\n    /// @dev destAccount will be the address used to create new escrow entry\n    /// @dev the function caller (i.e. msg.sender) will be provided as a parameter\n    /// to MerkleDistributor.claimToAddress() on L2. Only valid callers will\n    /// be able to claim\n    /// @param index: used for merkle tree managment and verification\n    /// @param destAccount: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    function claimToAddress(uint256 index, address destAccount, uint256 amount, bytes32[] calldata merkleProof) external;\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/interfaces/IEscrowedMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IEscrowedMultipleMerkleDistributor {\n    /// @notice data structure for aggregating multiple claims\n    struct Claims {\n        uint256 index;\n        address account;\n        uint256 amount;\n        bytes32[] merkleProof;\n        uint256 epoch;\n    }\n\n    /// @notice event is triggered whenever a call to `claim` succeeds\n    event Claimed(\n        uint256 index,\n        address account,\n        uint256 amount,\n        uint256 epoch\n    );\n\n    /// @notice event is triggered whenever a merkle root is set\n    event MerkleRootModified(uint256 epoch);\n\n    /// @return escrow for tokens claimed\n    function rewardEscrow() external view returns (address);\n\n    /// @return token to be distributed (KWENTA)\n    function token() external view returns (address);\n\n    // @return the merkle root of the merkle tree containing account balances available to claim\n    function merkleRoots(uint256) external view returns (bytes32);\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index number\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index, uint256 epoch)\n        external\n        view\n        returns (bool);\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    /// @param epoch: distribution index number\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) external;\n\n    /// @notice function that aggregates multiple claims\n    /// @param claims: array of valid claims\n    function claimMultiple(Claims[] calldata claims) external;\n\n    /// @notice modify merkle root for existing distribution epoch\n    /// @param merkleRoot: new merkle root\n    /// @param epoch: distribution index number\n    function setMerkleRootForEpoch(bytes32 merkleRoot, uint256 epoch) external;\n}\n"
    },
    "contracts/interfaces/IEscrowMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IEscrowMigrator {\n    /*//////////////////////////////////////////////////////////////\n                           STRUCTS AND ENUMS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice A vesting entry contains the data for each escrow entry\n    struct VestingEntry {\n        // The amount of KWENTA stored in this vesting entry\n        uint248 escrowAmount;\n        // Whether the entry has been migrated to v2\n        bool migrated;\n    }\n\n    /// @notice A vesting entry contains the data for each escrow entry\n    struct VestingEntryWithID {\n        // The entryID associated with this vesting entry\n        uint256 entryID;\n        // The amount of KWENTA stored in this vesting entry\n        uint256 escrowAmount;\n        // Whether the entry has been migrated to v2\n        bool migrated;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                INITIALIZER\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Initializes the contract\n    /// @param _owner The address of the owner of this contract\n    /// @param _treasuryDAO The address of the treasury DAO\n    /// @dev this function should be called via proxy, not via direct contract interaction\n    function initialize(address _owner, address _treasuryDAO) external;\n\n    /*//////////////////////////////////////////////////////////////\n                                 VIEWS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice The deadline for migration, set to 2 weeks from when a user initializes\n    function MIGRATION_DEADLINE() external view returns (uint256);\n\n    /// @notice Get the total number of registered vesting entries for a given account\n    /// @param _account The address of the account to query\n    /// @return The number of vesting entries for the given account\n    function numberOfRegisteredEntries(address _account) external view returns (uint256);\n\n    /// @notice Get the total number of migrated vesting entries for a given account\n    /// @param _account The address of the account to query\n    /// @return The number of vesting entries for the given account\n    /// @dev WARNING: loop is potentially limitless - could revert with out of gas error if called on-chain\n    function numberOfMigratedEntries(address _account) external view returns (uint256);\n\n    /// @notice Get the total escrowed registerd for an account\n    /// @param _account The address of the account to query\n    /// @return total the total escrow registered for the given account\n    /// @dev WARNING: loop is potentially limitless - could revert with out of gas error if called on-chain\n    function totalEscrowRegistered(address _account) external view returns (uint256 total);\n\n    /// @notice Get the total escrowed migrated for an account\n    /// @param _account The address of the account to query\n    /// @return total the total escrow migrated for the given account\n    /// @dev WARNING: loop is potentially limitless - could revert with out of gas error if called on-chain\n    function totalEscrowMigrated(address _account) external view returns (uint256 total);\n\n    /// @notice Get the total escrow that has been registered but not migrated for a user\n    /// @param _account The address of the account to query\n    /// @return total the total registered but non-migrated escrow for the given account\n    /// @dev WARNING: loop is potentially limitless - could revert with out of gas error if called on-chain\n    function totalEscrowUnmigrated(address _account) external view returns (uint256 total);\n\n    /// @notice the amount a given user needs to pay to migrate all currently vested\n    /// registered entries. The user should approve the escrow migrator for at least\n    /// this amount before beginning the migration step\n    /// @param _account The address of the account to query\n    /// @return toPay the amount the user needs to pay to migrate all currently vested\n    function toPay(address _account) external view returns (uint256);\n\n    /// @notice Get the vesting entry data for a given account and entry ID\n    /// @param _account The address of the account to query\n    /// @param _entryID The ID of the entry to query\n    function getRegisteredVestingEntry(address _account, uint256 _entryID)\n        external\n        view\n        returns (uint256 escrowAmount, bool migrated);\n\n    /// @notice get a list of vesting entries for a given account\n    /// @param _account The address of the account to query\n    /// @param _index The _index of the first entry to query\n    /// @param _pageSize The number of entries to query\n    function getRegisteredVestingSchedules(address _account, uint256 _index, uint256 _pageSize)\n        external\n        view\n        returns (VestingEntryWithID[] memory);\n\n    /// @notice get a list of vesting entry IDs for a given account\n    /// @param _account The address of the account to query\n    /// @param _index The index of the first entry to query\n    /// @param _pageSize The number of entries to query\n    function getRegisteredVestingEntryIDs(address _account, uint256 _index, uint256 _pageSize)\n        external\n        view\n        returns (uint256[] memory);\n\n    /*//////////////////////////////////////////////////////////////\n                                 STEP 0\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice claim any remaining StakingRewards V1 rewards\n    /// This should be done before the migration process can begin\n\n    /*//////////////////////////////////////////////////////////////\n                                 STEP 1\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Step 1 in the migration process - register any entries to be migrated\n    /// @param _entryIDs: The entries to register for migration\n    /// @dev WARNING: If the user vests non-registerd entries after this step, they will have to pay extra for the migration.\n    /// The user should register all entries they want to migrate BEFORE vesting, otherwise it will not be possible to migrate them.\n    /// @dev WARNING: To reiterate, if the user vests any entries that are not registered after initiating, they will have\n    /// to pay extra for the migration. This is because the user will have to pay for the migration based on the total vested balance at the time of\n    /// migration - but only registered entries will be created for them on V2\n    /// @param _entryIDs: The entries to register for migration\n    function registerEntries(uint256[] calldata _entryIDs) external;\n\n    /*//////////////////////////////////////////////////////////////\n                                 STEP 2\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Vest any registered entries and approve the EscrowMigrator contract\n    /// to spend liquid at least the `toPay` amount of $KWENTA\n    /// @notice WARNING: DO NOT VEST ANY NON-REGISTERED ENTRIES\n\n    /*//////////////////////////////////////////////////////////////\n                                 STEP 3\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Step 3 in the migration process - migrate the registered entries\n    /// @notice The user MUST vest any registered entries before they can be migrated\n    /// @notice The user MUST NOT vest any non-registered entries before this step\n    /// @param _to: The address to migrate the entries to\n    /// @param _entryIDs: The entries to migrate\n    function migrateEntries(address _to, uint256[] calldata _entryIDs) external;\n\n    /*//////////////////////////////////////////////////////////////\n                          INTEGRATOR MIGRATION\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice step 0 - claim any remaining StakingRewards V1 rewards\n\n    /// @notice step 1 - initiate & register entries for migration\n    /// @param _integrator: The address of the integrator to register entries for\n    /// @param _entryIDs: The entries to register for migration\n    /// @dev WARNING: If the integrator vests non-registerd entries after this step, they will have to pay extra for the migration.\n    function registerIntegratorEntries(address _integrator, uint256[] calldata _entryIDs)\n        external;\n\n    /// @notice step 2 - vest all registered entries via the integartor, pulling the early vested KWENTA to the beneficiary's address.\n    /// Then the beneficiary must approve the EscrowMigrator contract for at least the integrators `toPay` amount.\n\n    /// @notice step 3 - migrate all registered & vested entries\n    /// @param _integrator: The address of the integrator to migrate entries for\n    /// @param _to: The address to migrate the entries to\n    /// @param _entryIDs: The entries to migrate\n    function migrateIntegratorEntries(\n        address _integrator,\n        address _to,\n        uint256[] calldata _entryIDs\n    ) external;\n\n    /*//////////////////////////////////////////////////////////////\n                             FUND RECOVERY\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Allows the owner to change the treasury DAO address\n    /// @param _newTreasuryDAO The address of the new treasury DAO\n    function setTreasuryDAO(address _newTreasuryDAO) external;\n\n    /// @notice Account for locked funds for a list of expired migrators\n    /// @param _expiredMigrators The addresses of the expired migrators\n    /// @dev warning - may fail due to unbounded loop for certain users\n    function updateTotalLocked(address[] memory _expiredMigrators) external;\n\n    /// @notice Account for locked funds for a single expired migrator\n    /// @param _expiredMigrator The address of the expired migrator\n    /// @dev warning - may fail due to unbounded loop for certain users\n    function updateTotalLocked(address _expiredMigrator) external;\n\n    /// @notice Withdraw excess funds from the contract to the treasury\n    function recoverExcessFunds() external;\n\n    /*///////////////////////////////////////////////////////////////\n                                PAUSABLE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Pause the reward escrow contract\n    function pauseEscrowMigrator() external;\n\n    /// @notice Unpause the reward escrow contract\n    function unpauseEscrowMigrator() external;\n\n    /*//////////////////////////////////////////////////////////////\n                                ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice cannot set this value to the zero address\n    error ZeroAddress();\n\n    /// @notice the caller is not approved to take this action\n    error NotApproved();\n\n    /// @notice the user may not begin the migration process if they have nothing to migrate\n    error NoEscrowBalanceToMigrate();\n\n    /// @notice step 2 canont be called until the user has initiated via step 1\n    error MustBeInitiated();\n\n    /// @notice a user must complete migrating within the specified time window after initiating\n    error DeadlinePassed();\n}\n"
    },
    "contracts/interfaces/IKwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IKwenta is IERC20 {\n\n    function mint(address account, uint amount) external;\n\n    function burn(uint amount) external;\n\n    function setSupplySchedule(address _supplySchedule) external;\n\n}"
    },
    "contracts/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMerkleDistributor {\n    /// @notice event is triggered whenever a call to `claim` succeeds\n    event Claimed(uint256 index, address account, uint256 amount);\n\n    /// @return escrow for tokens claimed\n    function rewardEscrow() external view returns (address);\n\n    /// @return token to be distributed (KWENTA)\n    function token() external view returns (address);\n\n    /// @return contract that initiates claim from L1 (called by address attempting to claim)\n    function controlL2MerkleDistributor() external view returns (address);\n\n    // @return the merkle root of the merkle tree containing account balances available to claim\n    function merkleRoot() external view returns (bytes32);\n\n    /// @notice owner can set address of ControlL2MerkleDistributor\n    /// @dev this function must be called after (1) this contract has been deployed and\n    /// (2) ControlL2MerkleDistributor has been deployed (which requires this contract's\n    /// deployment address as input in the constructor)\n    /// @param _controlL2MerkleDistributor: address of contract that initiates claim from L1\n    function setControlL2MerkleDistributor(address _controlL2MerkleDistributor)\n        external;\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index) external view returns (bool);\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external;\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `destAccount`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address that initiated claim and designated `destAccount`\n    /// @param destAccount: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    function claimToAddress(\n        uint256 index,\n        address account,\n        address destAccount,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external;\n}\n"
    },
    "contracts/interfaces/IMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMultipleMerkleDistributor {\n    /// @notice data structure for aggregating multiple claims\n    struct Claims {\n        uint256 index;\n        address account;\n        uint256 amount;\n        bytes32[] merkleProof;\n        uint256 epoch;\n    }\n\n    /// @notice event is triggered whenever a call to `claim` succeeds\n    event Claimed(\n        uint256 index,\n        address account,\n        uint256 amount,\n        uint256 epoch\n    );\n\n    /// @notice event is triggered whenever a merkle root is set\n    event MerkleRootModified(uint256 epoch);\n\n    /// @return token to be distributed\n    function token() external view returns (address);\n\n    // @return the merkle root of the merkle tree containing account balances available to claim\n    function merkleRoots(uint256) external view returns (bytes32);\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index number\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index, uint256 epoch)\n        external\n        view\n        returns (bool);\n\n    /// @notice attempt to claim as `account` and transfer `amount` to `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: token amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    /// @param epoch: distribution index number\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) external;\n\n    /// @notice function that aggregates multiple claims\n    /// @param claims: array of valid claims\n    function claimMultiple(Claims[] calldata claims) external;\n\n    /// @notice modify merkle root for existing distribution epoch\n    /// @param merkleRoot: new merkle root\n    /// @param epoch: distribution index number\n    function setMerkleRootForEpoch(bytes32 merkleRoot, uint256 epoch) external;\n}\n"
    },
    "contracts/interfaces/IRewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary VestingEntries {\n    struct VestingEntry {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 duration;\n    }\n    struct VestingEntryWithID {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 entryID;\n    }\n}\n\ninterface IRewardEscrow {\n    // Views\n    function getKwentaAddress() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function numVestingEntries(address account) external view returns (uint256);\n\n    function totalEscrowedAccountBalance(address account)\n        external\n        view\n        returns (uint256);\n\n    function totalVestedAccountBalance(address account)\n        external\n        view\n        returns (uint256);\n\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\n        external\n        view\n        returns (uint256, uint256);\n\n    function getVestingSchedules(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\n\n    function getAccountVestingEntryIDs(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (uint256[] memory);\n\n    function getVestingEntryClaimable(address account, uint256 entryID)\n        external\n        view\n        returns (uint256, uint256);\n\n    function getVestingEntry(address account, uint256 entryID)\n        external\n        view\n        returns (\n            uint64,\n            uint256,\n            uint256\n        );\n\n    // Mutative functions\n    function vest(uint256[] calldata entryIDs) external;\n\n    function createEscrowEntry(\n        address beneficiary,\n        uint256 deposit,\n        uint256 duration\n    ) external;\n\n    function appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) external;\n\n    function stakeEscrow(uint256 _amount) external;\n\n    function unstakeEscrow(uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IRewardEscrowV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IRewardEscrowV2 {\n    /*//////////////////////////////////////////////////////////////\n                                STRUCTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice A vesting entry contains the data for each escrow NFT\n    struct VestingEntry {\n        // The amount of KWENTA stored in this vesting entry\n        uint256 escrowAmount;\n        // The length of time until the entry is fully matured\n        uint256 duration;\n        // The time at which the entry will be fully matured\n        uint256 endTime;\n        // The percentage fee for vesting immediately\n        // The actual penalty decreases linearly with time until it reaches 0 at block.timestamp=endTime\n        uint256 earlyVestingFee;\n    }\n\n    /// @notice The same as VestingEntry but packed to fit in a single slot\n    struct VestingEntryPacked {\n        uint144 escrowAmount;\n        uint40 duration;\n        uint64 endTime;\n        uint8 earlyVestingFee;\n    }\n\n    /// @notice Helper struct for getVestingSchedules view\n    struct VestingEntryWithID {\n        // The amount of KWENTA stored in this vesting entry\n        uint256 escrowAmount;\n        // The unique ID of this escrow entry NFT\n        uint256 entryID;\n        // The time at which the entry will be fully matured\n        uint256 endTime;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                INITIALIZER\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Initializes the contract\n    /// @param _owner The address of the owner of this contract\n    /// @dev this function should be called via proxy, not via direct contract interaction\n    function initialize(address _owner) external;\n\n    /*///////////////////////////////////////////////////////////////\n                                SETTERS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Function used to define the StakingRewardsV2 contract address to use\n    /// @param _stakingRewards The address of the StakingRewardsV2 contract\n    /// @dev This function can only be called once\n    function setStakingRewards(address _stakingRewards) external;\n\n    /// @notice Function used to define the EscrowMigrator contract address to use\n    /// @param _escrowMigrator The address of the EscrowMigrator contract\n    function setEscrowMigrator(address _escrowMigrator) external;\n\n    /// @notice Function used to define the TreasuryDAO address to use\n    /// @param _treasuryDAO The address of the TreasuryDAO\n    /// @dev This function can only be called multiple times\n    function setTreasuryDAO(address _treasuryDAO) external;\n\n    /*///////////////////////////////////////////////////////////////\n                                VIEWS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Minimum early vesting fee\n    /// @dev this must be high enought to prevent governance attacks where the user\n    /// can set the early vesting fee to a very low number, stake, vote, then withdraw\n    /// via vesting which avoids the unstaking cooldown\n    function MINIMUM_EARLY_VESTING_FEE() external view returns (uint256);\n\n    /// @notice Default early vesting fee\n    /// @dev This is the default fee applied for early vesting\n    function DEFAULT_EARLY_VESTING_FEE() external view returns (uint256);\n\n    /// @notice Default escrow duration\n    /// @dev This is the default duration for escrow\n    function DEFAULT_DURATION() external view returns (uint256);\n\n    /// @notice helper function to return kwenta address\n    function getKwentaAddress() external view returns (address);\n\n    /// @notice A simple alias to totalEscrowedAccountBalance\n    function escrowedBalanceOf(address _account) external view returns (uint256);\n\n    /// @notice Get the amount of escrowed kwenta that is not staked for a given account\n    function unstakedEscrowedBalanceOf(address _account) external view returns (uint256);\n\n    /// @notice Get the details of a given vesting entry\n    /// @param _entryID The id of the vesting entry.\n    /// @return endTime the vesting entry object\n    /// @return escrowAmount rate per second emission.\n    /// @return duration the duration of the vesting entry.\n    /// @return earlyVestingFee the early vesting fee of the vesting entry.\n    function getVestingEntry(uint256 _entryID)\n        external\n        view\n        returns (uint256, uint256, uint256, uint256);\n\n    /// @notice Get the vesting entries for a given account\n    /// @param _account The account to get the vesting entries for\n    /// @param _index The index of the first vesting entry to get\n    /// @param _pageSize The number of vesting entries to get\n    /// @return vestingEntries the list of vesting entries with ids\n    function getVestingSchedules(address _account, uint256 _index, uint256 _pageSize)\n        external\n        view\n        returns (VestingEntryWithID[] memory);\n\n    /// @notice Get the vesting entries for a given account\n    /// @param _account The account to get the vesting entries for\n    /// @param _index The index of the first vesting entry to get\n    /// @param _pageSize The number of vesting entries to get\n    /// @return vestingEntries the list of vesting entry ids\n    function getAccountVestingEntryIDs(address _account, uint256 _index, uint256 _pageSize)\n        external\n        view\n        returns (uint256[] memory);\n\n    /// @notice Get the amount that can be vested now for a set of vesting entries\n    /// @param _entryIDs The ids of the vesting entries to get the quantity for\n    /// @return total The total amount that can be vested for these entries\n    /// @return totalFee The total amount of fees that will be paid for these vesting entries\n    function getVestingQuantity(uint256[] calldata _entryIDs)\n        external\n        view\n        returns (uint256, uint256);\n\n    /// @notice Get the amount that can be vested now for a given vesting entry\n    /// @param _entryID The id of the vesting entry to get the quantity for\n    /// @return quantity The total amount that can be vested for this entry\n    /// @return totalFee The total amount of fees that will be paid for this vesting entry\n    function getVestingEntryClaimable(uint256 _entryID) external view returns (uint256, uint256);\n\n    /*///////////////////////////////////////////////////////////////\n                            MUTATIVE FUNCTIONS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Vest escrowed amounts that are claimable - allows users to vest their vesting entries based on msg.sender\n    /// @param _entryIDs The ids of the vesting entries to vest\n    function vest(uint256[] calldata _entryIDs) external;\n\n    /// @notice Utilized by the escrow migrator contract to transfer V1 escrow\n    /// @param _account The account to import the escrow entry to\n    /// @param entryToImport The vesting entry to import\n    function importEscrowEntry(address _account, VestingEntry memory entryToImport) external;\n\n    /// @notice Create an escrow entry to lock KWENTA for a given duration in seconds\n    /// @param _beneficiary The account that will be able to withdraw the escrowed amount\n    /// @param _deposit The amount of KWENTA to escrow\n    /// @param _duration The duration in seconds to lock the KWENTA for\n    /// @param _earlyVestingFee The fee to apply if the escrowed amount is withdrawn before the end of the vesting period\n    /// @dev the early vesting fee decreases linearly over the vesting period\n    /// @dev This call expects that the depositor (msg.sender) has already approved the Reward escrow contract\n    /// to spend the the amount being escrowed.\n    function createEscrowEntry(\n        address _beneficiary,\n        uint256 _deposit,\n        uint256 _duration,\n        uint256 _earlyVestingFee\n    ) external;\n\n    /// @notice Add a new vesting entry at a given time and quantity to an account's schedule.\n    /// @dev A call to this should accompany a previous successful call to kwenta.transfer(rewardEscrow, amount),\n    /// to ensure that when the funds are withdrawn, there is enough balance.\n    /// This is only callable by the staking rewards contract\n    /// The duration defaults to 1 year, and the early vesting fee to 90%\n    /// @param _account The account to append a new vesting entry to.\n    /// @param _quantity The quantity of KWENTA that will be escrowed.\n    function appendVestingEntry(address _account, uint256 _quantity) external;\n\n    /// @notice Transfer multiple entries from one account to another\n    ///  Sufficient escrowed KWENTA must be unstaked for the transfer to succeed\n    /// @param _from The account to transfer the entries from\n    /// @param _to The account to transfer the entries to\n    /// @param _entryIDs a list of the ids of the entries to transfer\n    function bulkTransferFrom(address _from, address _to, uint256[] calldata _entryIDs) external;\n\n    /// @dev Triggers stopped state\n    function pauseRewardEscrow() external;\n\n    /// @dev Returns to normal state.\n    function unpauseRewardEscrow() external;\n\n    /*///////////////////////////////////////////////////////////////\n                                EVENTS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice emitted when an escrow entry is vested\n    /// @param beneficiary The account that was vested to\n    /// @param value The amount of KWENTA that was vested\n    event Vested(address indexed beneficiary, uint256 value);\n\n    /// @notice emitted when an escrow entry is created\n    /// @param beneficiary The account that gets the entry\n    /// @param value The amount of KWENTA that was escrowed\n    /// @param duration The duration in seconds of the vesting entry\n    /// @param entryID The id of the vesting entry\n    /// @param earlyVestingFee The early vesting fee of the vesting entry\n    event VestingEntryCreated(\n        address indexed beneficiary,\n        uint256 value,\n        uint256 duration,\n        uint256 entryID,\n        uint256 earlyVestingFee\n    );\n\n    /// @notice emitted when the staking rewards contract is set\n    /// @param stakingRewards The address of the staking rewards contract\n    event StakingRewardsSet(address stakingRewards);\n\n    /// @notice emitted when the escrow migrator contract is set\n    /// @param escrowMigrator The address of the escrow migrator contract\n    event EscrowMigratorSet(address escrowMigrator);\n\n    /// @notice emitted when the treasury DAO is set\n    /// @param treasuryDAO The address of the treasury DAO\n    event TreasuryDAOSet(address treasuryDAO);\n\n    /// @notice emitted when the early vest fee is sent to the treasury and notifier\n    /// @param amountToTreasury The amount of KWENTA sent to the treasury\n    /// @param amountToNotifier The amount of KWENTA sent to the notifier\n    event EarlyVestFeeSent(uint256 amountToTreasury, uint256 amountToNotifier);\n\n    /*//////////////////////////////////////////////////////////////\n                                ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Thrown when attempting to bulk transfer from and to the same address\n    error CannotTransferToSelf();\n\n    /// @notice Insufficient unstaked escrow to facilitate transfer\n    /// @param escrowAmount the amount of escrow attempted to transfer\n    /// @param unstakedBalance the amount of unstaked escrow available\n    error InsufficientUnstakedBalance(uint256 escrowAmount, uint256 unstakedBalance);\n\n    /// @notice Attempted to set entry early vesting fee beyond 100%\n    error EarlyVestingFeeTooHigh();\n\n    /// @notice cannot mint entries with early vesting fee below the minimum\n    error EarlyVestingFeeTooLow();\n\n    /// @notice error someone other than staking rewards calls an onlyStakingRewards function\n    error OnlyStakingRewards();\n\n    /// @notice error someone other than escrow migrator calls an onlyEscrowMigrator function\n    error OnlyEscrowMigrator();\n\n    /// @notice staking rewards is only allowed to be set once\n    error StakingRewardsAlreadySet();\n\n    /// @notice cannot set this value to the zero address\n    error ZeroAddress();\n\n    /// @notice cannot mint entries with zero escrow\n    error ZeroAmount();\n\n    /// @notice Cannot escrow with 0 duration OR above max_duration\n    error InvalidDuration();\n}\n"
    },
    "contracts/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStakingRewards {\n    /// VIEWS\n    // token state\n    function totalSupply() external view returns (uint256);\n    // staking state\n    function balanceOf(address account) external view returns (uint256);\n    function escrowedBalanceOf(address account) external view returns (uint256);\n    function nonEscrowedBalanceOf(address account) external view returns (uint256);\n    // rewards\n    function getRewardForDuration() external view returns (uint256);\n    function rewardPerToken() external view returns (uint256);\n    function lastTimeRewardApplicable() external view returns (uint256);\n    function earned(address account) external view returns (uint256);\n\n    /// MUTATIVE\n    // Staking/Unstaking\n    function stake(uint256 amount) external;\n    function unstake(uint256 amount) external;\n    function stakeEscrow(address account, uint256 amount) external;\n    function unstakeEscrow(address account, uint256 amount) external;\n    function exit() external;\n    // claim rewards\n    function getReward() external;\n    // settings\n    function notifyRewardAmount(uint256 reward) external;\n    function setRewardsDuration(uint256 _rewardsDuration) external;\n    // pausable\n    function pauseStakingRewards() external;\n    function unpauseStakingRewards() external;\n    // misc.\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\n}\n"
    },
    "contracts/interfaces/IStakingRewardsIntegrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IStakingRewardsIntegrator {\n    /*//////////////////////////////////////////////////////////////\n                                 VIEWS\n    //////////////////////////////////////////////////////////////*/\n    function beneficiary() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IStakingRewardsNotifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.19;\n\ninterface IStakingRewardsNotifier {\n    // Errors\n\n    /// @notice cannot set this value to the zero address\n    error ZeroAddress();\n\n    /// @notice OnlySupplySchedule can access this\n    error OnlySupplySchedule();\n\n    /// @notice Staking Rewards contract was already set\n    error AlreadySet();\n\n    // Mutative Functions\n\n    /// @notice set the StakingRewardsV2 contract\n    /// @param _stakingRewardsV2: address of the StakingRewardsV2 contract\n    function setStakingRewardsV2(address _stakingRewardsV2) external;\n\n    /// @notice notify the StakingRewardsV2 contract of the reward amount\n    /// @param mintedAmount: amount of rewards minted\n    function notifyRewardAmount(uint256 mintedAmount) external;\n}\n"
    },
    "contracts/interfaces/IStakingRewardsV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IStakingRewardsV2 {\n    /*//////////////////////////////////////////////////////////////\n                                STRUCTS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice A checkpoint for tracking values at a given timestamp\n    struct Checkpoint {\n        // The timestamp when the value was generated\n        uint64 ts;\n        // The block number when the value was generated\n        uint64 blk;\n        // The value of the checkpoint\n        /// @dev will not overflow unless it value reaches 340 quintillion\n        /// This number should be impossible to reach with the total supply of $KWENTA\n        uint128 value;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                INITIALIZER\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Initializes the contract\n    /// @param _owner: owner of this contract\n    /// @dev this function should be called via proxy, not via direct contract interaction\n    function initialize(address _owner) external;\n\n    /*//////////////////////////////////////////////////////////////\n                                Views\n    //////////////////////////////////////////////////////////////*/\n    // token state\n\n    /// @dev returns staked tokens which will likely not be equal to total tokens\n    /// in the contract since reward and staking tokens are the same\n    /// @return total amount of tokens that are being staked\n    function totalSupply() external view returns (uint256);\n\n    // staking state\n\n    /// @notice Returns the total number of staked tokens for a user\n    /// the sum of all escrowed and non-escrowed tokens\n    /// @param _account: address of potential staker\n    /// @return amount of tokens staked by account\n    function balanceOf(address _account) external view returns (uint256);\n\n    /// @notice Getter function for number of staked escrow tokens\n    /// @param _account address to check the escrowed tokens staked\n    /// @return amount of escrowed tokens staked\n    function escrowedBalanceOf(address _account) external view returns (uint256);\n\n    /// @notice Getter function for number of staked non-escrow tokens\n    /// @param _account address to check the non-escrowed tokens staked\n    /// @return amount of non-escrowed tokens staked\n    function nonEscrowedBalanceOf(address _account) external view returns (uint256);\n\n    /// @notice Getter function for the total number of escrowed tokens that are not not staked\n    /// @param _account: address to check\n    /// @return amount of tokens escrowed but not staked\n    function unstakedEscrowedBalanceOf(address _account) external view returns (uint256);\n\n    /// @notice the period of time a user has to wait after staking to unstake\n    function cooldownPeriod() external view returns (uint256);\n\n    // rewards\n\n    /// @notice calculate the total rewards for one duration based on the current rate\n    /// @return rewards for the duration specified by rewardsDuration\n    function getRewardForDuration() external view returns (uint256);\n\n    /// @notice calculate running sum of reward per total tokens staked\n    /// at this specific time\n    /// @return running sum of reward per total tokens staked\n    function rewardPerToken() external view returns (uint256);\n\n    /// @notice get the last time a reward is applicable for a given user\n    /// @return timestamp of the last time rewards are applicable\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    /// @notice determine how much reward token an account has earned thus far\n    /// @param _account: address of account earned amount is being calculated for\n    function earned(address _account) external view returns (uint256);\n\n    // checkpointing\n\n    /// @notice get the number of balances checkpoints for an account\n    /// @param _account: address of account to check\n    /// @return number of balances checkpoints\n    function balancesCheckpointsLength(address _account) external view returns (uint256);\n\n    /// @notice get the number of escrowed balance checkpoints for an account\n    /// @param _account: address of account to check\n    /// @return number of escrowed balance checkpoints\n    function escrowedBalancesCheckpointsLength(address _account) external view returns (uint256);\n\n    /// @notice get the number of total supply checkpoints\n    /// @return number of total supply checkpoints\n    function totalSupplyCheckpointsLength() external view returns (uint256);\n\n    /// @notice get a users balance at a given timestamp\n    /// @param _account: address of account to check\n    /// @param _timestamp: timestamp to check\n    /// @return balance at given timestamp\n    /// @dev if called with a timestamp that equals the current block timestamp, then the function might return inconsistent\n    /// values as further transactions changing the balances can still occur within the same block. \n    function balanceAtTime(address _account, uint256 _timestamp) external view returns (uint256);\n\n    /// @notice get a users escrowed balance at a given timestamp\n    /// @param _account: address of account to check\n    /// @param _timestamp: timestamp to check\n    /// @return escrowed balance at given timestamp\n    /// @dev if called with a timestamp that equals the current block timestamp, then the function might return inconsistent\n    /// values as further transactions changing the balances can still occur within the same block. \n    function escrowedBalanceAtTime(address _account, uint256 _timestamp)\n        external\n        view\n        returns (uint256);\n\n    /// @notice get the total supply at a given timestamp\n    /// @param _timestamp: timestamp to check\n    /// @return total supply at given timestamp\n    /// @dev if called with a timestamp that equals the current block timestamp, then the function might return inconsistent\n    /// values as further transactions changing the balances can still occur within the same block. \n    function totalSupplyAtTime(uint256 _timestamp) external view returns (uint256);\n\n    /*//////////////////////////////////////////////////////////////\n                                Mutative\n    //////////////////////////////////////////////////////////////*/\n    // Staking/Unstaking\n\n    /// @notice stake token\n    /// @param _amount: amount to stake\n    /// @dev updateReward() called prior to function logic\n    function stake(uint256 _amount) external;\n\n    /// @notice unstake token\n    /// @param _amount: amount to unstake\n    /// @dev updateReward() called prior to function logic\n    function unstake(uint256 _amount) external;\n\n    /// @notice stake escrowed token\n    /// @param _amount: amount to stake\n    /// @dev updateReward() called prior to function logic\n    function stakeEscrow(uint256 _amount) external;\n\n    /// @notice unstake escrowed token\n    /// @param _amount: amount to unstake\n    /// @dev updateReward() called prior to function logic\n    function unstakeEscrow(uint256 _amount) external;\n\n    /// @notice unstake escrowed token skipping the cooldown wait period\n    /// @param _account: address of account to unstake from\n    /// @param _amount: amount to unstake\n    /// @dev this function is used to allow tokens to be vested at any time by RewardEscrowV2\n    function unstakeEscrowSkipCooldown(address _account, uint256 _amount) external;\n\n    /// @notice unstake all available staked non-escrowed tokens and\n    /// claim any rewards\n    function exit() external;\n\n    // claim rewards\n\n    /// @notice caller claims any rewards generated from staking\n    /// @dev rewards are escrowed in RewardEscrow\n    /// @dev updateReward() called prior to function logic\n    function getReward() external;\n\n    /// @notice claim rewards for an account and stake them\n    function compound() external;\n\n    // delegation\n\n    /// @notice approve an operator to collect rewards and stake escrow on behalf of the sender\n    /// @param operator: address of operator to approve\n    /// @param approved: whether or not to approve the operator\n    function approveOperator(address operator, bool approved) external;\n\n    /// @notice stake escrowed token on behalf of another account\n    /// @param _account: address of account to stake on behalf of\n    /// @param _amount: amount to stake\n    function stakeEscrowOnBehalf(address _account, uint256 _amount) external;\n\n    /// @notice caller claims any rewards generated from staking on behalf of another account\n    /// The rewards will be escrowed in RewardEscrow with the account as the beneficiary\n    /// @param _account: address of account to claim rewards for\n    function getRewardOnBehalf(address _account) external;\n\n    /// @notice claim and stake rewards on behalf of another account\n    /// @param _account: address of account to claim and stake rewards for\n    function compoundOnBehalf(address _account) external;\n\n    // settings\n\n    /// @notice configure reward rate\n    /// @param _reward: amount of token to be distributed over a period\n    /// @dev updateReward() called prior to function logic (with zero address)\n    function notifyRewardAmount(uint256 _reward) external;\n\n    /// @notice set rewards duration\n    /// @param _rewardsDuration: denoted in seconds\n    function setRewardsDuration(uint256 _rewardsDuration) external;\n\n    /// @notice set unstaking cooldown period\n    /// @param _cooldownPeriod: denoted in seconds\n    function setCooldownPeriod(uint256 _cooldownPeriod) external;\n\n    // pausable\n\n    /// @dev Triggers stopped state\n    function pauseStakingRewards() external;\n\n    /// @dev Returns to normal state.\n    function unpauseStakingRewards() external;\n\n    // misc.\n\n    /// @notice added to support recovering LP Rewards from other systems\n    /// such as BAL to be distributed to holders\n    /// @param tokenAddress: address of token to be recovered\n    /// @param tokenAmount: amount of token to be recovered\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\n\n    /*///////////////////////////////////////////////////////////////\n                                EVENTS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice update reward rate\n    /// @param reward: amount to be distributed over applicable rewards duration\n    event RewardAdded(uint256 reward);\n\n    /// @notice emitted when user stakes tokens\n    /// @param user: staker address\n    /// @param amount: amount staked\n    event Staked(address indexed user, uint256 amount);\n\n    /// @notice emitted when user unstakes tokens\n    /// @param user: address of user unstaking\n    /// @param amount: amount unstaked\n    event Unstaked(address indexed user, uint256 amount);\n\n    /// @notice emitted when escrow staked\n    /// @param user: owner of escrowed tokens address\n    /// @param amount: amount staked\n    event EscrowStaked(address indexed user, uint256 amount);\n\n    /// @notice emitted when staked escrow tokens are unstaked\n    /// @param user: owner of escrowed tokens address\n    /// @param amount: amount unstaked\n    event EscrowUnstaked(address user, uint256 amount);\n\n    /// @notice emitted when user claims rewards\n    /// @param user: address of user claiming rewards\n    /// @param reward: amount of reward token claimed\n    event RewardPaid(address indexed user, uint256 reward);\n\n    /// @notice emitted when rewards duration changes\n    /// @param newDuration: denoted in seconds\n    event RewardsDurationUpdated(uint256 newDuration);\n\n    /// @notice emitted when tokens are recovered from this contract\n    /// @param token: address of token recovered\n    /// @param amount: amount of token recovered\n    event Recovered(address token, uint256 amount);\n\n    /// @notice emitted when the unstaking cooldown period is updated\n    /// @param cooldownPeriod: the new unstaking cooldown period\n    event CooldownPeriodUpdated(uint256 cooldownPeriod);\n\n    /// @notice emitted when an operator is approved\n    /// @param owner: owner of tokens\n    /// @param operator: address of operator\n    /// @param approved: whether or not operator is approved\n    event OperatorApproved(address owner, address operator, bool approved);\n\n    /*//////////////////////////////////////////////////////////////\n                                ERRORS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice error someone other than reward escrow calls an onlyRewardEscrow function\n    error OnlyRewardEscrow();\n\n    /// @notice error someone other than the rewards notifier calls an onlyRewardsNotifier function\n    error OnlyRewardsNotifier();\n\n    /// @notice cannot set this value to the zero address\n    error ZeroAddress();\n\n    /// @notice error when user tries to stake/unstake 0 tokens\n    error AmountZero();\n\n    /// @notice the user does not have enough tokens to unstake that amount\n    /// @param availableBalance: amount of tokens available to withdraw\n    error InsufficientBalance(uint256 availableBalance);\n\n    /// @notice error when trying to stakeEscrow more than the unstakedEscrow available\n    /// @param unstakedEscrow amount of unstaked escrow\n    error InsufficientUnstakedEscrow(uint256 unstakedEscrow);\n\n    /// @notice previous rewards period must be complete before changing the duration for the new period\n    error RewardsPeriodNotComplete();\n\n    /// @notice recovering the staking token is not allowed\n    error CannotRecoverStakingToken();\n\n    /// @notice error when user tries unstake during the cooldown period\n    /// @param canUnstakeAt timestamp when user can unstake\n    error MustWaitForUnlock(uint256 canUnstakeAt);\n\n    /// @notice error when trying to set a rewards duration that is too short\n    error RewardsDurationCannotBeZero();\n\n    /// @notice error when trying to set a cooldown period below the minimum\n    /// @param minCooldownPeriod minimum cooldown period\n    error CooldownPeriodTooLow(uint256 minCooldownPeriod);\n\n    /// @notice error when trying to set a cooldown period above the maximum\n    /// @param maxCooldownPeriod maximum cooldown period\n    error CooldownPeriodTooHigh(uint256 maxCooldownPeriod);\n\n    /// @notice the caller is not approved to take this action\n    error NotApproved();\n\n    /// @notice attempted to approve self as an operator\n    error CannotApproveSelf();\n}\n"
    },
    "contracts/interfaces/ISupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.24;\n\ninterface ISupplySchedule {\n    // Views\n    function mintableSupply() external view returns (uint);\n\n    function isMintable() external view returns (bool);\n\n    // Mutative functions\n\n    function mint() external;\n\n    function setTreasuryDiversion(uint _treasuryDiversion) external;\n\n    function setTradingRewardsDiversion(uint _tradingRewardsDiversion) external;\n    \n    function setStakingRewards(address _stakingRewards) external;\n\n    function setTradingRewards(address _tradingRewards) external;\n}"
    },
    "contracts/interfaces/ITokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.19;\n\ninterface ITokenDistributor {\n    // Events\n\n    /// @notice event for a new checkpoint\n    /// @param time: the timestamp of the checkpoint\n    /// @param tokens: amount of tokens checkpointed\n    event CheckpointToken(uint time, uint tokens);\n\n    /// @notice event for a epoch that gets claimed\n    /// @param user: who claimed the epoch\n    /// @param epoch: the epoch number that was claimed\n    /// @param tokens: the amount of tokens claimed\n    event EpochClaim(address user, uint epoch, uint tokens);\n\n    // Errors\n\n    /// @notice error when constructor addresses are 0\n    error ZeroAddress();\n\n    /// @notice error when offset is more than 7 days\n    error OffsetTooBig();\n\n    /// @notice error when user tries to create a new distribution too soon\n    error LastEpochHasntEnded();\n\n    /// @notice error when user tries to claim a distribution too soon\n    error CannotClaimYet();\n\n    /// @notice error when user tries to claim in new distribution block\n    error CannotClaimInNewEpochBlock();\n\n    /// @notice error when user tries to claim for same epoch twice\n    error CannotClaimTwice();\n\n    /// @notice error when user tries to claim 0 fees\n    error CannotClaim0Fees();\n\n    // View Functions\n\n    /// @notice mapping for tokens allocated to each epoch\n    /// @param epochNumber: the epoch number\n    /// @return tokens for that epoch\n    function tokensPerEpoch(uint epochNumber) external view returns (uint);\n\n    /// @notice view function for calculating fees for an epoch\n    /// based off staked balances from StakingRewardsV2\n    /// @param to: the address the fees are being calculated for\n    /// @param epochNumber: the epoch the fees are calculated for\n    /// @return proportional amount of fees\n    function calculateEpochFees(\n        address to,\n        uint epochNumber\n    ) external view returns (uint256);\n\n    /// @notice represents the status of if a user already claimed their epoch\n    /// @param to: the address being checked\n    /// @param epochNumber: the epoch being checked\n    /// @return true if the epoch has been claimed, false otherwise\n    function claimedEpoch(address to, uint epochNumber) external view returns (bool);\n\n    // Mutative Functions\n\n    /// @notice checkpointing system for determining tokens per epoch\n    function checkpointToken() external;\n\n    /// @notice claim tokens for a certain epoch\n    /// @param to: address that epoch is being claimed for\n    /// @param epochNumber: epoch that is being claimed\n    function claimEpoch(address to, uint epochNumber) external;\n\n    /// @notice claim tokens for many epochs at once\n    /// @param to: address that epoch is being claimed for\n    /// @param epochs: all the epochs being claimed\n    function claimMany(address to, uint[] memory epochs) external;\n}\n"
    },
    "contracts/interfaces/IvKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IvKwentaRedeemer {\n    \n    function redeem() external;\n\n}"
    },
    "contracts/Kwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./utils/ERC20.sol\";\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/ISupplySchedule.sol\";\nimport \"./interfaces/IKwenta.sol\";\n\ncontract Kwenta is ERC20, Owned, IKwenta {\n    /// @notice defines inflationary supply schedule,\n    /// according to which the KWENTA inflationary supply is released\n    ISupplySchedule public supplySchedule;\n\n    modifier onlySupplySchedule() {\n        require(\n            msg.sender == address(supplySchedule),\n            \"Kwenta: Only SupplySchedule can perform this action\"\n        );\n        _;\n    }\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 _initialSupply,\n        address _owner,\n        address _initialHolder\n    ) ERC20(name, symbol) Owned(_owner) {\n        _mint(_initialHolder, _initialSupply);\n    }\n\n    // Mints inflationary supply\n    function mint(address account, uint256 amount)\n        external\n        override\n        onlySupplySchedule\n    {\n        _mint(account, amount);\n    }\n\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    function setSupplySchedule(address _supplySchedule)\n        external\n        override\n        onlyOwner\n    {\n        require(_supplySchedule != address(0), \"Kwenta: Invalid Address\");\n        supplySchedule = ISupplySchedule(_supplySchedule);\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Libraries\nimport \"./SafeDecimalMath.sol\";\n\n// https://docs.synthetix.io/contracts/source/libraries/math\nlibrary Math {\n    using SafeDecimalMath for uint;\n\n    /**\n     * @dev Uses \"exponentiation by squaring\" algorithm where cost is 0(logN)\n     * vs 0(N) for naive repeated multiplication.\n     * Calculates x^n with x as fixed-point and n as regular unsigned int.\n     * Calculates to 18 digits of precision with SafeDecimalMath.unit()\n     */\n    function powDecimal(uint x, uint n) internal pure returns (uint) {\n        // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\n\n        uint result = SafeDecimalMath.unit();\n        while (n > 0) {\n            if (n % 2 != 0) {\n                result = result.multiplyDecimal(x);\n            }\n            x = x.multiplyDecimal(x);\n            n /= 2;\n        }\n        return result;\n    }\n}"
    },
    "contracts/libraries/SafeDecimalMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint256 public constant UNIT = 10**uint256(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint256 public constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\n        10**uint256(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint256) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint256) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return (x * y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return (x * UNIT) / y;\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint256 i)\n        internal\n        pure\n        returns (uint256)\n    {\n        return i * UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR;\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint256 i)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 quotientTimesTen = i /\n            (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    // Computes `a - b`, setting the value to 0 if b > a.\n    function floorsub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return b >= a ? 0 : a - b;\n    }\n}\n"
    },
    "contracts/misc/BatchClaimer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IMultipleMerkleDistributor.sol\";\n\ncontract BatchClaimer {\n    \n    function claimMultiple(\n        IMultipleMerkleDistributor[] calldata _distributors,\n        IMultipleMerkleDistributor.Claims[][] calldata _claims\n    ) external {\n        require(_distributors.length == _claims.length, \"BatchClaimer: invalid input\");\n        for (uint256 i = 0; i < _distributors.length; i++) {\n            _distributors[i].claimMultiple(_claims[i]);\n        }\n    }\n}\n"
    },
    "contracts/MultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./utils/Owned.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\nimport \"./interfaces/IMultipleMerkleDistributor.sol\";\n\n/// @title Kwenta MultipleMerkleDistributor\n/// @author JaredBorders and JChiaramonte7\n/// @notice Facilitates trading incentives distribution over multiple periods.\ncontract MultipleMerkleDistributor is IMultipleMerkleDistributor, Owned {\n    using SafeERC20 for IERC20;\n    /// @inheritdoc IMultipleMerkleDistributor\n    address public immutable override token;\n\n    /// @inheritdoc IMultipleMerkleDistributor\n    mapping(uint256 => bytes32) public override merkleRoots;\n\n    /// @notice an epoch to packed array of claimed booleans mapping\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMaps;\n\n    /// @notice set addresses ERC20 contract\n    /// Establish merkle root for verification\n    /// @param _owner: designated owner of this contract\n    /// @param _token: address of erc20 token to be distributed\n    constructor(address _owner, address _token) Owned(_owner) {\n        token = _token;\n    }\n\n    /// @inheritdoc IMultipleMerkleDistributor\n    function setMerkleRootForEpoch(bytes32 merkleRoot, uint256 epoch)\n        external\n        override\n        onlyOwner\n    {\n        merkleRoots[epoch] = merkleRoot;\n        emit MerkleRootModified(epoch);\n    }\n\n    /// @inheritdoc IMultipleMerkleDistributor\n    function isClaimed(uint256 index, uint256 epoch)\n        public\n        view\n        override\n        returns (bool)\n    {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMaps[epoch][claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    /// @notice set claimed status for indexed claim to true\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index to check\n    function _setClaimed(uint256 index, uint256 epoch) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMaps[epoch][claimedWordIndex] =\n            claimedBitMaps[epoch][claimedWordIndex] |\n            (1 << claimedBitIndex);\n    }\n\n    /// @inheritdoc IMultipleMerkleDistributor\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) public override {\n        require(\n            !isClaimed(index, epoch),\n            \"MultipleMerkleDistributor: Drop already claimed.\"\n        );\n\n        // verify the merkle proof\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(\n            MerkleProof.verify(merkleProof, merkleRoots[epoch], node),\n            \"MultipleMerkleDistributor: Invalid proof.\"\n        );\n\n        // mark it claimed and send the token\n        _setClaimed(index, epoch);\n        IERC20(token).safeTransfer(account, amount);\n\n        emit Claimed(index, account, amount, epoch);\n    }\n\n    /// @inheritdoc IMultipleMerkleDistributor\n    function claimMultiple(Claims[] calldata claims) external override {\n        uint256 cacheLength = claims.length;\n        for (uint256 i = 0; i < cacheLength; ) {\n            claim(\n                claims[i].index,\n                claims[i].account,\n                claims[i].amount,\n                claims[i].merkleProof,\n                claims[i].epoch\n            );\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/RewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n// Inheritance\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\n\n// Libraries\nimport \"./libraries/SafeDecimalMath.sol\";\n\n// Internal references\nimport \"./interfaces/IKwenta.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\n\ncontract RewardEscrow is Owned, IRewardEscrow {\n    using SafeDecimalMath for uint;\n\n    /* ========== CONSTANTS/IMMUTABLES ========== */\n\n    /* Max escrow duration */\n    uint public constant MAX_DURATION = 2 * 52 weeks; // Default max 2 years duration\n\n    IKwenta private immutable kwenta;\n\n    /* ========== STATE VARIABLES ========== */\n\n    IStakingRewards public stakingRewards;\n\n    mapping(address => mapping(uint256 => VestingEntries.VestingEntry)) public vestingSchedules;\n\n    mapping(address => uint256[]) public accountVestingEntryIDs;\n\n    // Counter for new vesting entry ids \n    uint256 public nextEntryId;\n\n    // An account's total escrowed KWENTA balance to save recomputing this for fee extraction purposes\n    mapping(address => uint256) override public totalEscrowedAccountBalance;\n\n    // An account's total vested reward KWENTA \n    mapping(address => uint256) override public totalVestedAccountBalance;\n\n    // The total remaining escrowed balance, for verifying the actual KWENTA balance of this contract against\n    uint256 public totalEscrowedBalance;\n\n    // notice treasury address may change\n    address public treasuryDAO;\n\n    /* ========== MODIFIERS ========== */\n    modifier onlyStakingRewards() {\n        require(msg.sender == address(stakingRewards), \"Only the StakingRewards can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n    event Vested(address indexed beneficiary, uint value);\n    event VestingEntryCreated(address indexed beneficiary, uint value, uint duration, uint entryID);\n    event StakingRewardsSet(address stakingRewards);\n    event TreasuryDAOSet(address treasuryDAO);\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _owner, address _kwenta) Owned(_owner) {\n        nextEntryId = 1;\n\n        // set the Kwenta contract address as we need to transfer KWENTA when the user vests\n        kwenta = IKwenta(_kwenta);\n    }\n\n    /* ========== SETTERS ========== */\n\n    /*\n    * @notice Function used to define the StakingRewards to use\n    */\n    function setStakingRewards(address _stakingRewards) public onlyOwner {\n        require(address(stakingRewards) == address(0), \"Staking Rewards already set\");\n        stakingRewards = IStakingRewards(_stakingRewards);\n        emit StakingRewardsSet(address(_stakingRewards));\n    }\n\n    /// @notice set treasuryDAO address\n    /// @dev only owner may change address\n    function setTreasuryDAO(address _treasuryDAO) external onlyOwner {\n        require(_treasuryDAO != address(0), \"RewardEscrow: Zero Address\");\n        treasuryDAO = _treasuryDAO;\n        emit TreasuryDAOSet(treasuryDAO);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice helper function to return kwenta address\n     */\n    function getKwentaAddress() override external view returns (address) {\n        return address(kwenta);\n    }\n\n    /**\n     * @notice A simple alias to totalEscrowedAccountBalance: provides ERC20 balance integration.\n     */\n    function balanceOf(address account) override public view returns (uint) {\n        return totalEscrowedAccountBalance[account];\n    }\n\n    /**\n     * @notice The number of vesting dates in an account's schedule.\n     */\n    function numVestingEntries(address account) override external view returns (uint) {\n        return accountVestingEntryIDs[account].length;\n    }\n\n    /**\n     * @notice Get a particular schedule entry for an account.\n     * @return endTime the vesting entry object \n     * @return escrowAmount rate per second emission.\n     */\n    function getVestingEntry(address account, uint256 entryID) override external view returns (uint64 endTime, uint256 escrowAmount, uint256 duration) {\n        endTime = vestingSchedules[account][entryID].endTime;\n        escrowAmount = vestingSchedules[account][entryID].escrowAmount;\n        duration = vestingSchedules[account][entryID].duration;\n    }\n\n    function getVestingSchedules(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) override external view returns (VestingEntries.VestingEntryWithID[] memory) {\n        uint256 endIndex = index + pageSize;\n\n        // If index starts after the endIndex return no results\n        if (endIndex <= index) {\n            return new VestingEntries.VestingEntryWithID[](0);\n        }\n\n        // If the page extends past the end of the accountVestingEntryIDs, truncate it.\n        if (endIndex > accountVestingEntryIDs[account].length) {\n            endIndex = accountVestingEntryIDs[account].length;\n        }\n\n        uint256 n = endIndex - index;\n        VestingEntries.VestingEntryWithID[] memory vestingEntries = new VestingEntries.VestingEntryWithID[](n);\n        for (uint256 i; i < n; i++) {\n            uint256 entryID = accountVestingEntryIDs[account][i + index];\n\n            VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryID];\n\n            vestingEntries[i] = VestingEntries.VestingEntryWithID({\n                endTime: uint64(entry.endTime),\n                escrowAmount: entry.escrowAmount,\n                entryID: entryID\n            });\n        }\n        return vestingEntries;\n    }\n\n    function getAccountVestingEntryIDs(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) override external view returns (uint256[] memory) {\n        uint256 endIndex = index + pageSize;\n\n        // If the page extends past the end of the accountVestingEntryIDs, truncate it.\n        if (endIndex > accountVestingEntryIDs[account].length) {\n            endIndex = accountVestingEntryIDs[account].length;\n        }\n        if (endIndex <= index) {\n            return new uint256[](0);\n        }\n\n        uint256 n = endIndex - index;\n        uint256[] memory page = new uint256[](n);\n        for (uint256 i; i < n; i++) {\n            page[i] = accountVestingEntryIDs[account][i + index];\n        }\n        return page;\n    }\n\n    function getVestingQuantity(address account, uint256[] calldata entryIDs) override external view returns (uint total, uint totalFee) {\n        for (uint i = 0; i < entryIDs.length; i++) {\n            VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryIDs[i]];\n\n            /* Skip entry if escrowAmount == 0 */\n            if (entry.escrowAmount != 0) {\n                (uint256 quantity, uint256 fee) = _claimableAmount(entry);\n\n                /* add quantity to total */\n                total += quantity;\n                totalFee += fee;\n            }\n        }\n    }\n\n    function getVestingEntryClaimable(address account, uint256 entryID) override external view returns (uint quantity, uint fee) {\n        VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryID];\n        (quantity, fee) = _claimableAmount(entry);\n    }\n\n    function _claimableAmount(VestingEntries.VestingEntry memory _entry) internal view returns (uint256 quantity, uint256 fee) {\n        uint256 escrowAmount = _entry.escrowAmount;\n\n        if (escrowAmount != 0) {\n            /* Full escrow amounts claimable if block.timestamp equal to or after entry endTime */\n            if (block.timestamp >= _entry.endTime) {\n                quantity = escrowAmount;\n            } else {\n                fee = _earlyVestFee(_entry);\n                quantity = escrowAmount - fee;\n            }\n        }\n    }\n\n    function _earlyVestFee(VestingEntries.VestingEntry memory _entry) internal view returns (uint256 earlyVestFee) {\n        uint timeUntilVest = _entry.endTime - block.timestamp;\n        // Fee starts at 90% and falls linearly\n        uint initialFee = _entry.escrowAmount * 9 / 10;\n        earlyVestFee = initialFee * timeUntilVest / _entry.duration;\n    }\n\n    function _isEscrowStaked(address _account) internal view returns (bool) {\n        return stakingRewards.escrowedBalanceOf(_account) > 0;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * Vest escrowed amounts that are claimable\n     * Allows users to vest their vesting entries based on msg.sender\n     */\n\n    function vest(uint256[] calldata entryIDs) override external {\n        uint256 total;\n        uint256 totalFee;\n        for (uint i = 0; i < entryIDs.length; i++) {\n            VestingEntries.VestingEntry storage entry = vestingSchedules[msg.sender][entryIDs[i]];\n\n            /* Skip entry if escrowAmount == 0 already vested */\n            if (entry.escrowAmount != 0) {\n                (uint256 quantity, uint256 fee) = _claimableAmount(entry);\n\n                /* update entry to remove escrowAmount */\n                entry.escrowAmount = 0;\n\n                /* add quantity to total */\n                total += quantity;\n                totalFee += fee;\n            }\n        }\n\n        /* Transfer vested tokens. Will revert if total > totalEscrowedAccountBalance */\n        if (total != 0) {\n            // Withdraw staked escrowed kwenta if needed for reward\n            if (_isEscrowStaked(msg.sender)) {\n                uint totalWithFee = total + totalFee;\n                uint unstakedEscrow = totalEscrowedAccountBalance[msg.sender] - stakingRewards.escrowedBalanceOf(msg.sender);\n                if (totalWithFee > unstakedEscrow) {\n                    uint amountToUnstake = totalWithFee - unstakedEscrow;\n                    unstakeEscrow(amountToUnstake);\n                }\n            }\n\n            // Send any fee to Treasury\n            if (totalFee != 0) {\n                _reduceAccountEscrowBalances(msg.sender, totalFee);\n                require(\n                    IKwenta(address(kwenta))\n                        .transfer(treasuryDAO, totalFee), \n                        \"RewardEscrow: Token Transfer Failed\"\n                );\n            }\n\n            // Transfer kwenta\n            _transferVestedTokens(msg.sender, total);\n        }\n        \n    }\n\n    /**\n     * @notice Create an escrow entry to lock KWENTA for a given duration in seconds\n     * @dev This call expects that the depositor (msg.sender) has already approved the Reward escrow contract\n     * to spend the the amount being escrowed.\n     */\n    function createEscrowEntry(\n        address beneficiary,\n        uint256 deposit,\n        uint256 duration\n    ) override external {\n        require(beneficiary != address(0), \"Cannot create escrow with address(0)\");\n\n        /* Transfer KWENTA from msg.sender */\n        require(kwenta.transferFrom(msg.sender, address(this), deposit), \"Token transfer failed\");\n\n        /* Append vesting entry for the beneficiary address */\n        _appendVestingEntry(beneficiary, deposit, duration);\n    }\n\n    /**\n     * @notice Add a new vesting entry at a given time and quantity to an account's schedule.\n     * @dev A call to this should accompany a previous successful call to kwenta.transfer(rewardEscrow, amount),\n     * to ensure that when the funds are withdrawn, there is enough balance.\n     * @param account The account to append a new vesting entry to.\n     * @param quantity The quantity of KWENTA that will be escrowed.\n     * @param duration The duration that KWENTA will be emitted.\n     */\n    function appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) override external onlyStakingRewards {\n        _appendVestingEntry(account, quantity, duration);\n    }\n\n    /**\n     * @notice Stakes escrowed KWENTA.\n     * @dev No tokens are transfered during this process, but the StakingRewards escrowed balance is updated.\n     * @param _amount The amount of escrowed KWENTA to be staked.\n     */\n    function stakeEscrow(uint256 _amount) override external {\n        require(_amount + stakingRewards.escrowedBalanceOf(msg.sender) <= totalEscrowedAccountBalance[msg.sender], \"Insufficient unstaked escrow\");\n        stakingRewards.stakeEscrow(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Unstakes escrowed KWENTA.\n     * @dev No tokens are transfered during this process, but the StakingRewards escrowed balance is updated.\n     * @param _amount The amount of escrowed KWENTA to be unstaked.\n     */\n    function unstakeEscrow(uint256 _amount) override public {\n        stakingRewards.unstakeEscrow(msg.sender, _amount);\n    }\n\n    /* Transfer vested tokens and update totalEscrowedAccountBalance, totalVestedAccountBalance */\n    function _transferVestedTokens(address _account, uint256 _amount) internal {\n        _reduceAccountEscrowBalances(_account, _amount);\n        totalVestedAccountBalance[_account] += _amount;\n        kwenta.transfer(_account, _amount);\n        emit Vested(_account, _amount);\n    }\n\n    function _reduceAccountEscrowBalances(address _account, uint256 _amount) internal {\n        // Reverts if amount being vested is greater than the account's existing totalEscrowedAccountBalance\n        totalEscrowedBalance -= _amount;\n        totalEscrowedAccountBalance[_account] -= _amount;\n    }\n\n    /* ========== INTERNALS ========== */\n\n    function _appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) internal {\n        /* No empty or already-passed vesting entries allowed. */\n        require(quantity != 0, \"Quantity cannot be zero\");\n        require(duration > 0 && duration <= MAX_DURATION, \"Cannot escrow with 0 duration OR above max_duration\");\n\n        /* There must be enough balance in the contract to provide for the vesting entry. */\n        totalEscrowedBalance += quantity;\n\n        require(\n            totalEscrowedBalance <= kwenta.balanceOf(address(this)),\n            \"Must be enough balance in the contract to provide for the vesting entry\"\n        );\n\n        /* Escrow the tokens for duration. */\n        uint endTime = block.timestamp + duration;\n\n        /* Add quantity to account's escrowed balance */\n        totalEscrowedAccountBalance[account] += quantity;\n\n        uint entryID = nextEntryId;\n        vestingSchedules[account][entryID] = VestingEntries.VestingEntry({endTime: uint64(endTime), escrowAmount: quantity, duration: duration});\n\n        accountVestingEntryIDs[account].push(entryID);\n\n        /* Increment the next entry id. */\n        nextEntryId++;\n\n        emit VestingEntryCreated(account, quantity, duration, entryID);\n    }\n}\n"
    },
    "contracts/RewardEscrowV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n// Inheritance\nimport {IRewardEscrowV2} from \"./interfaces/IRewardEscrowV2.sol\";\nimport {ERC721EnumerableUpgradeable} from\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\";\nimport {Ownable2StepUpgradeable} from\n    \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport {PausableUpgradeable} from\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\n// Internal references\nimport {IKwenta} from \"./interfaces/IKwenta.sol\";\nimport {IStakingRewardsV2} from \"./interfaces/IStakingRewardsV2.sol\";\nimport {IEscrowMigrator} from \"./interfaces/IEscrowMigrator.sol\";\n\n/// @title KWENTA Reward Escrow V2\n/// @author Originally inspired by SYNTHETIX RewardEscrow\n/// @author Kwenta's RewardEscrow V1 by JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\n/// @author RewardEscrowV2 by tommyrharper (tom@zkconsulting.xyz)\n/// @notice Updated version of Synthetix's RewardEscrow with new features specific to Kwenta\ncontract RewardEscrowV2 is\n    IRewardEscrowV2,\n    ERC721EnumerableUpgradeable,\n    Ownable2StepUpgradeable,\n    PausableUpgradeable,\n    UUPSUpgradeable\n{\n    /*///////////////////////////////////////////////////////////////\n                        CONSTANTS/IMMUTABLES\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Max escrow duration\n    /// @dev WARNING: updating this value to less than 2 years will allow this check to be bypassed\n    /// via the escrow migrator contract, by creating V1 escrow entries and migrating them to V2\n    uint256 public constant MAX_DURATION = 4 * 52 weeks; // Default max 4 years duration\n\n    /// @notice Min escrow duration\n    uint256 public constant DEFAULT_DURATION = 52 weeks; // Default 1 year duration\n\n    /// @notice Default early vesting fee - used for new vesting entries from staking rewards\n    uint256 public constant DEFAULT_EARLY_VESTING_FEE = 90; // Default 90 percent\n\n    /// @notice Maximum early vesting fee - cannot be higher than 100%\n    /// @dev WARNING: Updating this value to below 90 will be able to be bypassed via importEscrowEntry\n    /// through the EscrowMigrator contract\n    uint256 public constant MAXIMUM_EARLY_VESTING_FEE = 100;\n\n    /// @inheritdoc IRewardEscrowV2\n    /// @dev WARNING: see warning in IRewardEscrowV2 if planning on changing this value\n    uint256 public constant MINIMUM_EARLY_VESTING_FEE = 50;\n\n    /// @notice Contract for KWENTA ERC20 token\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IKwenta public immutable kwenta;\n\n    /// @notice RewardsNotifier address\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address public immutable rewardsNotifier;\n\n    /*///////////////////////////////////////////////////////////////\n                                STATE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Contract for StakingRewardsV2\n    IStakingRewardsV2 public stakingRewards;\n\n    /// @notice Contract for EscrowMigrator\n    IEscrowMigrator public escrowMigrator;\n\n    /// @notice treasury address - this may change\n    address public treasuryDAO;\n\n    ///@notice mapping of entryIDs to vesting entries\n    mapping(uint256 => VestingEntryPacked) public vestingSchedules;\n\n    /// @notice Counter for new vesting entry ids\n    uint256 public nextEntryId;\n\n    /// @notice An account's total escrowed KWENTA balance to save recomputing this for fee extraction purposes\n    mapping(address => uint256) public totalEscrowedAccountBalance;\n\n    /// @notice An account's total vested reward KWENTA\n    mapping(address => uint256) public totalVestedAccountBalance;\n\n    /// @notice The total remaining escrowed balance, for verifying the actual KWENTA balance of this contract against\n    uint256 public totalEscrowedBalance;\n\n    /*///////////////////////////////////////////////////////////////\n                                AUTH\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice Restrict function to only the staking rewards contract\n    modifier onlyStakingRewards() {\n        _onlyStakingRewards();\n        _;\n    }\n\n    function _onlyStakingRewards() internal view {\n        if (msg.sender != address(stakingRewards)) revert OnlyStakingRewards();\n    }\n\n    /// @notice Restrict function to only the escrow migrator contract\n    modifier onlyEscrowMigrator() {\n        if (msg.sender != address(escrowMigrator)) revert OnlyEscrowMigrator();\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        CONSTRUCTOR / INITIALIZER\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev disable default constructor for disable implementation contract\n    /// Actual contract construction will take place in the initialize function via proxy\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    /// @param _kwenta The address for the KWENTA ERC20 token\n    /// @param _rewardsNotifier The address for the StakingRewardsNotifier contract\n    constructor(address _kwenta, address _rewardsNotifier) {\n        if (_kwenta == address(0) || _rewardsNotifier == address(0)) revert ZeroAddress();\n\n        kwenta = IKwenta(_kwenta);\n        rewardsNotifier = _rewardsNotifier;\n\n        _disableInitializers();\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function initialize(address _contractOwner) external initializer {\n        if (_contractOwner == address(0)) revert ZeroAddress();\n\n        // Initialize inherited contracts\n        __ERC721_init(\"Kwenta Reward Escrow\", \"KRE\");\n        __Ownable2Step_init();\n        __Pausable_init();\n        __UUPSUpgradeable_init();\n\n        // transfer ownership\n        _transferOwnership(_contractOwner);\n\n        // define variables\n        nextEntryId = 1;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                SETTERS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IRewardEscrowV2\n    function setStakingRewards(address _stakingRewards) external onlyOwner {\n        if (_stakingRewards == address(0)) revert ZeroAddress();\n        if (address(stakingRewards) != address(0)) revert StakingRewardsAlreadySet();\n\n        stakingRewards = IStakingRewardsV2(_stakingRewards);\n        emit StakingRewardsSet(_stakingRewards);\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function setEscrowMigrator(address _escrowMigrator) external onlyOwner {\n        if (_escrowMigrator == address(0)) revert ZeroAddress();\n\n        escrowMigrator = IEscrowMigrator(_escrowMigrator);\n        emit EscrowMigratorSet(_escrowMigrator);\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function setTreasuryDAO(address _treasuryDAO) external onlyOwner {\n        if (_treasuryDAO == address(0)) revert ZeroAddress();\n        treasuryDAO = _treasuryDAO;\n        emit TreasuryDAOSet(treasuryDAO);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                VIEWS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IRewardEscrowV2\n    function getKwentaAddress() external view returns (address) {\n        return address(kwenta);\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function escrowedBalanceOf(address _account) external view returns (uint256) {\n        return totalEscrowedAccountBalance[_account];\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function unstakedEscrowedBalanceOf(address _account) public view returns (uint256) {\n        return totalEscrowedAccountBalance[_account] - stakingRewards.escrowedBalanceOf(_account);\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function getVestingEntry(uint256 _entryID)\n        external\n        view\n        returns (uint256 endTime, uint256 escrowAmount, uint256 duration, uint256 earlyVestingFee)\n    {\n        VestingEntryPacked storage entry = vestingSchedules[_entryID];\n        endTime = entry.endTime;\n        escrowAmount = entry.escrowAmount;\n        duration = entry.duration;\n        earlyVestingFee = entry.earlyVestingFee;\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function getVestingSchedules(address _account, uint256 _index, uint256 _pageSize)\n        external\n        view\n        returns (VestingEntryWithID[] memory)\n    {\n        if (_pageSize == 0) {\n            return new VestingEntryWithID[](0);\n        }\n\n        uint256 endIndex = _index + _pageSize;\n\n        // If the page extends past the end of the list, truncate it.\n        uint256 numEntries = balanceOf(_account);\n        if (endIndex > numEntries) {\n            endIndex = numEntries;\n        }\n\n        if (endIndex < _index) return new VestingEntryWithID[](0);\n\n        uint256 n;\n        unchecked {\n            n = endIndex - _index;\n        }\n\n        VestingEntryWithID[] memory vestingEntries = new VestingEntryWithID[](\n            n\n        );\n        for (uint256 i; i < n;) {\n            uint256 entryID;\n\n            unchecked {\n                entryID = tokenOfOwnerByIndex(_account, i + _index);\n            }\n\n            VestingEntryPacked storage entry = vestingSchedules[entryID];\n\n            vestingEntries[i] = VestingEntryWithID({\n                endTime: entry.endTime,\n                escrowAmount: entry.escrowAmount,\n                entryID: entryID\n            });\n\n            unchecked {\n                ++i;\n            }\n        }\n        return vestingEntries;\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function getAccountVestingEntryIDs(address _account, uint256 _index, uint256 _pageSize)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        uint256 endIndex = _index + _pageSize;\n\n        // If the page extends past the end of the list, truncate it.\n        uint256 numEntries = balanceOf(_account);\n        if (endIndex > numEntries) {\n            endIndex = numEntries;\n        }\n        if (endIndex <= _index) {\n            return new uint256[](0);\n        }\n\n        uint256 n = endIndex - _index;\n        uint256[] memory page = new uint256[](n);\n        for (uint256 i; i < n;) {\n            unchecked {\n                page[i] = tokenOfOwnerByIndex(_account, i + _index);\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        return page;\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function getVestingQuantity(uint256[] calldata _entryIDs)\n        external\n        view\n        returns (uint256 total, uint256 totalFee)\n    {\n        uint256 entryIDsLength = _entryIDs.length;\n        for (uint256 i = 0; i < entryIDsLength;) {\n            VestingEntry memory entry = _unpackVestingEntryStruct(_entryIDs[i]);\n\n            (uint256 quantity, uint256 fee) = _claimableAmount(entry);\n\n            // add quantity to total\n            total += quantity;\n            totalFee += fee;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function getVestingEntryClaimable(uint256 _entryID)\n        external\n        view\n        returns (uint256 quantity, uint256 fee)\n    {\n        VestingEntry memory entry = _unpackVestingEntryStruct(_entryID);\n        (quantity, fee) = _claimableAmount(entry);\n    }\n\n    function _claimableAmount(VestingEntry memory _entry)\n        internal\n        view\n        returns (uint256 quantity, uint256 fee)\n    {\n        uint256 escrowAmount = _entry.escrowAmount;\n\n        // Full escrow amounts claimable if block.timestamp equal to or after entry endTime\n        if (block.timestamp >= _entry.endTime) {\n            quantity = escrowAmount;\n        } else {\n            fee = _earlyVestFee(_entry);\n            quantity = escrowAmount - fee;\n        }\n    }\n\n    function _earlyVestFee(VestingEntry memory _entry)\n        internal\n        view\n        returns (uint256 earlyVestFee)\n    {\n        uint256 timeUntilVest = _entry.endTime - block.timestamp;\n        // Fee starts by default at 90% (but could be any percentage) and falls linearly\n        earlyVestFee =\n            (_entry.escrowAmount * _entry.earlyVestingFee * timeUntilVest) / (100 * _entry.duration);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            MUTATIVE FUNCTIONS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IRewardEscrowV2\n    function vest(uint256[] calldata _entryIDs) external whenNotPaused {\n        uint256 total;\n        uint256 totalFee;\n        uint256 entryIDsLength = _entryIDs.length;\n        for (uint256 i = 0; i < entryIDsLength; ++i) {\n            uint256 entryID = _entryIDs[i];\n            if (_ownerOf(entryID) != msg.sender) {\n                continue;\n            }\n\n            (uint256 quantity, uint256 fee) = _claimableAmount(_unpackVestingEntryStruct(entryID));\n\n            // update entry to remove escrowAmount\n            vestingSchedules[entryID].escrowAmount = 0;\n            _burn(entryID);\n\n            // add quantity to total\n            total += quantity;\n            totalFee += fee;\n        }\n\n        // Transfer vested tokens\n        uint256 totalWithFee = total + totalFee;\n        if (totalWithFee != 0) {\n            // Unstake staked escrowed kwenta if needed for reward/fee\n            uint256 unstakedEscrow = unstakedEscrowedBalanceOf(msg.sender);\n            if (totalWithFee > unstakedEscrow) {\n                uint256 amountToUnstake;\n                unchecked {\n                    amountToUnstake = totalWithFee - unstakedEscrow;\n                }\n                stakingRewards.unstakeEscrowSkipCooldown(msg.sender, amountToUnstake);\n            }\n\n            // update balances\n            totalEscrowedBalance -= totalWithFee;\n            totalEscrowedAccountBalance[msg.sender] -= totalWithFee;\n            totalVestedAccountBalance[msg.sender] += total;\n\n            // Send 50% any fee to Treasury and\n            // 50% to RewardsNotifier\n            // UNLESS Distributor isn't set\n            // then send all funds to Treasury\n            if (totalFee != 0) {\n                /// @dev this will revert if the kwenta token transfer fails\n                uint256 amountToTreasury = totalFee / 2;\n                uint256 amountToNotifier = totalFee - amountToTreasury;\n                kwenta.transfer(treasuryDAO, amountToTreasury);\n                kwenta.transfer(rewardsNotifier, amountToNotifier);\n                emit EarlyVestFeeSent(amountToTreasury, amountToNotifier);\n            }\n\n            if (total != 0) {\n                // Transfer kwenta\n                /// @dev this will revert if the kwenta token transfer fails\n                kwenta.transfer(msg.sender, total);\n            }\n\n            // trigger event\n            emit Vested(msg.sender, total);\n        }\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function importEscrowEntry(address _account, VestingEntry memory _entry)\n        external\n        onlyEscrowMigrator\n    {\n        _mint(\n            _account, _entry.endTime, _entry.escrowAmount, _entry.duration, _entry.earlyVestingFee\n        );\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function createEscrowEntry(\n        address _beneficiary,\n        uint256 _deposit,\n        uint256 _duration,\n        uint256 _earlyVestingFee\n    ) external {\n        if (_beneficiary == address(0)) revert ZeroAddress();\n        if (_earlyVestingFee > MAXIMUM_EARLY_VESTING_FEE) revert EarlyVestingFeeTooHigh();\n        if (_earlyVestingFee < MINIMUM_EARLY_VESTING_FEE) revert EarlyVestingFeeTooLow();\n        if (_deposit == 0) revert ZeroAmount();\n        uint256 minimumDuration = stakingRewards.cooldownPeriod();\n        if (_duration < minimumDuration || _duration > MAX_DURATION) revert InvalidDuration();\n\n        /// @dev this will revert if the kwenta token transfer fails\n        kwenta.transferFrom(msg.sender, address(this), _deposit);\n\n        // Escrow the tokens for duration.\n        uint256 endTime = block.timestamp + _duration;\n\n        // Append vesting entry for the beneficiary address\n        _mint(_beneficiary, endTime, _deposit, _duration, _earlyVestingFee);\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function appendVestingEntry(address _account, uint256 _quantity) external onlyStakingRewards {\n        // Escrow the tokens for duration.\n        uint256 endTime = block.timestamp + DEFAULT_DURATION;\n\n        _mint(_account, endTime, _quantity, DEFAULT_DURATION, DEFAULT_EARLY_VESTING_FEE);\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function bulkTransferFrom(address _from, address _to, uint256[] calldata _entryIDs)\n        external\n        whenNotPaused\n    {\n        if (_from == _to) revert CannotTransferToSelf();\n\n        uint256 totalEscrowTransferred;\n        uint256 entryIDsLength = _entryIDs.length;\n        for (uint256 i = 0; i < entryIDsLength;) {\n            uint256 entryID = _entryIDs[i];\n            // sum totalEscrowTransferred so that _applyTransferBalanceUpdates can be applied only once to save gas\n            totalEscrowTransferred += uint256(vestingSchedules[entryID].escrowAmount);\n\n            _checkApproved(entryID);\n            // use super._transfer to avoid double updating of balances\n            super._transfer(_from, _to, entryID);\n            unchecked {\n                ++i;\n            }\n        }\n\n        // update balances all at once\n        _applyTransferBalanceUpdates(_from, _to, totalEscrowTransferred);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                INTERNALS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev override the internal _transfer function to ensure vestingSchedules and account balances are updated\n    /// and that there is sufficient unstaked escrow for a transfer when transferFrom and safeTransferFrom are called\n    function _transfer(address _from, address _to, uint256 _entryID)\n        internal\n        override\n        whenNotPaused\n    {\n        uint256 escrowAmount = vestingSchedules[_entryID].escrowAmount;\n\n        _applyTransferBalanceUpdates(_from, _to, escrowAmount);\n\n        super._transfer(_from, _to, _entryID);\n    }\n\n    function _applyTransferBalanceUpdates(address _from, address _to, uint256 _escrowAmount)\n        internal\n    {\n        uint256 unstakedEscrow = unstakedEscrowedBalanceOf(_from);\n        if (unstakedEscrow < _escrowAmount) {\n            revert InsufficientUnstakedBalance(_escrowAmount, unstakedEscrow);\n        }\n\n        unchecked {\n            totalEscrowedAccountBalance[_from] -= _escrowAmount;\n        }\n        totalEscrowedAccountBalance[_to] += _escrowAmount;\n    }\n\n    function _checkApproved(uint256 _entryID) internal view {\n        /// @dev not using a custom error to keep consistency with OpenZeppelin errors\n        require(\n            _isApprovedOrOwner(_msgSender(), _entryID),\n            \"ERC721: caller is not token owner or approved\"\n        );\n    }\n\n    function _mint(\n        address _account,\n        uint256 _endTime,\n        uint256 _quantity,\n        uint256 _duration,\n        uint256 _earlyVestingFee\n    ) internal whenNotPaused {\n        // There must be enough balance in the contract to provide for the vesting entry.\n        totalEscrowedBalance += _quantity;\n        assert(kwenta.balanceOf(address(this)) >= totalEscrowedBalance);\n\n        // Add quantity to account's escrowed balance\n        totalEscrowedAccountBalance[_account] += _quantity;\n\n        uint256 entryID = nextEntryId;\n        vestingSchedules[entryID] = VestingEntryPacked({\n            endTime: uint64(_endTime),\n            escrowAmount: uint144(_quantity),\n            duration: uint40(_duration),\n            earlyVestingFee: uint8(_earlyVestingFee)\n        });\n\n        // Increment the next entry id.\n        unchecked {\n            ++nextEntryId;\n        }\n\n        emit VestingEntryCreated(_account, _quantity, _duration, entryID, _earlyVestingFee);\n\n        super._mint(_account, entryID);\n    }\n\n    function _unpackVestingEntryStruct(uint256 _entryID)\n        internal\n        view\n        returns (VestingEntry memory vestingEntry)\n    {\n        VestingEntryPacked storage entry = vestingSchedules[_entryID];\n        vestingEntry = VestingEntry({\n            endTime: entry.endTime,\n            escrowAmount: entry.escrowAmount,\n            duration: entry.duration,\n            earlyVestingFee: entry.earlyVestingFee\n        });\n    }\n\n    function _authorizeUpgrade(address _newImplementation) internal override onlyOwner {}\n\n    /*///////////////////////////////////////////////////////////////\n                                PAUSABLE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IRewardEscrowV2\n    function pauseRewardEscrow() external onlyOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IRewardEscrowV2\n    function unpauseRewardEscrow() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\nimport \"./interfaces/ISupplySchedule.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\n\n/// @title KWENTA Staking Rewards\n/// @author SYNTHETIX, JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\n/// @notice Updated version of Synthetix's StakingRewards with new features specific\n/// to Kwenta\ncontract StakingRewards is IStakingRewards, Owned, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n\n    /*///////////////////////////////////////////////////////////////\n                                CONSTANTS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice token used for BOTH staking and rewards\n    IERC20 public immutable token;\n\n    /// @notice escrow contract which holds (and may stake) reward tokens\n    IRewardEscrow public immutable rewardEscrow;\n\n    /// @notice handles reward token minting logic\n    ISupplySchedule public immutable supplySchedule;\n\n    /*///////////////////////////////////////////////////////////////\n                                STATE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice number of tokens staked by address\n    /// @dev this includes escrowed tokens stake\n    mapping(address => uint256) private balances;\n\n    /// @notice number of staked escrow tokens by address\n    mapping(address => uint256) private escrowedBalances;\n\n    /// @notice total number of tokens staked in this contract\n    uint256 private _totalSupply;\n\n    /// @notice marks applicable reward period finish time\n    uint256 public periodFinish = 0;\n\n    /// @notice amount of tokens minted per second\n    uint256 public rewardRate = 0;\n\n    /// @notice period for rewards\n    uint256 public rewardsDuration = 7 days;\n\n    /// @notice track last time the rewards were updated\n    uint256 public lastUpdateTime;\n\n    /// @notice summation of rewardRate divided by total staked tokens\n    uint256 public rewardPerTokenStored;\n\n    /// @notice represents the rewardPerToken\n    /// value the last time the stake calculated earned() rewards\n    mapping(address => uint256) public userRewardPerTokenPaid;\n\n    /// @notice track rewards for a given user which changes when\n    /// a user stakes, unstakes, or claims rewards\n    mapping(address => uint256) public rewards;\n\n    /*///////////////////////////////////////////////////////////////\n                                EVENTS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice update reward rate\n    /// @param reward: amount to be distributed over applicable rewards duration\n    event RewardAdded(uint256 reward);\n\n    /// @notice emitted when user stakes tokens\n    /// @param user: staker address\n    /// @param amount: amount staked\n    event Staked(address indexed user, uint256 amount);\n\n    /// @notice emitted when user unstakes tokens\n    /// @param user: address of user unstaking\n    /// @param amount: amount unstaked\n    event Unstaked(address indexed user, uint256 amount);\n\n    /// @notice emitted when escrow staked\n    /// @param user: owner of escrowed tokens address\n    /// @param amount: amount staked\n    event EscrowStaked(address indexed user, uint256 amount);\n\n    /// @notice emitted when staked escrow tokens are unstaked\n    /// @param user: owner of escrowed tokens address\n    /// @param amount: amount unstaked\n    event EscrowUnstaked(address user, uint256 amount);\n\n    /// @notice emitted when user claims rewards\n    /// @param user: address of user claiming rewards\n    /// @param reward: amount of reward token claimed\n    event RewardPaid(address indexed user, uint256 reward);\n\n    /// @notice emitted when rewards duration changes\n    /// @param newDuration: denoted in seconds\n    event RewardsDurationUpdated(uint256 newDuration);\n\n    /// @notice emitted when tokens are recovered from this contract\n    /// @param token: address of token recovered\n    /// @param amount: amount of token recovered\n    event Recovered(address token, uint256 amount);\n\n    /*///////////////////////////////////////////////////////////////\n                                AUTH\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice access control modifier for rewardEscrow\n    modifier onlyRewardEscrow() {\n        require(\n            msg.sender == address(rewardEscrow),\n            \"StakingRewards: Only Reward Escrow\"\n        );\n        _;\n    }\n\n    /// @notice access control modifier for rewardEscrow\n    modifier onlySupplySchedule() {\n        require(\n            msg.sender == address(supplySchedule),\n            \"StakingRewards: Only Supply Schedule\"\n        );\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            CONSTRUCTOR\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice configure StakingRewards state\n    /// @dev owner set to address that deployed StakingRewards\n    /// @param _token: token used for staking and for rewards\n    /// @param _rewardEscrow: escrow contract which holds (and may stake) reward tokens\n    /// @param _supplySchedule: handles reward token minting logic\n    constructor(\n        address _token,\n        address _rewardEscrow,\n        address _supplySchedule\n    ) Owned(msg.sender) {\n        // define reward/staking token\n        token = IERC20(_token);\n\n        // define contracts which will interact with StakingRewards\n        rewardEscrow = IRewardEscrow(_rewardEscrow);\n        supplySchedule = ISupplySchedule(_supplySchedule);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                VIEWS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev returns staked tokens which will likely not be equal to total tokens\n    /// in the contract since reward and staking tokens are the same\n    /// @return total amount of tokens that are being staked\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @param account: address of potential staker\n    /// @return amount of tokens staked by account\n    function balanceOf(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[account];\n    }\n\n    /// @notice Getter function for number of staked escrow tokens\n    /// @param account address to check the escrowed tokens staked\n    /// @return amount of escrowed tokens staked\n    function escrowedBalanceOf(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return escrowedBalances[account];\n    }\n\n    /// @return rewards for the duration specified by rewardsDuration\n    function getRewardForDuration() external view override returns (uint256) {\n        return rewardRate * rewardsDuration;\n    }\n\n    /// @notice Getter function for number of staked non-escrow tokens\n    /// @param account address to check the non-escrowed tokens staked\n    /// @return amount of non-escrowed tokens staked\n    function nonEscrowedBalanceOf(address account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return balances[account] - escrowedBalances[account];\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            STAKE/UNSTAKE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice stake token\n    /// @param amount: amount to stake\n    /// @dev updateReward() called prior to function logic\n    function stake(uint256 amount)\n        external\n        override\n        nonReentrant\n        whenNotPaused\n        updateReward(msg.sender)\n    {\n        require(amount > 0, \"StakingRewards: Cannot stake 0\");\n\n        // update state\n        _totalSupply += amount;\n        balances[msg.sender] += amount;\n\n        // transfer token to this contract from the caller\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        // emit staking event and index msg.sender\n        emit Staked(msg.sender, amount);\n    }\n\n    /// @notice unstake token\n    /// @param amount: amount to unstake\n    /// @dev updateReward() called prior to function logic\n    function unstake(uint256 amount)\n        public\n        override\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        require(amount > 0, \"StakingRewards: Cannot Unstake 0\");\n        require(\n            amount <= nonEscrowedBalanceOf(msg.sender),\n            \"StakingRewards: Invalid Amount\"\n        );\n\n        // update state\n        _totalSupply -= amount;\n        balances[msg.sender] -= amount;\n\n        // transfer token from this contract to the caller\n        token.safeTransfer(msg.sender, amount);\n\n        // emit unstake event and index msg.sender\n        emit Unstaked(msg.sender, amount);\n    }\n\n    /// @notice stake escrowed token\n    /// @param account: address which owns token\n    /// @param amount: amount to stake\n    /// @dev updateReward() called prior to function logic\n    /// @dev msg.sender NOT used (account is used)\n    function stakeEscrow(address account, uint256 amount)\n        external\n        override\n        whenNotPaused\n        onlyRewardEscrow\n        updateReward(account)\n    {\n        require(amount > 0, \"StakingRewards: Cannot stake 0\");\n\n        // update state\n        balances[account] += amount;\n        escrowedBalances[account] += amount;\n\n        // updates total supply despite no new staking token being transfered.\n        // escrowed tokens are locked in RewardEscrow\n        _totalSupply += amount;\n\n        // emit escrow staking event and index _account\n        emit EscrowStaked(account, amount);\n    }\n\n    /// @notice unstake escrowed token\n    /// @param account: address which owns token\n    /// @param amount: amount to unstake\n    /// @dev updateReward() called prior to function logic\n    /// @dev msg.sender NOT used (account is used)\n    function unstakeEscrow(address account, uint256 amount)\n        external\n        override\n        nonReentrant\n        onlyRewardEscrow\n        updateReward(account)\n    {\n        require(amount > 0, \"StakingRewards: Cannot Unstake 0\");\n        require(\n            escrowedBalances[account] >= amount,\n            \"StakingRewards: Invalid Amount\"\n        );\n\n        // update state\n        balances[account] -= amount;\n        escrowedBalances[account] -= amount;\n\n        // updates total supply despite no new staking token being transfered.\n        // escrowed tokens are locked in RewardEscrow\n        _totalSupply -= amount;\n\n        // emit escrow unstaked event and index account\n        emit EscrowUnstaked(account, amount);\n    }\n\n    /// @notice unstake all available staked non-escrowed tokens and\n    /// claim any rewards\n    function exit() external override {\n        unstake(nonEscrowedBalanceOf(msg.sender));\n        getReward();\n    }    \n\n    /*///////////////////////////////////////////////////////////////\n                            CLAIM REWARDS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice caller claims any rewards generated from staking\n    /// @dev rewards are escrowed in RewardEscrow\n    /// @dev updateReward() called prior to function logic\n    function getReward() public override nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            // update state (first)\n            rewards[msg.sender] = 0;\n\n            // transfer token from this contract to the rewardEscrow\n            // and create a vesting entry for the caller\n            token.safeTransfer(address(rewardEscrow), reward);\n            rewardEscrow.appendVestingEntry(msg.sender, reward, 52 weeks);\n\n            // emit reward claimed event and index msg.sender\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        REWARD UPDATE CALCULATIONS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice update reward state for the account and contract\n    /// @param account: address of account which rewards are being updated for\n    /// @dev contract state not specific to an account will be updated also\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n\n        if (account != address(0)) {\n            // update amount of rewards a user can claim\n            rewards[account] = earned(account);\n\n            // update reward per token staked AT this given time\n            // (i.e. when this user is interacting with StakingRewards)\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    /// @notice calculate running sum of reward per total tokens staked\n    /// at this specific time\n    /// @return running sum of reward per total tokens staked\n    function rewardPerToken() public view override returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n\n        return\n            rewardPerTokenStored +\n            (((lastTimeRewardApplicable() - lastUpdateTime) *\n                rewardRate *\n                1e18) / (_totalSupply));\n    }\n\n    /// @return timestamp of the last time rewards are applicable\n    function lastTimeRewardApplicable() public view override returns (uint256) {\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n    }\n\n    /// @notice determine how much reward token an account has earned thus far\n    /// @param account: address of account earned amount is being calculated for\n    function earned(address account) public view override returns (uint256) {\n        return\n            ((balances[account] *\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\n            rewards[account];\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            SETTINGS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice configure reward rate\n    /// @param reward: amount of token to be distributed over a period\n    /// @dev updateReward() called prior to function logic (with zero address)\n    function notifyRewardAmount(uint256 reward)\n        external\n        override\n        onlySupplySchedule\n        updateReward(address(0))\n    {\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward / rewardsDuration;\n        } else {\n            uint256 remaining = periodFinish - block.timestamp;\n            uint256 leftover = remaining * rewardRate;\n            rewardRate = (reward + leftover) / rewardsDuration;\n        }\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp + rewardsDuration;\n        emit RewardAdded(reward);\n    }\n\n    /// @notice set rewards duration\n    /// @param _rewardsDuration: denoted in seconds\n    function setRewardsDuration(uint256 _rewardsDuration)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            block.timestamp > periodFinish,\n            \"StakingRewards: Previous rewards period must be complete before changing the duration for the new period\"\n        );\n        rewardsDuration = _rewardsDuration;\n        emit RewardsDurationUpdated(rewardsDuration);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            PAUSABLE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev Triggers stopped state\n    function pauseStakingRewards() external override onlyOwner {\n        Pausable._pause();\n    }\n\n    /// @dev Returns to normal state.\n    function unpauseStakingRewards() external override onlyOwner {\n        Pausable._unpause();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            MISCELLANEOUS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice added to support recovering LP Rewards from other systems\n    /// such as BAL to be distributed to holders\n    /// @param tokenAddress: address of token to be recovered\n    /// @param tokenAmount: amount of token to be recovered\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            tokenAddress != address(token),\n            \"StakingRewards: Cannot unstake the staking token\"\n        );\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n}\n"
    },
    "contracts/StakingRewardsNotifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.19;\n\nimport {IStakingRewardsNotifier} from \"./interfaces/IStakingRewardsNotifier.sol\";\nimport {IKwenta} from \"./interfaces/IKwenta.sol\";\nimport {IRewardEscrowV2} from \"./interfaces/IRewardEscrowV2.sol\";\nimport {IStakingRewardsV2} from \"./interfaces/IStakingRewardsV2.sol\";\nimport {ISupplySchedule} from \"./interfaces/ISupplySchedule.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\n\ncontract StakingRewardsNotifier is Ownable2Step, IStakingRewardsNotifier {\n    /*//////////////////////////////////////////////////////////////\n                               IMMUTABLES\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice kwenta interface\n    IKwenta public immutable kwenta;\n\n    /// @notice supply schedule contract\n    ISupplySchedule public immutable supplySchedule;\n\n    /*//////////////////////////////////////////////////////////////\n                                 STATE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice rewards staking contract\n    IStakingRewardsV2 public stakingRewardsV2;\n\n    /*//////////////////////////////////////////////////////////////\n                              CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Constructor function for StakingRewardsNotifier contract\n    /// @param _contractOwner: address of the contract owner\n    /// @param _kwenta: address of the Kwenta contract\n    /// @param _supplySchedule: address of the SupplySchedule contract\n    constructor(address _contractOwner, address _kwenta, address _supplySchedule) {\n        if (_contractOwner == address(0) || _kwenta == address(0) || _supplySchedule == address(0))\n        {\n            revert ZeroAddress();\n        }\n        kwenta = IKwenta(_kwenta);\n        supplySchedule = ISupplySchedule(_supplySchedule);\n\n        // transfer ownership\n        _transferOwnership(_contractOwner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice access control modifier for supplySchedule\n    modifier onlySupplySchedule() {\n        _onlySupplySchedule();\n        _;\n    }\n\n    function _onlySupplySchedule() internal view {\n        if (msg.sender != address(supplySchedule)) revert OnlySupplySchedule();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                SETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IStakingRewardsNotifier\n    function setStakingRewardsV2(address _stakingRewardsV2) external onlyOwner {\n        if (_stakingRewardsV2 == address(0)) revert ZeroAddress();\n        if (address(stakingRewardsV2) != address(0)) revert AlreadySet();\n        stakingRewardsV2 = IStakingRewardsV2(_stakingRewardsV2);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IStakingRewardsNotifier\n    function notifyRewardAmount(uint256 mintedAmount) external onlySupplySchedule {\n        /// @dev delete mintedAmount because it is not used but cannot be removed from the function signature\n        /// as it is called by SupplySchedule which is immutable and expects to pass this value\n        /// instead currentBalance is used\n        delete mintedAmount;\n        uint256 currentBalance = kwenta.balanceOf(address(this));\n        kwenta.transfer(address(stakingRewardsV2), currentBalance);\n        stakingRewardsV2.notifyRewardAmount(currentBalance);\n    }\n}\n"
    },
    "contracts/StakingRewardsV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {PausableUpgradeable} from\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {Ownable2StepUpgradeable} from\n    \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IKwenta} from \"./interfaces/IKwenta.sol\";\nimport {IStakingRewardsV2} from \"./interfaces/IStakingRewardsV2.sol\";\nimport {IStakingRewardsNotifier} from \"./interfaces/IStakingRewardsNotifier.sol\";\nimport {IRewardEscrowV2} from \"./interfaces/IRewardEscrowV2.sol\";\n\n/// @title KWENTA Staking Rewards V2\n/// @author Originally inspired by SYNTHETIX StakingRewards\n/// @author Kwenta's StakingRewards V1 by JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\n/// @author StakingRewardsV2 (this) by tommyrharper (tom@zkconsulting.xyz)\n/// @notice Updated version of Synthetix's StakingRewards with new features specific to Kwenta\ncontract StakingRewardsV2 is\n    IStakingRewardsV2,\n    Ownable2StepUpgradeable,\n    PausableUpgradeable,\n    UUPSUpgradeable\n{\n    /*///////////////////////////////////////////////////////////////\n                        CONSTANTS/IMMUTABLES\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice minimum time length of the unstaking cooldown period\n    uint256 public constant MIN_COOLDOWN_PERIOD = 1 weeks;\n\n    /// @notice maximum time length of the unstaking cooldown period\n    uint256 public constant MAX_COOLDOWN_PERIOD = 52 weeks;\n\n    /// @notice Contract for KWENTA ERC20 token - used for BOTH staking and rewards\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IKwenta public immutable kwenta;\n\n    /// @notice escrow contract which holds (and may stake) reward tokens\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IRewardEscrowV2 public immutable rewardEscrow;\n\n    /// @notice handles reward token minting logic\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IStakingRewardsNotifier public immutable rewardsNotifier;\n\n    /*///////////////////////////////////////////////////////////////\n                                STATE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice list of checkpoints with the number of tokens staked by address\n    /// @dev this includes staked escrowed tokens\n    mapping(address => Checkpoint[]) public balancesCheckpoints;\n\n    /// @notice list of checkpoints with the number of staked escrow tokens by address\n    mapping(address => Checkpoint[]) public escrowedBalancesCheckpoints;\n\n    /// @notice list of checkpoints with the total number of tokens staked in this contract\n    Checkpoint[] public totalSupplyCheckpoints;\n\n    /// @notice marks applicable reward period finish time\n    uint256 public periodFinish;\n\n    /// @notice amount of tokens minted per second\n    uint256 public rewardRate;\n\n    /// @notice period for rewards\n    uint256 public rewardsDuration;\n\n    /// @notice track last time the rewards were updated\n    uint256 public lastUpdateTime;\n\n    /// @notice summation of rewardRate divided by total staked tokens\n    uint256 public rewardPerTokenStored;\n\n    /// @inheritdoc IStakingRewardsV2\n    uint256 public cooldownPeriod;\n\n    /// @notice represents the rewardPerToken\n    /// value the last time the staker calculated earned() rewards\n    mapping(address => uint256) public userRewardPerTokenPaid;\n\n    /// @notice track rewards for a given user which changes when\n    /// a user stakes, unstakes, or claims rewards\n    mapping(address => uint256) public rewards;\n\n    /// @notice tracks the last time staked for a given user\n    mapping(address => uint256) public userLastStakeTime;\n\n    /// @notice tracks all addresses approved to take actions on behalf of a given account\n    mapping(address => mapping(address => bool)) public operatorApprovals;\n\n    /*///////////////////////////////////////////////////////////////\n                                AUTH\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice access control modifier for rewardEscrow\n    modifier onlyRewardEscrow() {\n        _onlyRewardEscrow();\n        _;\n    }\n\n    function _onlyRewardEscrow() internal view {\n        if (msg.sender != address(rewardEscrow)) revert OnlyRewardEscrow();\n    }\n\n    /// @notice access control modifier for rewardsNotifier\n    modifier onlyRewardsNotifier() {\n        _onlyRewardsNotifier();\n        _;\n    }\n\n    function _onlyRewardsNotifier() internal view {\n        if (msg.sender != address(rewardsNotifier)) revert OnlyRewardsNotifier();\n    }\n\n    /// @notice only allow execution after the unstaking cooldown period has elapsed\n    modifier afterCooldown(address _account) {\n        _afterCooldown(_account);\n        _;\n    }\n\n    function _afterCooldown(address _account) internal view {\n        uint256 canUnstakeAt = userLastStakeTime[_account] + cooldownPeriod;\n        if (canUnstakeAt > block.timestamp) revert MustWaitForUnlock(canUnstakeAt);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        CONSTRUCTOR / INITIALIZER\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev disable default constructor to disable the implementation contract\n    /// Actual contract construction will take place in the initialize function via proxy\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    /// @param _kwenta The address for the KWENTA ERC20 token\n    /// @param _rewardEscrow The address for the RewardEscrowV2 contract\n    /// @param _rewardsNotifier The address for the StakingRewardsNotifier contract\n    constructor(address _kwenta, address _rewardEscrow, address _rewardsNotifier) {\n        if (_kwenta == address(0) || _rewardEscrow == address(0) || _rewardsNotifier == address(0)) {\n            revert ZeroAddress();\n        }\n\n        _disableInitializers();\n\n        // define reward/staking token\n        kwenta = IKwenta(_kwenta);\n\n        // define contracts which will interact with StakingRewards\n        rewardEscrow = IRewardEscrowV2(_rewardEscrow);\n        rewardsNotifier = IStakingRewardsNotifier(_rewardsNotifier);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function initialize(address _contractOwner) external initializer {\n        if (_contractOwner == address(0)) revert ZeroAddress();\n\n        // initialize owner\n        __Ownable2Step_init();\n        __Pausable_init();\n        __UUPSUpgradeable_init();\n\n        // transfer ownership\n        _transferOwnership(_contractOwner);\n\n        // define values\n        rewardsDuration = 1 weeks;\n        cooldownPeriod = 2 weeks;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                VIEWS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IStakingRewardsV2\n    function totalSupply() public view returns (uint256) {\n        uint256 length = totalSupplyCheckpoints.length;\n        unchecked {\n            return length == 0 ? 0 : totalSupplyCheckpoints[length - 1].value;\n        }\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function balanceOf(address _account) public view returns (uint256) {\n        Checkpoint[] storage checkpoints = balancesCheckpoints[_account];\n        uint256 length = checkpoints.length;\n        unchecked {\n            return length == 0 ? 0 : checkpoints[length - 1].value;\n        }\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function escrowedBalanceOf(address _account) public view returns (uint256) {\n        Checkpoint[] storage checkpoints = escrowedBalancesCheckpoints[_account];\n        uint256 length = checkpoints.length;\n        unchecked {\n            return length == 0 ? 0 : checkpoints[length - 1].value;\n        }\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function nonEscrowedBalanceOf(address _account) public view returns (uint256) {\n        return balanceOf(_account) - escrowedBalanceOf(_account);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function unstakedEscrowedBalanceOf(address _account) public view returns (uint256) {\n        return rewardEscrow.escrowedBalanceOf(_account) - escrowedBalanceOf(_account);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            STAKE/UNSTAKE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IStakingRewardsV2\n    function stake(uint256 _amount) external whenNotPaused updateReward(msg.sender) {\n        if (_amount == 0) revert AmountZero();\n\n        // update state\n        userLastStakeTime[msg.sender] = block.timestamp;\n        _addTotalSupplyCheckpoint(totalSupply() + _amount);\n        _addBalancesCheckpoint(msg.sender, balanceOf(msg.sender) + _amount);\n\n        // emit staking event and index msg.sender\n        emit Staked(msg.sender, _amount);\n\n        // transfer token to this contract from the caller\n        kwenta.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function unstake(uint256 _amount)\n        public\n        whenNotPaused\n        updateReward(msg.sender)\n        afterCooldown(msg.sender)\n    {\n        if (_amount == 0) revert AmountZero();\n        uint256 nonEscrowedBalance = nonEscrowedBalanceOf(msg.sender);\n        if (_amount > nonEscrowedBalance) revert InsufficientBalance(nonEscrowedBalance);\n\n        // update state\n        _addTotalSupplyCheckpoint(totalSupply() - _amount);\n        _addBalancesCheckpoint(msg.sender, balanceOf(msg.sender) - _amount);\n\n        // emit unstake event and index msg.sender\n        emit Unstaked(msg.sender, _amount);\n\n        // transfer token from this contract to the caller\n        kwenta.transfer(msg.sender, _amount);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function stakeEscrow(uint256 _amount) external {\n        _stakeEscrow(msg.sender, _amount);\n    }\n\n    function _stakeEscrow(address _account, uint256 _amount)\n        internal\n        whenNotPaused\n        updateReward(_account)\n    {\n        if (_amount == 0) revert AmountZero();\n        uint256 unstakedEscrow = unstakedEscrowedBalanceOf(_account);\n        if (_amount > unstakedEscrow) revert InsufficientUnstakedEscrow(unstakedEscrow);\n\n        // update state\n        userLastStakeTime[_account] = block.timestamp;\n        _addBalancesCheckpoint(_account, balanceOf(_account) + _amount);\n        _addEscrowedBalancesCheckpoint(_account, escrowedBalanceOf(_account) + _amount);\n\n        // updates total supply despite no new staking token being transfered.\n        // escrowed tokens are locked in RewardEscrow\n        _addTotalSupplyCheckpoint(totalSupply() + _amount);\n\n        // emit escrow staking event and index account\n        emit EscrowStaked(_account, _amount);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function unstakeEscrow(uint256 _amount) external afterCooldown(msg.sender) {\n        _unstakeEscrow(msg.sender, _amount);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function unstakeEscrowSkipCooldown(address _account, uint256 _amount)\n        external\n        onlyRewardEscrow\n    {\n        _unstakeEscrow(_account, _amount);\n    }\n\n    function _unstakeEscrow(address _account, uint256 _amount)\n        internal\n        whenNotPaused\n        updateReward(_account)\n    {\n        if (_amount == 0) revert AmountZero();\n        uint256 escrowedBalance = escrowedBalanceOf(_account);\n        if (_amount > escrowedBalance) revert InsufficientBalance(escrowedBalance);\n\n        // update state\n        _addBalancesCheckpoint(_account, balanceOf(_account) - _amount);\n        _addEscrowedBalancesCheckpoint(_account, escrowedBalanceOf(_account) - _amount);\n\n        // updates total supply despite no new staking token being transfered.\n        // escrowed tokens are locked in RewardEscrow\n        _addTotalSupplyCheckpoint(totalSupply() - _amount);\n\n        // emit escrow unstaked event and index account\n        emit EscrowUnstaked(_account, _amount);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function exit() external {\n        unstake(nonEscrowedBalanceOf(msg.sender));\n        _getReward(msg.sender);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            CLAIM REWARDS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IStakingRewardsV2\n    function getReward() external {\n        _getReward(msg.sender);\n    }\n\n    function _getReward(address _account) internal {\n        _getReward(_account, _account);\n    }\n\n    function _getReward(address _account, address _to)\n        internal\n        whenNotPaused\n        updateReward(_account)\n    {\n        uint256 reward = rewards[_account];\n        if (reward > 0) {\n            // update state (first)\n            rewards[_account] = 0;\n\n            // emit reward claimed event and index account\n            emit RewardPaid(_account, reward);\n\n            // transfer token from this contract to the rewardEscrow\n            // and create a vesting entry at the _to address\n            kwenta.transfer(address(rewardEscrow), reward);\n            rewardEscrow.appendVestingEntry(_to, reward);\n        }\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function compound() external {\n        _compound(msg.sender);\n    }\n\n    /// @dev internal helper to compound for a given account\n    /// @param _account the account to compound for\n    function _compound(address _account) internal {\n        _getReward(_account);\n        _stakeEscrow(_account, unstakedEscrowedBalanceOf(_account));\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        REWARD UPDATE CALCULATIONS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice update reward state for the account and contract\n    /// @param _account: address of account which rewards are being updated for\n    /// @dev contract state not specific to an account will be updated also\n    modifier updateReward(address _account) {\n        _updateReward(_account);\n        _;\n    }\n\n    function _updateReward(address _account) internal {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n\n        if (_account != address(0)) {\n            // update amount of rewards a user can claim\n            rewards[_account] = earned(_account);\n\n            // update reward per token staked AT this given time\n            // (i.e. when this user is interacting with StakingRewards)\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n        }\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function getRewardForDuration() external view returns (uint256) {\n        return rewardRate * rewardsDuration;\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function rewardPerToken() public view returns (uint256) {\n        uint256 allTokensStaked = totalSupply();\n\n        if (allTokensStaked == 0) {\n            return rewardPerTokenStored;\n        }\n\n        return rewardPerTokenStored\n            + (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / allTokensStaked);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function earned(address _account) public view returns (uint256) {\n        uint256 totalBalance = balanceOf(_account);\n\n        return ((totalBalance * (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18)\n            + rewards[_account];\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                DELEGATION\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice access control modifier for approved operators\n    modifier onlyOperator(address _accountOwner) {\n        _onlyOperator(_accountOwner);\n        _;\n    }\n\n    function _onlyOperator(address _accountOwner) internal view {\n        if (!operatorApprovals[_accountOwner][msg.sender]) revert NotApproved();\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function approveOperator(address _operator, bool _approved) external {\n        if (_operator == msg.sender) revert CannotApproveSelf();\n\n        operatorApprovals[msg.sender][_operator] = _approved;\n\n        emit OperatorApproved(msg.sender, _operator, _approved);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function stakeEscrowOnBehalf(address _account, uint256 _amount)\n        external\n        onlyOperator(_account)\n    {\n        _stakeEscrow(_account, _amount);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function getRewardOnBehalf(address _account) external onlyOperator(_account) {\n        _getReward(_account);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function compoundOnBehalf(address _account) external onlyOperator(_account) {\n        _compound(_account);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            CHECKPOINTING VIEWS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IStakingRewardsV2\n    function balancesCheckpointsLength(address _account) external view returns (uint256) {\n        return balancesCheckpoints[_account].length;\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function escrowedBalancesCheckpointsLength(address _account) external view returns (uint256) {\n        return escrowedBalancesCheckpoints[_account].length;\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function totalSupplyCheckpointsLength() external view returns (uint256) {\n        return totalSupplyCheckpoints.length;\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function balanceAtTime(address _account, uint256 _timestamp) external view returns (uint256) {\n        return _checkpointBinarySearch(balancesCheckpoints[_account], _timestamp);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function escrowedBalanceAtTime(address _account, uint256 _timestamp)\n        external\n        view\n        returns (uint256)\n    {\n        return _checkpointBinarySearch(escrowedBalancesCheckpoints[_account], _timestamp);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function totalSupplyAtTime(uint256 _timestamp) external view returns (uint256) {\n        return _checkpointBinarySearch(totalSupplyCheckpoints, _timestamp);\n    }\n\n    /// @notice finds the value of the checkpoint at a given timestamp\n    /// @param _checkpoints: array of checkpoints to search\n    /// @param _timestamp: timestamp to check\n    /// @dev returns 0 if no checkpoints exist, uses iterative binary search\n    /// @dev if called with a timestamp that equals the current block timestamp, then the function might return inconsistent\n    /// values as further transactions changing the balances can still occur within the same block. \n    function _checkpointBinarySearch(Checkpoint[] storage _checkpoints, uint256 _timestamp)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 length = _checkpoints.length;\n        if (length == 0) return 0;\n\n        uint256 min = 0;\n        uint256 max = length - 1;\n\n        if (_checkpoints[min].ts > _timestamp) return 0;\n        if (_checkpoints[max].ts <= _timestamp) return _checkpoints[max].value;\n\n        while (max > min) {\n            uint256 midpoint = (max + min + 1) / 2;\n            if (_checkpoints[midpoint].ts <= _timestamp) min = midpoint;\n            else max = midpoint - 1;\n        }\n\n        assert(min == max);\n\n        return _checkpoints[min].value;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            UPDATE CHECKPOINTS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice add a new balance checkpoint for an account\n    /// @param _account: address of account to add checkpoint for\n    /// @param _value: value of checkpoint to add\n    function _addBalancesCheckpoint(address _account, uint256 _value) internal {\n        _addCheckpoint(balancesCheckpoints[_account], _value);\n    }\n\n    /// @notice add a new escrowed balance checkpoint for an account\n    /// @param _account: address of account to add checkpoint for\n    /// @param _value: value of checkpoint to add\n    function _addEscrowedBalancesCheckpoint(address _account, uint256 _value) internal {\n        _addCheckpoint(escrowedBalancesCheckpoints[_account], _value);\n    }\n\n    /// @notice add a new total supply checkpoint\n    /// @param _value: value of checkpoint to add\n    function _addTotalSupplyCheckpoint(uint256 _value) internal {\n        _addCheckpoint(totalSupplyCheckpoints, _value);\n    }\n\n    /// @notice Adds a new checkpoint or updates the last one\n    /// @param checkpoints The array of checkpoints to modify\n    /// @param _value The new value to add as a checkpoint\n    /// @dev If the last checkpoint is from a different block, a new checkpoint is added.\n    /// If it's from the current block, the value of the last checkpoint is updated.\n    function _addCheckpoint(Checkpoint[] storage checkpoints, uint256 _value) internal {\n        uint256 length = checkpoints.length;\n        uint256 lastTimestamp;\n        unchecked {\n            lastTimestamp = length == 0 ? 0 : checkpoints[length - 1].ts;\n        }\n\n        if (lastTimestamp != block.timestamp) {\n            checkpoints.push(\n                Checkpoint({\n                    ts: uint64(block.timestamp),\n                    blk: uint64(block.number),\n                    value: uint128(_value)\n                })\n            );\n        } else {\n            unchecked {\n                checkpoints[length - 1].value = uint128(_value);\n            }\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                SETTINGS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IStakingRewardsV2\n    function notifyRewardAmount(uint256 _reward)\n        external\n        onlyRewardsNotifier\n        updateReward(address(0))\n    {\n        if (block.timestamp >= periodFinish) {\n            rewardRate = _reward / rewardsDuration;\n        } else {\n            uint256 remaining = periodFinish - block.timestamp;\n            uint256 leftover = remaining * rewardRate;\n            rewardRate = (_reward + leftover) / rewardsDuration;\n        }\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp + rewardsDuration;\n        emit RewardAdded(_reward);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\n        if (block.timestamp <= periodFinish) revert RewardsPeriodNotComplete();\n        if (_rewardsDuration == 0) revert RewardsDurationCannotBeZero();\n\n        rewardsDuration = _rewardsDuration;\n        emit RewardsDurationUpdated(rewardsDuration);\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function setCooldownPeriod(uint256 _cooldownPeriod) external onlyOwner {\n        if (_cooldownPeriod < MIN_COOLDOWN_PERIOD) revert CooldownPeriodTooLow(MIN_COOLDOWN_PERIOD);\n        if (_cooldownPeriod > MAX_COOLDOWN_PERIOD) {\n            revert CooldownPeriodTooHigh(MAX_COOLDOWN_PERIOD);\n        }\n\n        cooldownPeriod = _cooldownPeriod;\n        emit CooldownPeriodUpdated(cooldownPeriod);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                PAUSABLE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @inheritdoc IStakingRewardsV2\n    function pauseStakingRewards() external onlyOwner {\n        _pause();\n    }\n\n    /// @inheritdoc IStakingRewardsV2\n    function unpauseStakingRewards() external onlyOwner {\n        _unpause();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            MISCELLANEOUS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev this function is used by the proxy to set the access control for upgrading the implementation contract\n    function _authorizeUpgrade(address _newImplementation) internal override onlyOwner {}\n\n    /// @inheritdoc IStakingRewardsV2\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n        if (_tokenAddress == address(kwenta)) revert CannotRecoverStakingToken();\n        emit Recovered(_tokenAddress, _tokenAmount);\n        IERC20(_tokenAddress).transfer(owner(), _tokenAmount);\n    }\n}\n"
    },
    "contracts/SupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/ISupplySchedule.sol\";\n\n// Libraries\nimport \"./libraries/SafeDecimalMath.sol\";\nimport \"./libraries/Math.sol\";\n\n// Internal references\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IKwenta.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\nimport \"./interfaces/IMultipleMerkleDistributor.sol\";\n\n// https://docs.synthetix.io/contracts/source/contracts/supplyschedule\ncontract SupplySchedule is Owned, ISupplySchedule {\n    using SafeDecimalMath for uint;\n    using Math for uint;\n\n    IKwenta public kwenta;\n    IStakingRewards public stakingRewards;\n    IMultipleMerkleDistributor public tradingRewards;\n\n    // Time of the last inflation supply mint event\n    uint public lastMintEvent;\n\n    // Counter for number of weeks since the start of supply inflation\n    uint public weekCounter;\n\n    // The number of KWENTA rewarded to the caller of Kwenta.mint()\n    uint public minterReward = 1e18;\n\n    uint public constant INITIAL_SUPPLY = 313373e18;\n\n    // Initial Supply * 240% Initial Inflation Rate / 52 weeks.\n    uint public constant INITIAL_WEEKLY_SUPPLY = INITIAL_SUPPLY * 240 / 100 / 52;\n\n    // Max KWENTA rewards for minter\n    uint public constant MAX_MINTER_REWARD = 20 * 1e18;\n\n    // How long each inflation period is before mint can be called\n    uint public constant MINT_PERIOD_DURATION = 1 weeks;\n\n    uint public immutable inflationStartDate;\n    uint public constant MINT_BUFFER = 1 days;\n    uint8 public constant SUPPLY_DECAY_START = 2; // Supply decay starts on the 2nd week of rewards\n    uint8 public constant SUPPLY_DECAY_END = 208; // Inclusive of SUPPLY_DECAY_END week.\n\n    // Weekly percentage decay of inflationary supply\n    uint public constant DECAY_RATE = 20500000000000000; // 2.05% weekly\n\n    // Percentage growth of terminal supply per annum\n    uint public constant TERMINAL_SUPPLY_RATE_ANNUAL = 10000000000000000; // 1.0% pa\n\n    uint public treasuryDiversion = 2000; // 20% to treasury\n    uint public tradingRewardsDiversion = 2000;\n\n    // notice treasury address may change\n    address public treasuryDAO;\n\n    /* ========== EVENTS ========== */\n    \n    /**\n     * @notice Emitted when the inflationary supply is minted\n     **/\n    event SupplyMinted(uint supplyMinted, uint numberOfWeeksIssued, uint lastMintEvent);\n\n    /**\n     * @notice Emitted when the KWENTA minter reward amount is updated\n     **/\n    event MinterRewardUpdated(uint newRewardAmount);\n\n    /**\n     * @notice Emitted when setKwenta is called changing the Kwenta Proxy address\n     **/\n    event KwentaUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when treasury inflation share is changed\n     **/\n    event TreasuryDiversionUpdated(uint newPercentage);\n\n    /**\n     * @notice Emitted when trading rewards inflation share is changed\n     **/\n    event TradingRewardsDiversionUpdated(uint newPercentage);\n\n    /**\n     * @notice Emitted when StakingRewards is changed\n     **/\n    event StakingRewardsUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when TradingRewards is changed\n     **/\n    event TradingRewardsUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when treasuryDAO address is changed\n     **/\n    event TreasuryDAOSet(address treasuryDAO);\n\n    constructor(\n        address _owner,\n        address _treasuryDAO\n    ) Owned(_owner) {\n        treasuryDAO = _treasuryDAO;\n\n        inflationStartDate = block.timestamp; // inflation starts as soon as the contract is deployed.\n        lastMintEvent = block.timestamp;\n        weekCounter = 0;\n    }\n\n    // ========== VIEWS ==========\n\n    /**\n     * @return The amount of KWENTA mintable for the inflationary supply\n     */\n    function mintableSupply() override public view returns (uint) {\n        uint totalAmount;\n\n        if (!isMintable()) {\n            return totalAmount;\n        }\n\n        uint remainingWeeksToMint = weeksSinceLastIssuance();\n\n        uint currentWeek = weekCounter;\n\n        // Calculate total mintable supply from exponential decay function\n        // The decay function stops after week 208\n        while (remainingWeeksToMint > 0) {\n            currentWeek++;\n\n            if (currentWeek < SUPPLY_DECAY_START) {\n                // If current week is before supply decay we add initial supply to mintableSupply\n                totalAmount = totalAmount + INITIAL_WEEKLY_SUPPLY;\n                remainingWeeksToMint--;\n            } else if (currentWeek <= SUPPLY_DECAY_END) {\n                // if current week before supply decay ends we add the new supply for the week\n                // diff between current week and (supply decay start week - 1)\n                uint decayCount = currentWeek - (SUPPLY_DECAY_START - 1);\n\n                totalAmount = totalAmount + tokenDecaySupplyForWeek(decayCount);\n                remainingWeeksToMint--;\n            } else {\n                // Terminal supply is calculated on the total supply of Kwenta including any new supply\n                // We can compound the remaining week's supply at the fixed terminal rate\n                uint totalSupply = IERC20(kwenta).totalSupply();\n                uint currentTotalSupply = totalSupply + totalAmount;\n\n                totalAmount = totalAmount + terminalInflationSupply(currentTotalSupply, remainingWeeksToMint);\n                remainingWeeksToMint = 0;\n            }\n        }\n\n        return totalAmount;\n    }\n\n    /**\n     * @return A unit amount of decaying inflationary supply from the INITIAL_WEEKLY_SUPPLY\n     * @dev New token supply reduces by the decay rate each week calculated as supply = INITIAL_WEEKLY_SUPPLY * ()\n     */\n    function tokenDecaySupplyForWeek(uint counter) public pure returns (uint) {\n        // Apply exponential decay function to number of weeks since\n        // start of inflation smoothing to calculate diminishing supply for the week.\n        uint effectiveDecay = (SafeDecimalMath.unit() - DECAY_RATE).powDecimal(counter);\n        uint supplyForWeek = INITIAL_WEEKLY_SUPPLY.multiplyDecimal(effectiveDecay);\n\n        return supplyForWeek;\n    }\n\n    /**\n     * @return A unit amount of terminal inflation supply\n     * @dev Weekly compound rate based on number of weeks\n     */\n    function terminalInflationSupply(uint totalSupply, uint numOfWeeks) public pure returns (uint) {\n        // rate = (1 + weekly rate) ^ num of weeks\n        uint effectiveCompoundRate = (SafeDecimalMath.unit() + (TERMINAL_SUPPLY_RATE_ANNUAL / 52)).powDecimal(numOfWeeks);\n\n        // return Supply * (effectiveRate - 1) for extra supply to issue based on number of weeks\n        return totalSupply.multiplyDecimal(effectiveCompoundRate - SafeDecimalMath.unit());\n    }\n\n    /**\n     * @dev Take timeDiff in seconds (Dividend) and MINT_PERIOD_DURATION as (Divisor)\n     * @return Calculate the numberOfWeeks since last mint rounded down to 1 week\n     */\n    function weeksSinceLastIssuance() public view returns (uint) {\n        // Get weeks since lastMintEvent\n        // If lastMintEvent not set or 0, then start from inflation start date.\n        uint timeDiff = block.timestamp - lastMintEvent;\n        return timeDiff / MINT_PERIOD_DURATION;\n    }\n\n    /**\n     * @return boolean whether the MINT_PERIOD_DURATION (7 days)\n     * has passed since the lastMintEvent.\n     * */\n    function isMintable() override public view returns (bool) {\n        return block.timestamp - lastMintEvent > MINT_PERIOD_DURATION;\n    }\n\n    // ========== MUTATIVE FUNCTIONS ==========\n\n    /**\n     * @notice Record the mint event from Kwenta by incrementing the inflation\n     * week counter for the number of weeks minted (probabaly always 1)\n     * and store the time of the event.\n     * @param supplyMinted the amount of KWENTA the total supply was inflated by.\n     * */\n    function recordMintEvent(uint supplyMinted) internal returns (bool) {\n        uint numberOfWeeksIssued = weeksSinceLastIssuance();\n\n        // add number of weeks minted to weekCounter\n        weekCounter = weekCounter + numberOfWeeksIssued;\n\n        // Update mint event to latest week issued (start date + number of weeks issued * seconds in week)\n        // 1 day time buffer is added so inflation is minted after feePeriod closes\n        lastMintEvent = inflationStartDate + (weekCounter * MINT_PERIOD_DURATION) + MINT_BUFFER;\n\n        emit SupplyMinted(supplyMinted, numberOfWeeksIssued, lastMintEvent);\n        return true;\n    }\n\n    /**\n     * @notice Mints new inflationary supply weekly\n     * New KWENTA is distributed between the minter, treasury, and StakingRewards contract\n     * */\n    function mint() override external {\n        require(address(stakingRewards) != address(0), \"Staking rewards not set\");\n        require(address(tradingRewards) != address(0), \"Trading rewards not set\");\n\n        uint supplyToMint = mintableSupply();\n        require(supplyToMint > 0, \"No supply is mintable\");\n\n        // record minting event before mutation to token supply\n        recordMintEvent(supplyToMint);\n\n        uint amountToDistribute = supplyToMint - minterReward;\n        uint amountToTreasury = amountToDistribute * treasuryDiversion / 10000;\n        uint amountToTradingRewards = amountToDistribute * tradingRewardsDiversion / 10000;\n        uint amountToStakingRewards = amountToDistribute - amountToTreasury - amountToTradingRewards;\n\n        kwenta.mint(treasuryDAO, amountToTreasury);\n        kwenta.mint(address(tradingRewards), amountToTradingRewards);\n        kwenta.mint(address(stakingRewards), amountToStakingRewards);\n        stakingRewards.notifyRewardAmount(amountToStakingRewards);\n        kwenta.mint(msg.sender, minterReward);\n    }\n\n    // ========== SETTERS ========== */\n\n    /**\n     * @notice Set the Kwenta should it ever change.\n     * SupplySchedule requires Kwenta address as it has the authority\n     * to record mint event.\n     * */\n    function setKwenta(IKwenta _kwenta) external onlyOwner {\n        require(address(_kwenta) != address(0), \"Address cannot be 0\");\n        kwenta = _kwenta;\n        emit KwentaUpdated(address(kwenta));\n    }\n\n    /**\n     * @notice Sets the reward amount of KWENTA for the caller of the public\n     * function Kwenta.mint().\n     * This incentivises anyone to mint the inflationary supply and the mintr\n     * Reward will be deducted from the inflationary supply and sent to the caller.\n     * @param amount the amount of KWENTA to reward the minter.\n     * */\n    function setMinterReward(uint amount) external onlyOwner {\n        require(amount <= MAX_MINTER_REWARD, \"SupplySchedule: Reward cannot exceed max minter reward\");\n        minterReward = amount;\n        emit MinterRewardUpdated(minterReward);\n    }\n\n    function setTreasuryDiversion(uint _treasuryDiversion) override external onlyOwner {\n        require(_treasuryDiversion + tradingRewardsDiversion < 10000, \"SupplySchedule: Cannot be more than 100%\");\n        treasuryDiversion = _treasuryDiversion;\n        emit TreasuryDiversionUpdated(_treasuryDiversion);\n    }\n\n    function setTradingRewardsDiversion(uint _tradingRewardsDiversion) override external onlyOwner {\n        require(_tradingRewardsDiversion + treasuryDiversion < 10000, \"SupplySchedule: Cannot be more than 100%\");\n        tradingRewardsDiversion = _tradingRewardsDiversion;\n        emit TradingRewardsDiversionUpdated(_tradingRewardsDiversion);\n    }\n\n    function setStakingRewards(address _stakingRewards) override external onlyOwner {\n        require(_stakingRewards != address(0), \"SupplySchedule: Invalid Address\");\n        stakingRewards = IStakingRewards(_stakingRewards);\n        emit StakingRewardsUpdated(_stakingRewards);\n    }\n\n    function setTradingRewards(address _tradingRewards) override external onlyOwner {\n        require(_tradingRewards != address(0), \"SupplySchedule: Invalid Address\");\n        tradingRewards = IMultipleMerkleDistributor(_tradingRewards);\n        emit TradingRewardsUpdated(_tradingRewards);\n    }\n\n    /// @notice set treasuryDAO address\n    /// @dev only owner may change address\n    function setTreasuryDAO(address _treasuryDAO) external onlyOwner {\n        require(_treasuryDAO != address(0), \"SupplySchedule: Zero Address\");\n        treasuryDAO = _treasuryDAO;\n        emit TreasuryDAOSet(treasuryDAO);\n    }\n}"
    },
    "contracts/TokenDistributor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.19;\n\nimport {ITokenDistributor} from \"./interfaces/ITokenDistributor.sol\";\nimport {IStakingRewardsV2} from \"./interfaces/IStakingRewardsV2.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {BitMaps} from \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\n\ncontract TokenDistributor is ITokenDistributor {\n    using BitMaps for BitMaps.BitMap;\n\n    /// @dev BitMap for storing claimed epochs\n    mapping(address to => BitMaps.BitMap claimedEpochs) internal _claimedEpochsBitMap;  \n\n    /// @inheritdoc ITokenDistributor\n    mapping(uint => uint) public tokensPerEpoch;\n\n    /// @notice token to distribute\n    IERC20 public immutable rewardsToken;\n\n    /// @notice rewards staking contract\n    IStakingRewardsV2 public immutable stakingRewardsV2;\n\n    /// @notice last recorded balance of rewards tokens in contract\n    uint public lastTokenBalance;\n\n    /// @notice last checkpoint time\n    uint public lastCheckpoint;\n\n    /// @notice starting week of deployment\n    uint public immutable startTime;\n\n    /// @notice the week offset in seconds\n    uint public immutable offset;\n\n    /// @notice max amount of days the epoch can be offset by\n    uint public constant MAX_OFFSET_DAYS = 6;\n\n    /// @notice weeks in a year\n    uint public constant WEEKS_IN_YEAR = 52;\n\n    /// @notice constructs the TokenDistributor contract\n    /// and sets startTime\n    /// @param _rewardsToken: address of the rewards token contract\n    /// @param _stakingRewardsV2: address of the stakingRewardsV2 contract\n    /// @param _daysToOffsetBy: the number of days to offset the epoch by\n    constructor(\n        address _rewardsToken,\n        address _stakingRewardsV2,\n        uint _daysToOffsetBy\n    ) {\n        if (\n            _rewardsToken == address(0) ||\n            _stakingRewardsV2 == address(0)\n        ) {\n            revert ZeroAddress();\n        }\n        rewardsToken = IERC20(_rewardsToken);\n        stakingRewardsV2 = IStakingRewardsV2(_stakingRewardsV2);\n\n        /// @notice custom start day (startTime + daysToOffsetBy)\n        if (_daysToOffsetBy > MAX_OFFSET_DAYS) {\n            revert OffsetTooBig();\n        }\n        offset = _daysToOffsetBy * 1 days;\n        uint startOfThisWeek = _startOfWeek(block.timestamp);\n        startTime = startOfThisWeek;\n        lastCheckpoint = startOfThisWeek;\n    }\n\n    /// @inheritdoc ITokenDistributor\n    function checkpointToken() public override {\n        uint tokenBalance = rewardsToken.balanceOf(address(this));\n        uint toDistribute = tokenBalance - lastTokenBalance;\n        lastTokenBalance = tokenBalance;\n\n        uint previousCheckpoint = lastCheckpoint;\n        uint sinceLast = block.timestamp - previousCheckpoint;\n        lastCheckpoint = block.timestamp;\n        /// @dev this/nextWeek is for iterating through time\n        uint thisWeek = _startOfWeek(previousCheckpoint);\n        uint nextWeek = 0;\n\n        /// @dev Loop for potential missed weeks\n        /// iterates until caught up, unlikely to go to 52 weeks\n        for (uint i = 0; i < WEEKS_IN_YEAR; ) {\n            nextWeek = thisWeek + 1 weeks;\n            uint thisEpoch = _epochFromTimestamp(thisWeek);\n            if (block.timestamp < nextWeek) {\n                /// @dev if in the current week\n                if (sinceLast == 0) {\n                    /// @dev If no time change since last checkpoint just add new tokens\n                    /// that may have been deposited (same block)\n                    tokensPerEpoch[thisEpoch] += toDistribute;\n                } else {\n                    /// @dev In the event that toDistribute contains tokens\n                    /// for multiple weeks we take the remaining portion\n                    tokensPerEpoch[thisEpoch] +=\n                        (toDistribute *\n                            (block.timestamp - previousCheckpoint)) /\n                        sinceLast;\n                }\n                break;\n            } else {\n                /// @dev If passed weeks missed\n                /// @dev Store proportion of tokens for this week in the past\n                tokensPerEpoch[thisEpoch] +=\n                    (toDistribute * (nextWeek - previousCheckpoint)) /\n                    sinceLast;\n            }\n            previousCheckpoint = nextWeek;\n            thisWeek = nextWeek;\n            unchecked {\n                ++i;\n            }\n        }\n        emit CheckpointToken(block.timestamp, toDistribute);\n    }\n\n    /// @inheritdoc ITokenDistributor\n    function claimEpoch(address to, uint epochNumber) public override {\n        _checkpointWhenReady();\n        uint256 proportionalFees = _claimEpoch(to, epochNumber);\n\n        lastTokenBalance -= proportionalFees;\n\n        rewardsToken.transfer(to, proportionalFees);\n    }\n\n    /// @notice internal claimEpoch function\n    function _claimEpoch(address to, uint epochNumber) internal returns (uint256 proportionalFees) {\n        _isEpochReady(epochNumber);\n        if (claimedEpoch(to, epochNumber)) {\n            revert CannotClaimTwice();\n        }\n        _claimedEpochsBitMap[to].set(epochNumber);\n\n        proportionalFees = calculateEpochFees(to, epochNumber);\n\n        if (proportionalFees == 0) {\n            revert CannotClaim0Fees();\n        }\n\n        emit EpochClaim(to, epochNumber, proportionalFees);\n    }\n\n    /// @inheritdoc ITokenDistributor\n    function claimMany(address to, uint[] calldata epochs) public {\n        _checkpointWhenReady();\n        uint256 length = epochs.length;\n        uint256 totalProportionalFees;\n        for (uint i; i < length; ) {\n            uint epochNumber = epochs[i];\n            totalProportionalFees += _claimEpoch(to, epochNumber);\n            unchecked {\n                ++i;\n            }\n        }\n\n        lastTokenBalance -= totalProportionalFees;\n\n        rewardsToken.transfer(to, totalProportionalFees);\n    }\n\n    /// @inheritdoc ITokenDistributor\n    function calculateEpochFees(\n        address to,\n        uint epochNumber\n    ) public view override returns (uint256) {\n        uint epochStart = _startOfEpoch(epochNumber);\n        uint256 userStaked = stakingRewardsV2.balanceAtTime(to, epochStart);\n        uint256 totalStaked = stakingRewardsV2.totalSupplyAtTime(epochStart);\n        if (totalStaked == 0) {\n            return 0;\n        }\n        uint256 proportionalFees = (tokensPerEpoch[epochNumber] * userStaked) /\n            totalStaked;\n\n        return proportionalFees;\n    }\n\n    /// @inheritdoc ITokenDistributor\n    function claimedEpoch(address to, uint epochNumber) public view override returns (bool) {\n        return _claimedEpochsBitMap[to].get(epochNumber);\n    }\n\n    /// @notice function for calculating the start of a week with an offset\n    function _startOfWeek(uint timestamp) internal view returns (uint) {\n        /// @dev remove offset then truncate and then put offset back because\n        /// you cannot truncate to an \"offset\" time - always truncates to the start\n        /// of unix time -\n        /// @dev this also prevents false truncation: without removing then adding\n        /// offset, the end of a normal week but before the end of an offset week\n        /// will get truncated to the next normal week even though the true week (offset)\n        /// has not ended yet\n        return (((timestamp - offset) / 1 weeks) * 1 weeks) + offset;\n    }\n\n    /// @notice function for calculating the start of an epoch\n    function _startOfEpoch(uint epochNumber) internal view returns (uint) {\n        return (epochNumber * 1 weeks) + startTime;\n    }\n\n    /// @notice function for determining if a checkpoint is necessary\n    function _checkpointWhenReady() internal {\n        /// @dev if more than 24 hours from last checkpoint\n        /// @dev OR if it is the first claim of the week then checkpoint.\n        /// this condition is so that the end of a week always\n        /// gets updated before its claimed (even if < 24 hrs)\n        if (\n            block.timestamp - lastCheckpoint > 1 days ||\n            block.timestamp - _startOfWeek(lastCheckpoint) > 1 weeks\n        ) {\n            checkpointToken();\n        }\n    }\n\n    /// @notice function for determining if the epoch being claimed\n    /// is the current epoch or has not happened yet\n    function _isEpochReady(uint epochNumber) internal view {\n        /// @dev if the end of the epoch is > current time, revert\n        if (_startOfEpoch(epochNumber) + 1 weeks > block.timestamp) {\n            revert CannotClaimYet();\n        }\n    }\n\n    /// @notice function for getting the epoch number\n    /// from the timestamp start of a week\n    function _epochFromTimestamp(uint timestamp) internal view returns (uint) {\n        return (_startOfWeek(timestamp) - startTime) / 1 weeks;\n    }\n}\n"
    },
    "contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    },
    "contracts/utils/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
    },
    "contracts/utils/Owned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// https://docs.synthetix.io/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n"
    },
    "contracts/vKwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./utils/ERC20.sol\";\n\n/// @notice Purpose of this contract was to mint vKwenta for the initial Aelin raise.\n/// @dev This is a one time use contract and supply can never be increased.\ncontract vKwenta is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _beneficiary,\n        uint256 _amount\n    ) ERC20(_name, _symbol) {\n        _mint(_beneficiary, _amount);\n    }\n}\n"
    },
    "contracts/vKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IvKwentaRedeemer.sol\";\nimport \"./utils/ERC20.sol\";\n\n/// @title A redemption contract for Kwenta\n/// @dev All vKwenta used for redemption is locked within this contract\ncontract vKwentaRedeemer is IvKwentaRedeemer {\n    /// token to be burned\n    address public immutable vToken;\n    /// token to be redeemed\n    address public immutable token;\n\n    event Redeemed(address redeemer, uint256 redeemedAmount);\n\n    constructor(address _vToken, address _token) {\n        vToken = _vToken;\n        token = _token;\n    }\n\n    /// Allows caller to redeem an equivalent amount of token for vToken\n    /// @dev caller must approve this contract to spend vToken\n    /// @notice vToken is locked within this contract prior to transfer of token\n    function redeem() external override {\n        uint256 vTokenBalance = IERC20(vToken).balanceOf(msg.sender);\n\n        /// ensure valid balance\n        require(vTokenBalance > 0, \"vKwentaRedeemer: No balance to redeem\");\n        require(\n            vTokenBalance <= IERC20(token).balanceOf(address(this)),\n            \"vKwentaRedeemer: Insufficient contract balance\"\n        );\n\n        /// lock vToken in this contract\n        require(\n            IERC20(vToken).transferFrom(\n                msg.sender,\n                address(this),\n                vTokenBalance\n            ),\n            \"vKwentaRedeemer: vToken transfer failed\"\n        );\n\n        /// transfer token\n        require(\n            IERC20(token).transfer(msg.sender, vTokenBalance),\n            \"vKwentaRedeemer: token transfer failed\"\n        );\n\n        emit Redeemed(msg.sender, vTokenBalance);\n    }\n}\n"
    },
    "synthetix/contracts/interfaces/IStakingRewards.sol": {
      "content": "pragma solidity >=0.4.24;\n\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\ninterface IStakingRewards {\n    // Views\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function earned(address account) external view returns (uint256);\n\n    function getRewardForDuration() external view returns (uint256);\n\n    function lastTimeRewardApplicable() external view returns (uint256);\n\n    function rewardPerToken() external view returns (uint256);\n\n    function rewardsDistribution() external view returns (address);\n\n    function rewardsToken() external view returns (address);\n\n    function totalSupply() external view returns (uint256);\n\n    // Mutative\n\n    function exit() external;\n\n    function getReward() external;\n\n    function stake(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "test/foundry/utils/setup/ERC1967ProxyExposed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\n\ncontract ERC1967ProxyExposed is ERC1967Proxy {\n    constructor(address _logic, bytes memory _data) payable ERC1967Proxy(_logic, _data) {}\n\n    function implementation() external view returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "test/foundry/utils/TokenDistributorInternals.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.19;\n\nimport {TokenDistributor} from \"../../../contracts/TokenDistributor.sol\";\n\ncontract TokenDistributorInternals is TokenDistributor {\n    constructor(\n        address _kwenta,\n        address _stakingRewardsV2,\n        uint _offset\n    ) TokenDistributor(_kwenta, _stakingRewardsV2, _offset) {}\n\n    function startOfWeek(uint timestamp) public view returns (uint) {\n        return _startOfWeek(timestamp);\n    }\n\n    function startOfEpoch(uint epochNumber) public view returns (uint) {\n        return _startOfEpoch(epochNumber);\n    }\n\n    function checkpointWhenReady() public {\n        _checkpointWhenReady();\n    }\n\n    function isEpochReady(uint epochNumber) external view {\n        _isEpochReady(epochNumber);\n    }\n\n    function epochFromTimestamp(uint timestamp) external view returns (uint) {\n        return _epochFromTimestamp(timestamp);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}