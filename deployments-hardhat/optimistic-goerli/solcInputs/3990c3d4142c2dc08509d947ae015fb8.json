{
  "language": "Solidity",
  "sources": {
    "contracts/ControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IControlL2MerkleDistributor.sol\";\nimport {ICrossDomainMessenger} from \"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\";\n\n/// @title Kwenta ControlL2MerkleDistributor\n/// @author JaredBorders\n/// @notice This L1 deployed contract is responsible for communicating with the\n/// MerkleDistributor deployed on L2 (Optimism Mainnet)\ncontract ControlL2MerkleDistributor is IControlL2MerkleDistributor {\n    /// @notice communication between L1 and L2 is enabled by two special\n    /// smart contracts called the \"messengers\"\n    /// and below is the address for the messenger on L1\n    address internal immutable crossDomainMessengerAddr;\n\n    /// @notice MerkleDistributor deployed on L2\n    address internal immutable merkleDistributorL2Address;\n\n    /// @notice set addresses for deployed MerkleDistributor on L2 and\n    /// OE cross domain messenger address on L1\n    /// @param _crossDomainMessengerAddr: messenger on L1 enabling communication to L2\n    /// @param _merkleDistributorL2Address: Kwenta MerkleDistributor on L2\n    constructor(\n        address _crossDomainMessengerAddr,\n        address _merkleDistributorL2Address\n    ) {\n        crossDomainMessengerAddr = _crossDomainMessengerAddr;\n        merkleDistributorL2Address = _merkleDistributorL2Address;\n    }\n\n    /// @notice claim $KWENTA on L2 from an L1 address\n    /// @dev destAccount will be the address used to create new escrow entry\n    /// @dev the function caller (i.e. msg.sender) will be provided as a parameter\n    /// to MerkleDistributor.claimToAddress() on L2. Only valid callers will\n    /// be able to claim\n    /// @param index: used for merkle tree managment and verification\n    /// @param destAccount: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    function claimToAddress(\n        uint256 index,\n        address destAccount,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external override {\n        bytes memory message;\n        message = abi.encodeWithSignature(\n            \"claimToAddress(uint256,address,address,uint256,bytes32[])\",\n            index,\n            /// @notice account to be verified in merkle tree\n            msg.sender,\n            /// @notice address used for escrow entry\n            /// @dev does not necessarily have to be different from msg.sender\n            destAccount,\n            amount,\n            merkleProof\n        );\n\n        /// @notice send message to CrossDomainMessenger which will communicate message to L2\n        ICrossDomainMessenger(crossDomainMessengerAddr).sendMessage(\n            merkleDistributorL2Address,\n            message,\n            1000000 // within the free gas limit amount\n        );\n    }\n}\n"
    },
    "contracts/interfaces/IControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// allows messages from L1 -> L2\ninterface IControlL2MerkleDistributor {\n    /// @notice claim $KWENTA on L2 from an L1 address\n    /// @dev destAccount will be the address used to create new escrow entry\n    /// @dev the function caller (i.e. msg.sender) will be provided as a parameter\n    /// to MerkleDistributor.claimToAddress() on L2. Only valid callers will\n    /// be able to claim\n    /// @param index: used for merkle tree managment and verification\n    /// @param destAccount: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    function claimToAddress(uint256 index, address destAccount, uint256 amount, bytes32[] calldata merkleProof) external;\n}\n"
    },
    "@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.5.0 <0.9.0;\n\n/**\n * @title ICrossDomainMessenger\n */\ninterface ICrossDomainMessenger {\n    /**********\n     * Events *\n     **********/\n\n    event SentMessage(\n        address indexed target,\n        address sender,\n        bytes message,\n        uint256 messageNonce,\n        uint256 gasLimit\n    );\n    event RelayedMessage(bytes32 indexed msgHash);\n    event FailedRelayedMessage(bytes32 indexed msgHash);\n\n    /*************\n     * Variables *\n     *************/\n\n    function xDomainMessageSender() external view returns (address);\n\n    /********************\n     * Public Functions *\n     ********************/\n\n    /**\n     * Sends a cross domain message to the target messenger.\n     * @param _target Target contract address.\n     * @param _message Message to send to the target.\n     * @param _gasLimit Gas limit for the provided message.\n     */\n    function sendMessage(\n        address _target,\n        bytes calldata _message,\n        uint32 _gasLimit\n    ) external;\n}\n"
    },
    "contracts/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./utils/Owned.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\nimport \"./interfaces/IMerkleDistributor.sol\";\nimport {ICrossDomainMessenger} from \"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\";\n\n/// @title Kwenta MerkleDistributor\n/// @author JaredBorders\n/// @notice Facilitates $KWENTA distribution via Merkle Proof verification\ncontract MerkleDistributor is IMerkleDistributor, Owned {\n    /// @notice escrow for tokens claimed\n    address public immutable override rewardEscrow;\n\n    /// @notice token to be distributed (KWENTA)\n    address public immutable override token;\n\n    /// @notice contract that initiates claim from L1 (called by address attempting to claim)\n    /// @dev can only be set by owner\n    address public override controlL2MerkleDistributor;\n\n    /// @notice the merkle root of the merkle tree containing account balances available to claim\n    bytes32 public immutable override merkleRoot;\n\n    /// @notice communication between L1 and L2 is enabled by two special\n    /// smart contracts called the \"messengers\" and below is the\n    /// address for the messenger on L2\n    address private constant crossDomainMessengerAddr =\n        0x4200000000000000000000000000000000000007;\n\n    /// @notice this is a packed array of booleans\n    mapping(uint256 => uint256) private claimedBitMap;\n\n    /// @notice set addresses for deployed rewardEscrow and KWENTA.\n    /// Establish merkle root for verification\n    /// @param _owner: designated owner of this contract\n    /// @param _token: address of erc20 token to be distributed\n    /// @param _rewardEscrow: address of kwenta escrow for tokens claimed\n    /// @param _merkleRoot: used for claim verification\n    constructor(\n        address _owner,\n        address _token,\n        address _rewardEscrow,\n        bytes32 _merkleRoot\n    ) Owned(_owner) {\n        token = _token;\n        rewardEscrow = _rewardEscrow;\n        merkleRoot = _merkleRoot;\n    }\n\n    /// @notice owner can set address of ControlL2MerkleDistributor\n    /// @dev this function must be called after (1) this contract has been deployed and\n    /// (2) ControlL2MerkleDistributor has been deployed (which requires this contract's\n    /// deployment address as input in the constructor)\n    /// @param _controlL2MerkleDistributor: address of contract that initiates claim from L1\n    function setControlL2MerkleDistributor(address _controlL2MerkleDistributor)\n        external\n        override\n        onlyOwner\n    {\n        controlL2MerkleDistributor = _controlL2MerkleDistributor;\n    }\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index) public view override returns (bool) {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    /// @notice set claimed status for indexed claim to true\n    /// @param index: used for claim managment\n    function _setClaimed(uint256 index) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMap[claimedWordIndex] =\n            claimedBitMap[claimedWordIndex] |\n            (1 << claimedBitIndex);\n    }\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external override {\n        require(!isClaimed(index), \"MerkleDistributor: Drop already claimed.\");\n\n        // verify the merkle proof\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(\n            MerkleProof.verify(merkleProof, merkleRoot, node),\n            \"MerkleDistributor: Invalid proof.\"\n        );\n\n        // mark it claimed and send the token to RewardEscrow\n        _setClaimed(index);\n        IERC20(token).approve(rewardEscrow, amount);\n        IRewardEscrow(rewardEscrow).createEscrowEntry(\n            account,\n            amount,\n            52 weeks\n        );\n\n        emit Claimed(index, account, amount);\n    }\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `destAccount`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address that initiated claim and designated `destAccount`\n    /// @param destAccount: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    function claimToAddress(\n        uint256 index,\n        address account,\n        address destAccount,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external override {\n        require(!isClaimed(index), \"MerkleDistributor: Drop already claimed.\");\n\n        /// @notice function caller must be L2 Cross Domain Messenger\n        require(\n            msg.sender == crossDomainMessengerAddr,\n            \"MerkleDistributor: Only the OVM-ICrossDomainMessenger can call this function\"\n        );\n\n        /// @notice if controlL2MerkleDistributor has NOT been set, function will revert\n        require(\n            controlL2MerkleDistributor != address(0),\n            \"MerkleDistributor: controlL2MerkleDistributor has not been set by owner\"\n        );\n\n        /// @notice L1 contract which called L1 Cross Domain Messenger\n        /// must be controlL2MerkleDistributor\n        require(\n            controlL2MerkleDistributor ==\n                ICrossDomainMessenger(crossDomainMessengerAddr)\n                    .xDomainMessageSender(),\n            \"MerkleDistributor: xDomainMessageSender must be controlL2MerkleDistributor\"\n        );\n\n        // verify the merkle proof with the L1 `account` address\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(\n            MerkleProof.verify(merkleProof, merkleRoot, node),\n            \"MerkleDistributor: Invalid proof.\"\n        );\n\n        // mark it claimed and send the token to RewardEscrow\n        _setClaimed(index);\n        IERC20(token).approve(rewardEscrow, amount);\n\n        // @notice `destAccount` is used for escrow, NOT `account`\n        IRewardEscrow(rewardEscrow).createEscrowEntry(\n            destAccount,\n            amount,\n            52 weeks\n        );\n\n        emit Claimed(index, account, amount);\n    }\n}\n"
    },
    "contracts/utils/Owned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// https://docs.synthetix.io/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "contracts/interfaces/IRewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary VestingEntries {\n    struct VestingEntry {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 duration;\n    }\n    struct VestingEntryWithID {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 entryID;\n    }\n}\n\ninterface IRewardEscrow {\n    // Views\n    function getKwentaAddress() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function numVestingEntries(address account) external view returns (uint256);\n\n    function totalEscrowedAccountBalance(address account)\n        external\n        view\n        returns (uint256);\n\n    function totalVestedAccountBalance(address account)\n        external\n        view\n        returns (uint256);\n\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\n        external\n        view\n        returns (uint256, uint256);\n\n    function getVestingSchedules(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\n\n    function getAccountVestingEntryIDs(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (uint256[] memory);\n\n    function getVestingEntryClaimable(address account, uint256 entryID)\n        external\n        view\n        returns (uint256, uint256);\n\n    function getVestingEntry(address account, uint256 entryID)\n        external\n        view\n        returns (\n            uint64,\n            uint256,\n            uint256\n        );\n\n    // Mutative functions\n    function vest(uint256[] calldata entryIDs) external;\n\n    function createEscrowEntry(\n        address beneficiary,\n        uint256 deposit,\n        uint256 duration\n    ) external;\n\n    function appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) external;\n\n    function stakeEscrow(uint256 _amount) external;\n\n    function unstakeEscrow(uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMerkleDistributor {\n    /// @notice event is triggered whenever a call to `claim` succeeds\n    event Claimed(uint256 index, address account, uint256 amount);\n\n    /// @return escrow for tokens claimed\n    function rewardEscrow() external view returns (address);\n\n    /// @return token to be distributed (KWENTA)\n    function token() external view returns (address);\n\n    /// @return contract that initiates claim from L1 (called by address attempting to claim)\n    function controlL2MerkleDistributor() external view returns (address);\n\n    // @return the merkle root of the merkle tree containing account balances available to claim\n    function merkleRoot() external view returns (bytes32);\n\n    /// @notice owner can set address of ControlL2MerkleDistributor\n    /// @dev this function must be called after (1) this contract has been deployed and\n    /// (2) ControlL2MerkleDistributor has been deployed (which requires this contract's\n    /// deployment address as input in the constructor)\n    /// @param _controlL2MerkleDistributor: address of contract that initiates claim from L1\n    function setControlL2MerkleDistributor(address _controlL2MerkleDistributor)\n        external;\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index) external view returns (bool);\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external;\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `destAccount`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address that initiated claim and designated `destAccount`\n    /// @param destAccount: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    function claimToAddress(\n        uint256 index,\n        address account,\n        address destAccount,\n        uint256 amount,\n        bytes32[] calldata merkleProof\n    ) external;\n}\n"
    },
    "contracts/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\nimport \"./interfaces/ISupplySchedule.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\n\n/// @title KWENTA Staking Rewards\n/// @author SYNTHETIX, JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\n/// @notice Updated version of Synthetix's StakingRewards with new features specific\n/// to Kwenta\ncontract StakingRewards is IStakingRewards, Owned, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n\n    /*///////////////////////////////////////////////////////////////\n                                CONSTANTS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice token used for BOTH staking and rewards\n    IERC20 public immutable token;\n\n    /// @notice escrow contract which holds (and may stake) reward tokens\n    IRewardEscrow public immutable rewardEscrow;\n\n    /// @notice handles reward token minting logic\n    ISupplySchedule public immutable supplySchedule;\n\n    /*///////////////////////////////////////////////////////////////\n                                STATE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice number of tokens staked by address\n    /// @dev this includes escrowed tokens stake\n    mapping(address => uint256) private balances;\n\n    /// @notice number of staked escrow tokens by address\n    mapping(address => uint256) private escrowedBalances;\n\n    /// @notice marks applicable reward period finish time\n    uint256 public periodFinish = 0;\n\n    /// @notice amount of tokens minted per second\n    uint256 public rewardRate = 0;\n\n    /// @notice period for rewards\n    uint256 public rewardsDuration = 7 days;\n\n    /// @notice track last time the rewards were updated\n    uint256 public lastUpdateTime;\n\n    /// @notice summation of rewardRate divided by total staked tokens\n    uint256 public rewardPerTokenStored;\n\n    /// @notice total number of tokens staked in this contract\n    uint256 public _totalSupply;\n\n    /// @notice represents the rewardPerToken\n    /// value the last time the stake calculated earned() rewards\n    mapping(address => uint256) public userRewardPerTokenPaid;\n\n    /// @notice track rewards for a given user which changes when\n    /// a user stakes, unstakes, or claims rewards\n    mapping(address => uint256) public rewards;\n\n    /*///////////////////////////////////////////////////////////////\n                                EVENTS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice update reward rate\n    /// @param reward: amount to be distributed over applicable rewards duration\n    event RewardAdded(uint256 reward);\n\n    /// @notice emitted when user stakes tokens\n    /// @param user: staker address\n    /// @param amount: amount staked\n    event Staked(address indexed user, uint256 amount);\n\n    /// @notice emitted when user unstakes tokens\n    /// @param user: address of user unstaking\n    /// @param amount: amount unstaked\n    event Unstaked(address indexed user, uint256 amount);\n\n    /// @notice emitted when escrow staked\n    /// @param user: owner of escrowed tokens address\n    /// @param amount: amount staked\n    event EscrowStaked(address indexed user, uint256 amount);\n\n    /// @notice emitted when staked escrow tokens are unstaked\n    /// @param user: owner of escrowed tokens address\n    /// @param amount: amount unstaked\n    event EscrowUnstaked(address user, uint256 amount);\n\n    /// @notice emitted when user claims rewards\n    /// @param user: address of user claiming rewards\n    /// @param reward: amount of reward token claimed\n    event RewardPaid(address indexed user, uint256 reward);\n\n    /// @notice emitted when rewards duration changes\n    /// @param newDuration: denoted in seconds\n    event RewardsDurationUpdated(uint256 newDuration);\n\n    /// @notice emitted when tokens are recovered from this contract\n    /// @param token: address of token recovered\n    /// @param amount: amount of token recovered\n    event Recovered(address token, uint256 amount);\n\n    /*///////////////////////////////////////////////////////////////\n                                AUTH\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice access control modifier for rewardEscrow\n    modifier onlyRewardEscrow() {\n        require(\n            msg.sender == address(rewardEscrow),\n            \"StakingRewards: Only Reward Escrow\"\n        );\n        _;\n    }\n\n    /// @notice access control modifier for rewardEscrow\n    modifier onlySupplySchedule() {\n        require(\n            msg.sender == address(supplySchedule),\n            \"StakingRewards: Only Supply Schedule\"\n        );\n        _;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            CONSTRUCTOR\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice configure StakingRewards state\n    /// @dev owner set to address that deployed StakingRewards\n    /// @param _token: token used for staking and for rewards\n    /// @param _rewardEscrow: escrow contract which holds (and may stake) reward tokens\n    /// @param _supplySchedule: handles reward token minting logic\n    constructor(\n        address _token,\n        address _rewardEscrow,\n        address _supplySchedule\n    ) Owned(msg.sender) {\n        // define reward/staking token\n        token = IERC20(_token);\n\n        // define contracts which will interact with StakingRewards\n        rewardEscrow = IRewardEscrow(_rewardEscrow);\n        supplySchedule = ISupplySchedule(_supplySchedule);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                                VIEWS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev returns staked tokens which will likely not be equal to total tokens\n    /// in the contract since reward and staking tokens are the same\n    /// @return total amount of tokens that are being staked\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @param account: address of potential staker\n    /// @return amount of tokens staked by account\n    function balanceOf(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[account];\n    }\n\n    /// @notice Getter function for number of staked escrow tokens\n    /// @param account address to check the escrowed tokens staked\n    /// @return amount of escrowed tokens staked\n    function escrowedBalanceOf(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return escrowedBalances[account];\n    }\n\n    /// @return rewards for the duration specified by rewardsDuration\n    function getRewardForDuration() external view override returns (uint256) {\n        return rewardRate * rewardsDuration;\n    }\n\n    /// @notice Getter function for number of staked non-escrow tokens\n    /// @param account address to check the non-escrowed tokens staked\n    /// @return amount of non-escrowed tokens staked\n    function nonEscrowedBalanceOf(address account)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return balances[account] - escrowedBalances[account];\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            STAKE/UNSTAKE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice stake token\n    /// @param amount: amount to stake\n    /// @dev updateReward() called prior to function logic\n    function stake(uint256 amount)\n        external\n        override\n        nonReentrant\n        whenNotPaused\n        updateReward(msg.sender)\n    {\n        require(amount > 0, \"StakingRewards: Cannot stake 0\");\n\n        // update state\n        _totalSupply += amount;\n        balances[msg.sender] += amount;\n\n        // transfer token to this contract from the caller\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        // emit staking event and index msg.sender\n        emit Staked(msg.sender, amount);\n    }\n\n    /// @notice unstake token\n    /// @param amount: amount to unstake\n    /// @dev updateReward() called prior to function logic\n    function unstake(uint256 amount)\n        public\n        override\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        require(amount > 0, \"StakingRewards: Cannot Unstake 0\");\n        require(\n            amount <= nonEscrowedBalanceOf(msg.sender),\n            \"StakingRewards: Invalid Amount\"\n        );\n\n        // update state\n        _totalSupply -= amount;\n        balances[msg.sender] -= amount;\n\n        // transfer token from this contract to the caller\n        token.safeTransfer(msg.sender, amount);\n\n        // emit unstake event and index msg.sender\n        emit Unstaked(msg.sender, amount);\n    }\n\n    /// @notice stake escrowed token\n    /// @param account: address which owns token\n    /// @param amount: amount to stake\n    /// @dev updateReward() called prior to function logic\n    /// @dev msg.sender NOT used (account is used)\n    function stakeEscrow(address account, uint256 amount)\n        external\n        override\n        whenNotPaused\n        onlyRewardEscrow\n        updateReward(account)\n    {\n        require(amount > 0, \"StakingRewards: Cannot stake 0\");\n\n        // update state\n        balances[account] += amount;\n        escrowedBalances[account] += amount;\n\n        // updates total supply despite no new staking token being transfered.\n        // escrowed tokens are locked in RewardEscrow\n        _totalSupply += amount;\n\n        // emit escrow staking event and index _account\n        emit EscrowStaked(account, amount);\n    }\n\n    /// @notice unstake escrowed token\n    /// @param account: address which owns token\n    /// @param amount: amount to unstake\n    /// @dev updateReward() called prior to function logic\n    /// @dev msg.sender NOT used (account is used)\n    function unstakeEscrow(address account, uint256 amount)\n        external\n        override\n        nonReentrant\n        onlyRewardEscrow\n        updateReward(account)\n    {\n        require(amount > 0, \"StakingRewards: Cannot Unstake 0\");\n        require(\n            escrowedBalances[account] >= amount,\n            \"StakingRewards: Invalid Amount\"\n        );\n\n        // update state\n        balances[account] -= amount;\n        escrowedBalances[account] -= amount;\n\n        // updates total supply despite no new staking token being transfered.\n        // escrowed tokens are locked in RewardEscrow\n        _totalSupply -= amount;\n\n        // emit escrow unstaked event and index account\n        emit EscrowUnstaked(account, amount);\n    }\n\n    /// @notice unstake all available staked non-escrowed tokens and\n    /// claim any rewards\n    function exit() external override {\n        unstake(nonEscrowedBalanceOf(msg.sender));\n        getReward();\n    }    \n\n    /*///////////////////////////////////////////////////////////////\n                            CLAIM REWARDS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice caller claims any rewards generated from staking\n    /// @dev rewards are escrowed in RewardEscrow\n    /// @dev updateReward() called prior to function logic\n    function getReward() public override nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            // update state (first)\n            rewards[msg.sender] = 0;\n\n            // transfer token from this contract to the caller\n            token.safeTransfer(address(rewardEscrow), reward);\n            rewardEscrow.appendVestingEntry(msg.sender, reward, 52 weeks);\n\n            // emit reward claimed event and index msg.sender\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        REWARD UPDATE CALCULATIONS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice update reward state for the account and contract\n    /// @param account: address of account which rewards are being updated for\n    /// @dev contract state not specific to an account will be updated also\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n\n        if (account != address(0)) {\n            // update amount of rewards a user can claim\n            rewards[account] = earned(account);\n\n            // update reward per token staked AT this given time\n            // (i.e. when this user is interacting with StakingRewards)\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    /// @notice calculate running sum of reward per total tokens staked\n    /// at this specific time\n    /// @return running sum of reward per total tokens staked\n    function rewardPerToken() public view override returns (uint256) {\n        if (_totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n\n        return\n            rewardPerTokenStored +\n            (((lastTimeRewardApplicable() - lastUpdateTime) *\n                rewardRate *\n                1e18) / (_totalSupply));\n    }\n\n    /// @return timestamp of the last time rewards are applicable\n    function lastTimeRewardApplicable() public view override returns (uint256) {\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\n    }\n\n    /// @notice determine how much reward token an account has earned thus far\n    /// @param account: address of account earned amount is being calculated for\n    function earned(address account) public view override returns (uint256) {\n        return\n            ((balances[account] *\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\n            rewards[account];\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            SETTINGS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice configure reward rate\n    /// @param reward: amount of token to be distributed over a period\n    /// @dev updateReward() called prior to function logic (with zero address)\n    function notifyRewardAmount(uint256 reward)\n        external\n        override\n        onlySupplySchedule\n        updateReward(address(0))\n    {\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward / rewardsDuration;\n        } else {\n            uint256 remaining = periodFinish - block.timestamp;\n            uint256 leftover = remaining * rewardRate;\n            rewardRate = (reward + leftover) / rewardsDuration;\n        }\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp + rewardsDuration;\n        emit RewardAdded(reward);\n    }\n\n    /// @notice set rewards duration\n    /// @param _rewardsDuration: denoted in seconds\n    function setRewardsDuration(uint256 _rewardsDuration)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            block.timestamp > periodFinish,\n            \"StakingRewards: Previous rewards period must be complete before changing the duration for the new period\"\n        );\n        rewardsDuration = _rewardsDuration;\n        emit RewardsDurationUpdated(rewardsDuration);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            PAUSABLE\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @dev Triggers stopped state\n    function pauseStakingRewards() external override onlyOwner {\n        Pausable._pause();\n    }\n\n    /// @dev Returns to normal state.\n    function unpauseStakingRewards() external override onlyOwner {\n        Pausable._unpause();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                            MISCELLANEOUS\n    ///////////////////////////////////////////////////////////////*/\n\n    /// @notice added to support recovering LP Rewards from other systems\n    /// such as BAL to be distributed to holders\n    /// @param tokenAddress: address of token to be recovered\n    /// @param tokenAmount: amount of token to be recovered\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            tokenAddress != address(token),\n            \"StakingRewards: Cannot unstake the staking token\"\n        );\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStakingRewards {\n    /// VIEWS\n    // token state\n    function totalSupply() external view returns (uint256);\n    // staking state\n    function balanceOf(address account) external view returns (uint256);\n    function escrowedBalanceOf(address account) external view returns (uint256);\n    function nonEscrowedBalanceOf(address account) external view returns (uint256);\n    // rewards\n    function getRewardForDuration() external view returns (uint256);\n    function rewardPerToken() external view returns (uint256);\n    function lastTimeRewardApplicable() external view returns (uint256);\n    function earned(address account) external view returns (uint256);\n\n    /// MUTATIVE\n    // Staking/Unstaking\n    function stake(uint256 amount) external;\n    function unstake(uint256 amount) external;\n    function stakeEscrow(address account, uint256 amount) external;\n    function unstakeEscrow(address account, uint256 amount) external;\n    function exit() external;\n    // claim rewards\n    function getReward() external;\n    // settings\n    function notifyRewardAmount(uint256 reward) external;\n    function setRewardsDuration(uint256 _rewardsDuration) external;\n    // pausable\n    function pauseStakingRewards() external;\n    function unpauseStakingRewards() external;\n    // misc.\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\n}\n"
    },
    "contracts/interfaces/ISupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.24;\n\ninterface ISupplySchedule {\n    // Views\n    function mintableSupply() external view returns (uint);\n\n    function isMintable() external view returns (bool);\n\n    // Mutative functions\n\n    function mint() external;\n\n    function setTreasuryDiversion(uint _treasuryDiversion) external;\n\n    function setTradingRewardsDiversion(uint _tradingRewardsDiversion) external;\n    \n    function setStakingRewards(address _stakingRewards) external;\n\n    function setTradingRewards(address _tradingRewards) external;\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/SupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/ISupplySchedule.sol\";\n\n// Libraries\nimport \"./libraries/SafeDecimalMath.sol\";\nimport \"./libraries/Math.sol\";\n\n// Internal references\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IKwenta.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\nimport \"./interfaces/IMultipleMerkleDistributor.sol\";\n\n// https://docs.synthetix.io/contracts/source/contracts/supplyschedule\ncontract SupplySchedule is Owned, ISupplySchedule {\n    using SafeDecimalMath for uint;\n    using Math for uint;\n\n    IKwenta public kwenta;\n    IStakingRewards public stakingRewards;\n    IMultipleMerkleDistributor public tradingRewards;\n\n    // Time of the last inflation supply mint event\n    uint public lastMintEvent;\n\n    // Counter for number of weeks since the start of supply inflation\n    uint public weekCounter;\n\n    // The number of KWENTA rewarded to the caller of Kwenta.mint()\n    uint public minterReward = 1e18;\n\n    uint public constant INITIAL_SUPPLY = 313373e18;\n\n    // Initial Supply * 240% Initial Inflation Rate / 52 weeks.\n    uint public constant INITIAL_WEEKLY_SUPPLY = INITIAL_SUPPLY * 240 / 100 / 52;\n\n    // Max KWENTA rewards for minter\n    uint public constant MAX_MINTER_REWARD = 20 * 1e18;\n\n    // How long each inflation period is before mint can be called\n    uint public constant MINT_PERIOD_DURATION = 1 weeks;\n\n    uint public immutable inflationStartDate;\n    uint public constant MINT_BUFFER = 1 days;\n    uint8 public constant SUPPLY_DECAY_START = 2; // Supply decay starts on the 2nd week of rewards\n    uint8 public constant SUPPLY_DECAY_END = 208; // Inclusive of SUPPLY_DECAY_END week.\n\n    // Weekly percentage decay of inflationary supply\n    uint public constant DECAY_RATE = 20500000000000000; // 2.05% weekly\n\n    // Percentage growth of terminal supply per annum\n    uint public constant TERMINAL_SUPPLY_RATE_ANNUAL = 10000000000000000; // 1.0% pa\n\n    uint public treasuryDiversion = 2000; // 20% to treasury\n    uint public tradingRewardsDiversion = 2000;\n\n    // notice treasury address may change\n    address public treasuryDAO;\n\n    /* ========== EVENTS ========== */\n    \n    /**\n     * @notice Emitted when the inflationary supply is minted\n     **/\n    event SupplyMinted(uint supplyMinted, uint numberOfWeeksIssued, uint lastMintEvent);\n\n    /**\n     * @notice Emitted when the KWENTA minter reward amount is updated\n     **/\n    event MinterRewardUpdated(uint newRewardAmount);\n\n    /**\n     * @notice Emitted when setKwenta is called changing the Kwenta Proxy address\n     **/\n    event KwentaUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when treasury inflation share is changed\n     **/\n    event TreasuryDiversionUpdated(uint newPercentage);\n\n    /**\n     * @notice Emitted when trading rewards inflation share is changed\n     **/\n    event TradingRewardsDiversionUpdated(uint newPercentage);\n\n    /**\n     * @notice Emitted when StakingRewards is changed\n     **/\n    event StakingRewardsUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when TradingRewards is changed\n     **/\n    event TradingRewardsUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when treasuryDAO address is changed\n     **/\n    event TreasuryDAOSet(address treasuryDAO);\n\n    constructor(\n        address _owner,\n        address _treasuryDAO\n    ) Owned(_owner) {\n        treasuryDAO = _treasuryDAO;\n\n        inflationStartDate = block.timestamp; // inflation starts as soon as the contract is deployed.\n        lastMintEvent = block.timestamp;\n        weekCounter = 0;\n    }\n\n    // ========== VIEWS ==========\n\n    /**\n     * @return The amount of KWENTA mintable for the inflationary supply\n     */\n    function mintableSupply() override public view returns (uint) {\n        uint totalAmount;\n\n        if (!isMintable()) {\n            return totalAmount;\n        }\n\n        uint remainingWeeksToMint = weeksSinceLastIssuance();\n\n        uint currentWeek = weekCounter;\n\n        // Calculate total mintable supply from exponential decay function\n        // The decay function stops after week 208\n        while (remainingWeeksToMint > 0) {\n            currentWeek++;\n\n            if (currentWeek < SUPPLY_DECAY_START) {\n                // If current week is before supply decay we add initial supply to mintableSupply\n                totalAmount = totalAmount + INITIAL_WEEKLY_SUPPLY;\n                remainingWeeksToMint--;\n            } else if (currentWeek <= SUPPLY_DECAY_END) {\n                // if current week before supply decay ends we add the new supply for the week\n                // diff between current week and (supply decay start week - 1)\n                uint decayCount = currentWeek - (SUPPLY_DECAY_START - 1);\n\n                totalAmount = totalAmount + tokenDecaySupplyForWeek(decayCount);\n                remainingWeeksToMint--;\n            } else {\n                // Terminal supply is calculated on the total supply of Kwenta including any new supply\n                // We can compound the remaining week's supply at the fixed terminal rate\n                uint totalSupply = IERC20(kwenta).totalSupply();\n                uint currentTotalSupply = totalSupply + totalAmount;\n\n                totalAmount = totalAmount + terminalInflationSupply(currentTotalSupply, remainingWeeksToMint);\n                remainingWeeksToMint = 0;\n            }\n        }\n\n        return totalAmount;\n    }\n\n    /**\n     * @return A unit amount of decaying inflationary supply from the INITIAL_WEEKLY_SUPPLY\n     * @dev New token supply reduces by the decay rate each week calculated as supply = INITIAL_WEEKLY_SUPPLY * ()\n     */\n    function tokenDecaySupplyForWeek(uint counter) public pure returns (uint) {\n        // Apply exponential decay function to number of weeks since\n        // start of inflation smoothing to calculate diminishing supply for the week.\n        uint effectiveDecay = (SafeDecimalMath.unit() - DECAY_RATE).powDecimal(counter);\n        uint supplyForWeek = INITIAL_WEEKLY_SUPPLY.multiplyDecimal(effectiveDecay);\n\n        return supplyForWeek;\n    }\n\n    /**\n     * @return A unit amount of terminal inflation supply\n     * @dev Weekly compound rate based on number of weeks\n     */\n    function terminalInflationSupply(uint totalSupply, uint numOfWeeks) public pure returns (uint) {\n        // rate = (1 + weekly rate) ^ num of weeks\n        uint effectiveCompoundRate = (SafeDecimalMath.unit() + (TERMINAL_SUPPLY_RATE_ANNUAL / 52)).powDecimal(numOfWeeks);\n\n        // return Supply * (effectiveRate - 1) for extra supply to issue based on number of weeks\n        return totalSupply.multiplyDecimal(effectiveCompoundRate - SafeDecimalMath.unit());\n    }\n\n    /**\n     * @dev Take timeDiff in seconds (Dividend) and MINT_PERIOD_DURATION as (Divisor)\n     * @return Calculate the numberOfWeeks since last mint rounded down to 1 week\n     */\n    function weeksSinceLastIssuance() public view returns (uint) {\n        // Get weeks since lastMintEvent\n        // If lastMintEvent not set or 0, then start from inflation start date.\n        uint timeDiff = block.timestamp - lastMintEvent;\n        return timeDiff / MINT_PERIOD_DURATION;\n    }\n\n    /**\n     * @return boolean whether the MINT_PERIOD_DURATION (7 days)\n     * has passed since the lastMintEvent.\n     * */\n    function isMintable() override public view returns (bool) {\n        return block.timestamp - lastMintEvent > MINT_PERIOD_DURATION;\n    }\n\n    // ========== MUTATIVE FUNCTIONS ==========\n\n    /**\n     * @notice Record the mint event from Kwenta by incrementing the inflation\n     * week counter for the number of weeks minted (probabaly always 1)\n     * and store the time of the event.\n     * @param supplyMinted the amount of KWENTA the total supply was inflated by.\n     * */\n    function recordMintEvent(uint supplyMinted) internal returns (bool) {\n        uint numberOfWeeksIssued = weeksSinceLastIssuance();\n\n        // add number of weeks minted to weekCounter\n        weekCounter = weekCounter + numberOfWeeksIssued;\n\n        // Update mint event to latest week issued (start date + number of weeks issued * seconds in week)\n        // 1 day time buffer is added so inflation is minted after feePeriod closes\n        lastMintEvent = inflationStartDate + (weekCounter * MINT_PERIOD_DURATION) + MINT_BUFFER;\n\n        emit SupplyMinted(supplyMinted, numberOfWeeksIssued, lastMintEvent);\n        return true;\n    }\n\n    /**\n     * @notice Mints new inflationary supply weekly\n     * New KWENTA is distributed between the minter, treasury, and StakingRewards contract\n     * */\n    function mint() override external {\n        require(address(stakingRewards) != address(0), \"Staking rewards not set\");\n        require(address(tradingRewards) != address(0), \"Trading rewards not set\");\n\n        uint supplyToMint = mintableSupply();\n        require(supplyToMint > 0, \"No supply is mintable\");\n\n        // record minting event before mutation to token supply\n        recordMintEvent(supplyToMint);\n\n        uint amountToDistribute = supplyToMint - minterReward;\n        uint amountToTreasury = amountToDistribute * treasuryDiversion / 10000;\n        uint amountToTradingRewards = amountToDistribute * tradingRewardsDiversion / 10000;\n        uint amountToStakingRewards = amountToDistribute - amountToTreasury - amountToTradingRewards;\n\n        kwenta.mint(treasuryDAO, amountToTreasury);\n        kwenta.mint(address(tradingRewards), amountToTradingRewards);\n        kwenta.mint(address(stakingRewards), amountToStakingRewards);\n        stakingRewards.notifyRewardAmount(amountToStakingRewards);\n        kwenta.mint(msg.sender, minterReward);\n    }\n\n    // ========== SETTERS ========== */\n\n    /**\n     * @notice Set the Kwenta should it ever change.\n     * SupplySchedule requires Kwenta address as it has the authority\n     * to record mint event.\n     * */\n    function setKwenta(IKwenta _kwenta) external onlyOwner {\n        require(address(_kwenta) != address(0), \"Address cannot be 0\");\n        kwenta = _kwenta;\n        emit KwentaUpdated(address(kwenta));\n    }\n\n    /**\n     * @notice Sets the reward amount of KWENTA for the caller of the public\n     * function Kwenta.mint().\n     * This incentivises anyone to mint the inflationary supply and the mintr\n     * Reward will be deducted from the inflationary supply and sent to the caller.\n     * @param amount the amount of KWENTA to reward the minter.\n     * */\n    function setMinterReward(uint amount) external onlyOwner {\n        require(amount <= MAX_MINTER_REWARD, \"SupplySchedule: Reward cannot exceed max minter reward\");\n        minterReward = amount;\n        emit MinterRewardUpdated(minterReward);\n    }\n\n    function setTreasuryDiversion(uint _treasuryDiversion) override external onlyOwner {\n        require(_treasuryDiversion + tradingRewardsDiversion < 10000, \"SupplySchedule: Cannot be more than 100%\");\n        treasuryDiversion = _treasuryDiversion;\n        emit TreasuryDiversionUpdated(_treasuryDiversion);\n    }\n\n    function setTradingRewardsDiversion(uint _tradingRewardsDiversion) override external onlyOwner {\n        require(_tradingRewardsDiversion + treasuryDiversion < 10000, \"SupplySchedule: Cannot be more than 100%\");\n        tradingRewardsDiversion = _tradingRewardsDiversion;\n        emit TradingRewardsDiversionUpdated(_tradingRewardsDiversion);\n    }\n\n    function setStakingRewards(address _stakingRewards) override external onlyOwner {\n        require(_stakingRewards != address(0), \"SupplySchedule: Invalid Address\");\n        stakingRewards = IStakingRewards(_stakingRewards);\n        emit StakingRewardsUpdated(_stakingRewards);\n    }\n\n    function setTradingRewards(address _tradingRewards) override external onlyOwner {\n        require(_tradingRewards != address(0), \"SupplySchedule: Invalid Address\");\n        tradingRewards = IMultipleMerkleDistributor(_tradingRewards);\n        emit TradingRewardsUpdated(_tradingRewards);\n    }\n\n    /// @notice set treasuryDAO address\n    /// @dev only owner may change address\n    function setTreasuryDAO(address _treasuryDAO) external onlyOwner {\n        require(_treasuryDAO != address(0), \"SupplySchedule: Zero Address\");\n        treasuryDAO = _treasuryDAO;\n        emit TreasuryDAOSet(treasuryDAO);\n    }\n}"
    },
    "contracts/libraries/SafeDecimalMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint256 public constant UNIT = 10**uint256(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint256 public constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\n        10**uint256(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint256) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint256) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return (x * y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return (x * UNIT) / y;\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint256 i)\n        internal\n        pure\n        returns (uint256)\n    {\n        return i * UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR;\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint256 i)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 quotientTimesTen = i /\n            (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    // Computes `a - b`, setting the value to 0 if b > a.\n    function floorsub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return b >= a ? 0 : a - b;\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Libraries\nimport \"./SafeDecimalMath.sol\";\n\n// https://docs.synthetix.io/contracts/source/libraries/math\nlibrary Math {\n    using SafeDecimalMath for uint;\n\n    /**\n     * @dev Uses \"exponentiation by squaring\" algorithm where cost is 0(logN)\n     * vs 0(N) for naive repeated multiplication.\n     * Calculates x^n with x as fixed-point and n as regular unsigned int.\n     * Calculates to 18 digits of precision with SafeDecimalMath.unit()\n     */\n    function powDecimal(uint x, uint n) internal pure returns (uint) {\n        // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\n\n        uint result = SafeDecimalMath.unit();\n        while (n > 0) {\n            if (n % 2 != 0) {\n                result = result.multiplyDecimal(x);\n            }\n            x = x.multiplyDecimal(x);\n            n /= 2;\n        }\n        return result;\n    }\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/IKwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IKwenta is IERC20 {\n\n    function mint(address account, uint amount) external;\n\n    function burn(uint amount) external;\n\n    function setSupplySchedule(address _supplySchedule) external;\n\n}"
    },
    "contracts/interfaces/IMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMultipleMerkleDistributor {\n    /// @notice data structure for aggregating multiple claims\n    struct Claims {\n        uint256 index;\n        address account;\n        uint256 amount;\n        bytes32[] merkleProof;\n        uint256 epoch;\n    }\n\n    /// @notice event is triggered whenever a call to `claim` succeeds\n    event Claimed(\n        uint256 index,\n        address account,\n        uint256 amount,\n        uint256 epoch\n    );\n\n    /// @notice event is triggered whenever a new merkle root is added\n    event MerkleRootAdded(uint256 epoch);\n\n    /// @return escrow for tokens claimed\n    function rewardEscrow() external view returns (address);\n\n    /// @return token to be distributed (KWENTA)\n    function token() external view returns (address);\n\n    // @return the merkle root of the merkle tree containing account balances available to claim\n    function merkleRoots(uint256) external view returns (bytes32);\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index number\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index, uint256 epoch)\n        external\n        view\n        returns (bool);\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    /// @param epoch: distribution index number\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) external;\n\n    /// @notice function that aggregates multiple claims\n    /// @param claims: array of valid claims\n    function claimMultiple(Claims[] calldata claims) external;\n}\n"
    },
    "contracts/MultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./utils/Owned.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\nimport \"./interfaces/IMultipleMerkleDistributor.sol\";\n\n/// @title Kwenta MultipleMerkleDistributor\n/// @author JaredBorders and JChiaramonte7\n/// @notice Facilitates trading incentives distribution over multiple periods.\ncontract MultipleMerkleDistributor is IMultipleMerkleDistributor, Owned {\n    /// @notice escrow for tokens claimed\n    address public immutable override rewardEscrow;\n\n    /// @notice token to be distributed (KWENTA)\n    address public immutable override token;\n\n    /// @notice an index that is incremented for each new merkle root\n    uint256 public distributionEpoch;\n\n    /// @notice an epoch to merkle root mapping\n    /// of a merkle tree containing account balances available to claim\n    mapping(uint256 => bytes32) public override merkleRoots;\n\n    /// @notice an epoch to packed array of claimed booleans mapping\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMaps;\n\n    /// @notice set addresses for deployed rewardEscrow and KWENTA.\n    /// Establish merkle root for verification\n    /// @param _owner: designated owner of this contract\n    /// @param _token: address of erc20 token to be distributed\n    /// @param _rewardEscrow: address of kwenta escrow for tokens claimed\n    constructor(\n        address _owner,\n        address _token,\n        address _rewardEscrow\n    ) Owned(_owner) {\n        token = _token;\n        rewardEscrow = _rewardEscrow;\n    }\n\n    /// @notice set new merkle root for new distribution epoch\n    /// @dev calling this function will increment distributionEpoch\n    /// @param _merkleRoot: new merkle root\n    function newMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        merkleRoots[distributionEpoch] = _merkleRoot;\n        emit MerkleRootAdded(distributionEpoch);\n        distributionEpoch++;\n    }\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index to check\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index, uint256 epoch)\n        public\n        view\n        override\n        returns (bool)\n    {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMaps[epoch][claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    /// @notice set claimed status for indexed claim to true\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index to check\n    function _setClaimed(uint256 index, uint256 epoch) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMaps[epoch][claimedWordIndex] =\n            claimedBitMaps[epoch][claimedWordIndex] |\n            (1 << claimedBitIndex);\n    }\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    /// @param epoch: distribution index to check\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) public override {\n        require(\n            !isClaimed(index, epoch),\n            \"MultipleMerkleDistributor: Drop already claimed.\"\n        );\n\n        // verify the merkle proof\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(\n            MerkleProof.verify(merkleProof, merkleRoots[epoch], node),\n            \"MultipleMerkleDistributor: Invalid proof.\"\n        );\n\n        // mark it claimed and send the token to RewardEscrow\n        _setClaimed(index, epoch);\n        IERC20(token).approve(rewardEscrow, amount);\n        IRewardEscrow(rewardEscrow).createEscrowEntry(\n            account,\n            amount,\n            52 weeks\n        );\n\n        emit Claimed(index, account, amount, epoch);\n    }\n\n    /// @notice function that aggregates multiple claims\n    /// @param claims: array of valid claims\n    function claimMultiple(Claims[] calldata claims) external override {\n        uint256 cacheLength = claims.length;\n        for (uint256 i = 0; i < cacheLength; ) {\n            claim(\n                claims[i].index,\n                claims[i].account,\n                claims[i].amount,\n                claims[i].merkleProof,\n                claims[i].epoch\n            );\n            unchecked {\n                i++;\n            }\n        }\n    }\n}\n"
    },
    "contracts/RewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n// Inheritance\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\n\n// Libraries\nimport \"./libraries/SafeDecimalMath.sol\";\n\n// Internal references\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IKwenta.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\n\ncontract RewardEscrow is Owned, IRewardEscrow {\n    using SafeDecimalMath for uint;\n\n    /* ========== CONSTANTS/IMMUTABLES ========== */\n\n    /* Max escrow duration */\n    uint public constant MAX_DURATION = 2 * 52 weeks; // Default max 2 years duration\n\n    IKwenta private immutable kwenta;\n\n    /* ========== STATE VARIABLES ========== */\n\n    IStakingRewards public stakingRewards;\n\n    mapping(address => mapping(uint256 => VestingEntries.VestingEntry)) public vestingSchedules;\n\n    mapping(address => uint256[]) public accountVestingEntryIDs;\n\n    // Counter for new vesting entry ids \n    uint256 public nextEntryId;\n\n    // An account's total escrowed KWENTA balance to save recomputing this for fee extraction purposes\n    mapping(address => uint256) override public totalEscrowedAccountBalance;\n\n    // An account's total vested reward KWENTA \n    mapping(address => uint256) override public totalVestedAccountBalance;\n\n    // The total remaining escrowed balance, for verifying the actual KWENTA balance of this contract against\n    uint256 public totalEscrowedBalance;\n\n    // notice treasury address may change\n    address public treasuryDAO;\n\n    /* ========== MODIFIERS ========== */\n    modifier onlyStakingRewards() {\n        require(msg.sender == address(stakingRewards), \"Only the StakingRewards can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n    event Vested(address indexed beneficiary, uint value);\n    event VestingEntryCreated(address indexed beneficiary, uint value, uint duration, uint entryID);\n    event StakingRewardsSet(address rewardEscrow);\n    event TreasuryDAOSet(address treasuryDAO);\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _owner, address _kwenta) Owned(_owner) {\n        nextEntryId = 1;\n\n        // set the Kwenta contract address as we need to transfer KWENTA when the user vests\n        kwenta = IKwenta(_kwenta);\n    }\n\n    /* ========== SETTERS ========== */\n\n    /*\n    * @notice Function used to define the StakingRewards to use\n    */\n    function setStakingRewards(address _stakingRewards) public onlyOwner {\n        require(address(stakingRewards) == address(0), \"Staking Rewards already set\");\n        stakingRewards = IStakingRewards(_stakingRewards);\n        emit StakingRewardsSet(address(_stakingRewards));\n    }\n\n    /// @notice set treasuryDAO address\n    /// @dev only owner may change address\n    function setTreasuryDAO(address _treasuryDAO) external onlyOwner {\n        require(_treasuryDAO != address(0), \"RewardEscrow: Zero Address\");\n        treasuryDAO = _treasuryDAO;\n        emit TreasuryDAOSet(treasuryDAO);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice helper function to return kwenta address\n     */\n    function getKwentaAddress() override external view returns (address) {\n        return address(kwenta);\n    }\n\n    /**\n     * @notice A simple alias to totalEscrowedAccountBalance: provides ERC20 balance integration.\n     */\n    function balanceOf(address account) override public view returns (uint) {\n        return totalEscrowedAccountBalance[account];\n    }\n\n    /**\n     * @notice The number of vesting dates in an account's schedule.\n     */\n    function numVestingEntries(address account) override external view returns (uint) {\n        return accountVestingEntryIDs[account].length;\n    }\n\n    /**\n     * @notice Get a particular schedule entry for an account.\n     * @return endTime the vesting entry object \n     * @return escrowAmount rate per second emission.\n     */\n    function getVestingEntry(address account, uint256 entryID) override external view returns (uint64 endTime, uint256 escrowAmount, uint256 duration) {\n        endTime = vestingSchedules[account][entryID].endTime;\n        escrowAmount = vestingSchedules[account][entryID].escrowAmount;\n        duration = vestingSchedules[account][entryID].duration;\n    }\n\n    function getVestingSchedules(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) override external view returns (VestingEntries.VestingEntryWithID[] memory) {\n        uint256 endIndex = index + pageSize;\n\n        // If index starts after the endIndex return no results\n        if (endIndex <= index) {\n            return new VestingEntries.VestingEntryWithID[](0);\n        }\n\n        // If the page extends past the end of the accountVestingEntryIDs, truncate it.\n        if (endIndex > accountVestingEntryIDs[account].length) {\n            endIndex = accountVestingEntryIDs[account].length;\n        }\n\n        uint256 n = endIndex - index;\n        VestingEntries.VestingEntryWithID[] memory vestingEntries = new VestingEntries.VestingEntryWithID[](n);\n        for (uint256 i; i < n; i++) {\n            uint256 entryID = accountVestingEntryIDs[account][i + index];\n\n            VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryID];\n\n            vestingEntries[i] = VestingEntries.VestingEntryWithID({\n                endTime: uint64(entry.endTime),\n                escrowAmount: entry.escrowAmount,\n                entryID: entryID\n            });\n        }\n        return vestingEntries;\n    }\n\n    function getAccountVestingEntryIDs(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) override external view returns (uint256[] memory) {\n        uint256 endIndex = index + pageSize;\n\n        // If the page extends past the end of the accountVestingEntryIDs, truncate it.\n        if (endIndex > accountVestingEntryIDs[account].length) {\n            endIndex = accountVestingEntryIDs[account].length;\n        }\n        if (endIndex <= index) {\n            return new uint256[](0);\n        }\n\n        uint256 n = endIndex - index;\n        uint256[] memory page = new uint256[](n);\n        for (uint256 i; i < n; i++) {\n            page[i] = accountVestingEntryIDs[account][i + index];\n        }\n        return page;\n    }\n\n    function getVestingQuantity(address account, uint256[] calldata entryIDs) override external view returns (uint total, uint totalFee) {\n        for (uint i = 0; i < entryIDs.length; i++) {\n            VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryIDs[i]];\n\n            /* Skip entry if escrowAmount == 0 */\n            if (entry.escrowAmount != 0) {\n                (uint256 quantity, uint256 fee) = _claimableAmount(entry);\n\n                /* add quantity to total */\n                total += quantity;\n                totalFee += fee;\n            }\n        }\n    }\n\n    function getVestingEntryClaimable(address account, uint256 entryID) override external view returns (uint quantity, uint fee) {\n        VestingEntries.VestingEntry memory entry = vestingSchedules[account][entryID];\n        (quantity, fee) = _claimableAmount(entry);\n    }\n\n    function _claimableAmount(VestingEntries.VestingEntry memory _entry) internal view returns (uint256 quantity, uint256 fee) {\n        uint256 escrowAmount = _entry.escrowAmount;\n\n        if (escrowAmount != 0) {\n            /* Full escrow amounts claimable if block.timestamp equal to or after entry endTime */\n            if (block.timestamp >= _entry.endTime) {\n                quantity = escrowAmount;\n            } else {\n                fee = _earlyVestFee(_entry);\n                quantity = escrowAmount - fee;\n            }\n        }\n    }\n\n    function _earlyVestFee(VestingEntries.VestingEntry memory _entry) internal view returns (uint256 earlyVestFee) {\n        uint timeUntilVest = _entry.endTime - block.timestamp;\n        // Fee starts at 90% and falls linearly\n        uint initialFee = _entry.escrowAmount * 9 / 10;\n        earlyVestFee = initialFee * timeUntilVest / _entry.duration;\n    }\n\n    function _isEscrowStaked(address _account) internal view returns (bool) {\n        return stakingRewards.escrowedBalanceOf(_account) > 0;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * Vest escrowed amounts that are claimable\n     * Allows users to vest their vesting entries based on msg.sender\n     */\n\n    function vest(uint256[] calldata entryIDs) override external {\n        uint256 total;\n        uint256 totalFee;\n        for (uint i = 0; i < entryIDs.length; i++) {\n            VestingEntries.VestingEntry storage entry = vestingSchedules[msg.sender][entryIDs[i]];\n\n            /* Skip entry if escrowAmount == 0 already vested */\n            if (entry.escrowAmount != 0) {\n                (uint256 quantity, uint256 fee) = _claimableAmount(entry);\n\n                /* update entry to remove escrowAmount */\n                entry.escrowAmount = 0;\n\n                /* add quantity to total */\n                total += quantity;\n                totalFee += fee;\n            }\n        }\n\n        /* Transfer vested tokens. Will revert if total > totalEscrowedAccountBalance */\n        if (total != 0) {\n            // Withdraw staked escrowed kwenta if needed for reward\n            if (_isEscrowStaked(msg.sender)) {\n                uint totalWithFee = total + totalFee;\n                uint unstakedEscrow = totalEscrowedAccountBalance[msg.sender] - stakingRewards.escrowedBalanceOf(msg.sender);\n                if (totalWithFee > unstakedEscrow) {\n                    uint amountToUnstake = totalWithFee - unstakedEscrow;\n                    unstakeEscrow(amountToUnstake);\n                }\n            }\n\n            // Send any fee to Treasury\n            if (totalFee != 0) {\n                _reduceAccountEscrowBalances(msg.sender, totalFee);\n                require(\n                    IKwenta(address(kwenta))\n                        .transfer(treasuryDAO, totalFee), \n                        \"RewardEscrow: Token Transfer Failed\"\n                );\n            }\n\n            // Transfer kwenta\n            _transferVestedTokens(msg.sender, total);\n        }\n        \n    }\n\n    /**\n     * @notice Create an escrow entry to lock KWENTA for a given duration in seconds\n     * @dev This call expects that the depositor (msg.sender) has already approved the Reward escrow contract\n     * to spend the the amount being escrowed.\n     */\n    function createEscrowEntry(\n        address beneficiary,\n        uint256 deposit,\n        uint256 duration\n    ) override external {\n        require(beneficiary != address(0), \"Cannot create escrow with address(0)\");\n\n        /* Transfer KWENTA from msg.sender */\n        require(IERC20(kwenta).transferFrom(msg.sender, address(this), deposit), \"Token transfer failed\");\n\n        /* Append vesting entry for the beneficiary address */\n        _appendVestingEntry(beneficiary, deposit, duration);\n    }\n\n    /**\n     * @notice Add a new vesting entry at a given time and quantity to an account's schedule.\n     * @dev A call to this should accompany a previous successful call to kwenta.transfer(rewardEscrow, amount),\n     * to ensure that when the funds are withdrawn, there is enough balance.\n     * @param account The account to append a new vesting entry to.\n     * @param quantity The quantity of KWENTA that will be escrowed.\n     * @param duration The duration that KWENTA will be emitted.\n     */\n    function appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) override external onlyStakingRewards {\n        _appendVestingEntry(account, quantity, duration);\n    }\n\n    /**\n     * @notice Stakes escrowed KWENTA.\n     * @dev No tokens are transfered during this process, but the StakingRewards escrowed balance is updated.\n     * @param _amount The amount of escrowed KWENTA to be staked.\n     */\n    function stakeEscrow(uint256 _amount) override external {\n        require(_amount + stakingRewards.escrowedBalanceOf(msg.sender) <= totalEscrowedAccountBalance[msg.sender], \"Insufficient unstaked escrow\");\n        stakingRewards.stakeEscrow(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Unstakes escrowed KWENTA.\n     * @dev No tokens are transfered during this process, but the StakingRewards escrowed balance is updated.\n     * @param _amount The amount of escrowed KWENTA to be unstaked.\n     */\n    function unstakeEscrow(uint256 _amount) override public {\n        stakingRewards.unstakeEscrow(msg.sender, _amount);\n    }\n\n    /* Transfer vested tokens and update totalEscrowedAccountBalance, totalVestedAccountBalance */\n    function _transferVestedTokens(address _account, uint256 _amount) internal {\n        _reduceAccountEscrowBalances(_account, _amount);\n        totalVestedAccountBalance[_account] += _amount;\n        IERC20(address(kwenta)).transfer(_account, _amount);\n        emit Vested(_account, _amount);\n    }\n\n    function _reduceAccountEscrowBalances(address _account, uint256 _amount) internal {\n        // Reverts if amount being vested is greater than the account's existing totalEscrowedAccountBalance\n        totalEscrowedBalance -= _amount;\n        totalEscrowedAccountBalance[_account] -= _amount;\n    }\n\n    /* ========== INTERNALS ========== */\n\n    function _appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) internal {\n        /* No empty or already-passed vesting entries allowed. */\n        require(quantity != 0, \"Quantity cannot be zero\");\n        require(duration > 0 && duration <= MAX_DURATION, \"Cannot escrow with 0 duration OR above max_duration\");\n\n        /* There must be enough balance in the contract to provide for the vesting entry. */\n        totalEscrowedBalance += quantity;\n\n        require(\n            totalEscrowedBalance <= IERC20(address(kwenta)).balanceOf(address(this)),\n            \"Must be enough balance in the contract to provide for the vesting entry\"\n        );\n\n        /* Escrow the tokens for duration. */\n        uint endTime = block.timestamp + duration;\n\n        /* Add quantity to account's escrowed balance */\n        totalEscrowedAccountBalance[account] += quantity;\n\n        uint entryID = nextEntryId;\n        vestingSchedules[account][entryID] = VestingEntries.VestingEntry({endTime: uint64(endTime), escrowAmount: quantity, duration: duration});\n\n        accountVestingEntryIDs[account].push(entryID);\n\n        /* Increment the next entry id. */\n        nextEntryId++;\n\n        emit VestingEntryCreated(account, quantity, duration, entryID);\n    }\n}\n"
    },
    "contracts/Kwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./utils/ERC20.sol\";\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/ISupplySchedule.sol\";\nimport \"./interfaces/IKwenta.sol\";\n\ncontract Kwenta is ERC20, Owned, IKwenta {\n    /// @notice defines inflationary supply schedule,\n    /// according to which the KWENTA inflationary supply is released\n    ISupplySchedule public supplySchedule;\n\n    modifier onlySupplySchedule() {\n        require(\n            msg.sender == address(supplySchedule),\n            \"Kwenta: Only SupplySchedule can perform this action\"\n        );\n        _;\n    }\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 _initialSupply,\n        address _owner,\n        address _initialHolder\n    ) ERC20(name, symbol) Owned(_owner) {\n        _mint(_initialHolder, _initialSupply);\n    }\n\n    // Mints inflationary supply\n    function mint(address account, uint256 amount)\n        external\n        override\n        onlySupplySchedule\n    {\n        _mint(account, amount);\n    }\n\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    function setSupplySchedule(address _supplySchedule)\n        external\n        override\n        onlyOwner\n    {\n        require(_supplySchedule != address(0), \"Kwenta: Invalid Address\");\n        supplySchedule = ISupplySchedule(_supplySchedule);\n    }\n}\n"
    },
    "contracts/utils/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    },
    "contracts/vKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IvKwentaRedeemer.sol\";\nimport \"./utils/ERC20.sol\";\n\n/// @title A redemption contract for Kwenta\n/// @dev All vKwenta used for redemption is locked within this contract\ncontract vKwentaRedeemer is IvKwentaRedeemer {\n    /// token to be burned\n    address public immutable vToken;\n    /// token to be redeemed\n    address public immutable token;\n\n    event Redeemed(address redeemer, uint256 redeemedAmount);\n\n    constructor(address _vToken, address _token) {\n        vToken = _vToken;\n        token = _token;\n    }\n\n    /// Allows caller to redeem an equivalent amount of token for vToken\n    /// @dev caller must approve this contract to spend vToken\n    /// @notice vToken is locked within this contract prior to transfer of token\n    function redeem() external override {\n        uint256 vTokenBalance = IERC20(vToken).balanceOf(msg.sender);\n\n        /// ensure valid balance\n        require(vTokenBalance > 0, \"vKwentaRedeemer: No balance to redeem\");\n        require(\n            vTokenBalance <= IERC20(token).balanceOf(address(this)),\n            \"vKwentaRedeemer: Insufficient contract balance\"\n        );\n\n        /// lock vToken in this contract\n        require(\n            IERC20(vToken).transferFrom(\n                msg.sender,\n                address(this),\n                vTokenBalance\n            ),\n            \"vKwentaRedeemer: vToken transfer failed\"\n        );\n\n        /// transfer token\n        require(\n            IERC20(token).transfer(msg.sender, vTokenBalance),\n            \"vKwentaRedeemer: token transfer failed\"\n        );\n\n        emit Redeemed(msg.sender, vTokenBalance);\n    }\n}\n"
    },
    "contracts/interfaces/IvKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IvKwentaRedeemer {\n    \n    function redeem() external;\n\n}"
    },
    "contracts/vKwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./utils/ERC20.sol\";\n\n/// @notice Purpose of this contract was to mint vKwenta for the initial Aelin raise.\n/// @dev This is a one time use contract and supply can never be increased.\ncontract vKwenta is ERC20 {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _beneficiary,\n        uint256 _amount\n    ) ERC20(_name, _symbol) {\n        _mint(_beneficiary, _amount);\n    }\n}\n"
    },
    "contracts-exposed/ControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/ControlL2MerkleDistributor.sol\";\n\ncontract $ControlL2MerkleDistributor is ControlL2MerkleDistributor {\n    constructor(address _crossDomainMessengerAddr, address _merkleDistributorL2Address) ControlL2MerkleDistributor(_crossDomainMessengerAddr, _merkleDistributorL2Address) {}\n\n    function $crossDomainMessengerAddr() external view returns (address) {\n        return crossDomainMessengerAddr;\n    }\n\n    function $merkleDistributorL2Address() external view returns (address) {\n        return merkleDistributorL2Address;\n    }\n}\n"
    },
    "contracts-exposed/Kwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/Kwenta.sol\";\n\ncontract $Kwenta is Kwenta {\n    constructor(string memory name, string memory symbol, uint256 _initialSupply, address _owner, address _initialHolder) Kwenta(name, symbol, _initialSupply, _owner, _initialHolder) {}\n\n    function $_transfer(address sender,address recipient,uint256 amount) external {\n        return super._transfer(sender,recipient,amount);\n    }\n\n    function $_mint(address account,uint256 amount) external {\n        return super._mint(account,amount);\n    }\n\n    function $_burn(address account,uint256 amount) external {\n        return super._burn(account,amount);\n    }\n\n    function $_approve(address owner,address spender,uint256 amount) external {\n        return super._approve(owner,spender,amount);\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 amount) external {\n        return super._beforeTokenTransfer(from,to,amount);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 amount) external {\n        return super._afterTokenTransfer(from,to,amount);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/MerkleDistributor.sol\";\n\ncontract $MerkleDistributor is MerkleDistributor {\n    constructor(address _owner, address _token, address _rewardEscrow, bytes32 _merkleRoot) MerkleDistributor(_owner, _token, _rewardEscrow, _merkleRoot) {}\n}\n"
    },
    "contracts-exposed/MultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/MultipleMerkleDistributor.sol\";\n\ncontract $MultipleMerkleDistributor is MultipleMerkleDistributor {\n    constructor(address _owner, address _token, address _rewardEscrow) MultipleMerkleDistributor(_owner, _token, _rewardEscrow) {}\n}\n"
    },
    "contracts-exposed/RewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/RewardEscrow.sol\";\n\ncontract $RewardEscrow is RewardEscrow {\n    constructor(address _owner, address _kwenta) RewardEscrow(_owner, _kwenta) {}\n\n    function $_claimableAmount(VestingEntries.VestingEntry calldata _entry) external view returns (uint256, uint256) {\n        return super._claimableAmount(_entry);\n    }\n\n    function $_earlyVestFee(VestingEntries.VestingEntry calldata _entry) external view returns (uint256) {\n        return super._earlyVestFee(_entry);\n    }\n\n    function $_isEscrowStaked(address _account) external view returns (bool) {\n        return super._isEscrowStaked(_account);\n    }\n\n    function $_transferVestedTokens(address _account,uint256 _amount) external {\n        return super._transferVestedTokens(_account,_amount);\n    }\n\n    function $_reduceAccountEscrowBalances(address _account,uint256 _amount) external {\n        return super._reduceAccountEscrowBalances(_account,_amount);\n    }\n\n    function $_appendVestingEntry(address account,uint256 quantity,uint256 duration) external {\n        return super._appendVestingEntry(account,quantity,duration);\n    }\n}\n"
    },
    "contracts-exposed/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/StakingRewards.sol\";\n\ncontract $StakingRewards is StakingRewards {\n    constructor(address _token, address _rewardEscrow, address _supplySchedule) StakingRewards(_token, _rewardEscrow, _supplySchedule) {}\n\n    function $_pause() external {\n        return super._pause();\n    }\n\n    function $_unpause() external {\n        return super._unpause();\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/SupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/SupplySchedule.sol\";\n\ncontract $SupplySchedule is SupplySchedule {\n    constructor(address _owner, address _treasuryDAO) SupplySchedule(_owner, _treasuryDAO) {}\n\n    function $recordMintEvent(uint256 supplyMinted) external returns (bool) {\n        return super.recordMintEvent(supplyMinted);\n    }\n}\n"
    },
    "contracts-exposed/interfaces/IControlL2MerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IControlL2MerkleDistributor.sol\";\n\nabstract contract $IControlL2MerkleDistributor is IControlL2MerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IERC20.sol\";\n\nabstract contract $IERC20 is IERC20 {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IERC20Metadata.sol\";\n\nabstract contract $IERC20Metadata is IERC20Metadata {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IKwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IKwenta.sol\";\n\nabstract contract $IKwenta is IKwenta {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IMerkleDistributor.sol\";\n\nabstract contract $IMerkleDistributor is IMerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IMultipleMerkleDistributor.sol\";\n\nabstract contract $IMultipleMerkleDistributor is IMultipleMerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IRewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IRewardEscrow.sol\";\n\ncontract $VestingEntries {\n    constructor() {}\n}\n\nabstract contract $IRewardEscrow is IRewardEscrow {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IStakingRewards.sol\";\n\nabstract contract $IStakingRewards is IStakingRewards {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/ISupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/ISupplySchedule.sol\";\n\nabstract contract $ISupplySchedule is ISupplySchedule {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IvKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IvKwentaRedeemer.sol\";\n\nabstract contract $IvKwentaRedeemer is IvKwentaRedeemer {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/libraries/Math.sol\";\n\ncontract $Math {\n    constructor() {}\n\n    function $powDecimal(uint256 x,uint256 n) external pure returns (uint256) {\n        return Math.powDecimal(x,n);\n    }\n}\n"
    },
    "contracts-exposed/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/Context.sol\";\n\ncontract $Context is Context {\n    constructor() {}\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/utils/ERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/ERC20.sol\";\n\ncontract $ERC20 is ERC20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\n\n    function $_transfer(address sender,address recipient,uint256 amount) external {\n        return super._transfer(sender,recipient,amount);\n    }\n\n    function $_mint(address account,uint256 amount) external {\n        return super._mint(account,amount);\n    }\n\n    function $_burn(address account,uint256 amount) external {\n        return super._burn(account,amount);\n    }\n\n    function $_approve(address owner,address spender,uint256 amount) external {\n        return super._approve(owner,spender,amount);\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 amount) external {\n        return super._beforeTokenTransfer(from,to,amount);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 amount) external {\n        return super._afterTokenTransfer(from,to,amount);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/utils/Owned.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/Owned.sol\";\n\ncontract $Owned is Owned {\n    constructor(address _owner) Owned(_owner) {}\n}\n"
    },
    "contracts-exposed/vKwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/vKwenta.sol\";\n\ncontract $vKwenta is vKwenta {\n    constructor(string memory _name, string memory _symbol, address _beneficiary, uint256 _amount) vKwenta(_name, _symbol, _beneficiary, _amount) {}\n\n    function $_transfer(address sender,address recipient,uint256 amount) external {\n        return super._transfer(sender,recipient,amount);\n    }\n\n    function $_mint(address account,uint256 amount) external {\n        return super._mint(account,amount);\n    }\n\n    function $_burn(address account,uint256 amount) external {\n        return super._burn(account,amount);\n    }\n\n    function $_approve(address owner,address spender,uint256 amount) external {\n        return super._approve(owner,spender,amount);\n    }\n\n    function $_beforeTokenTransfer(address from,address to,uint256 amount) external {\n        return super._beforeTokenTransfer(from,to,amount);\n    }\n\n    function $_afterTokenTransfer(address from,address to,uint256 amount) external {\n        return super._afterTokenTransfer(from,to,amount);\n    }\n\n    function $_msgSender() external view returns (address) {\n        return super._msgSender();\n    }\n\n    function $_msgData() external view returns (bytes memory) {\n        return super._msgData();\n    }\n}\n"
    },
    "contracts-exposed/vKwentaRedeemer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/vKwentaRedeemer.sol\";\n\ncontract $vKwentaRedeemer is vKwentaRedeemer {\n    constructor(address _vToken, address _token) vKwentaRedeemer(_vToken, _token) {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "contracts/libraries/SafeDecimalMath.sol": {
        "SafeDecimalMath": "0x68a356240deaec81d6d59986c2cde4b8035ddeaf"
      }
    }
  }
}