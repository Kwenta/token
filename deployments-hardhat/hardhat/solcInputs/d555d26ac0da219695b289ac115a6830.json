{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "contracts-exposed/EscrowedMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/EscrowedMultipleMerkleDistributor.sol\";\n\ncontract $EscrowedMultipleMerkleDistributor is EscrowedMultipleMerkleDistributor {\n    constructor(address _owner, address _token, address _rewardEscrow) EscrowedMultipleMerkleDistributor(_owner, _token, _rewardEscrow) {}\n}\n"
    },
    "contracts-exposed/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IERC20.sol\";\n\nabstract contract $IERC20 is IERC20 {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IEscrowedMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IEscrowedMultipleMerkleDistributor.sol\";\n\nabstract contract $IEscrowedMultipleMerkleDistributor is IEscrowedMultipleMerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IKwenta.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IKwenta.sol\";\n\nabstract contract $IKwenta is IKwenta {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IMultipleMerkleDistributor.sol\";\n\nabstract contract $IMultipleMerkleDistributor is IMultipleMerkleDistributor {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IRewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IRewardEscrow.sol\";\n\ncontract $VestingEntries {\n    constructor() {}\n}\n\nabstract contract $IRewardEscrow is IRewardEscrow {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/IStakingRewards.sol\";\n\nabstract contract $IStakingRewards is IStakingRewards {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/interfaces/ISupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/interfaces/ISupplySchedule.sol\";\n\nabstract contract $ISupplySchedule is ISupplySchedule {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/libraries/Math.sol\";\n\ncontract $Math {\n    constructor() {}\n\n    function $powDecimal(uint256 x,uint256 n) external pure returns (uint256) {\n        return Math.powDecimal(x,n);\n    }\n}\n"
    },
    "contracts-exposed/misc/BatchClaimer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/misc/BatchClaimer.sol\";\n\ncontract $BatchClaimer is BatchClaimer {\n    constructor() {}\n}\n"
    },
    "contracts-exposed/MultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/MultipleMerkleDistributor.sol\";\n\ncontract $MultipleMerkleDistributor is MultipleMerkleDistributor {\n    constructor(address _owner, address _token) MultipleMerkleDistributor(_owner, _token) {}\n}\n"
    },
    "contracts-exposed/SupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../contracts/SupplySchedule.sol\";\n\ncontract $SupplySchedule is SupplySchedule {\n    constructor(address _owner, address _treasuryDAO) SupplySchedule(_owner, _treasuryDAO) {}\n\n    function $recordMintEvent(uint256 supplyMinted) external returns (bool) {\n        return super.recordMintEvent(supplyMinted);\n    }\n}\n"
    },
    "contracts-exposed/utils/Owned.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.0;\n\nimport \"../../contracts/utils/Owned.sol\";\n\ncontract $Owned is Owned {\n    constructor(address _owner) Owned(_owner) {}\n}\n"
    },
    "contracts/EscrowedMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./utils/Owned.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\nimport \"./interfaces/IEscrowedMultipleMerkleDistributor.sol\";\n\n/// @title Kwenta EscrowedMultipleMerkleDistributor\n/// @author JaredBorders and JChiaramonte7\n/// @notice Facilitates trading incentives distribution over multiple periods.\ncontract EscrowedMultipleMerkleDistributor is\n    IEscrowedMultipleMerkleDistributor,\n    Owned\n{\n    /// @notice escrow for tokens claimed\n    address public immutable override rewardEscrow;\n\n    /// @notice token to be distributed (KWENTA)\n    address public immutable override token;\n\n    /// @notice an epoch to merkle root mapping\n    /// of a merkle tree containing account balances available to claim\n    mapping(uint256 => bytes32) public override merkleRoots;\n\n    /// @notice an epoch to packed array of claimed booleans mapping\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMaps;\n\n    /// @notice set addresses for deployed rewardEscrow and KWENTA.\n    /// Establish merkle root for verification\n    /// @param _owner: designated owner of this contract\n    /// @param _token: address of erc20 token to be distributed\n    /// @param _rewardEscrow: address of kwenta escrow for tokens claimed\n    constructor(\n        address _owner,\n        address _token,\n        address _rewardEscrow\n    ) Owned(_owner) {\n        token = _token;\n        rewardEscrow = _rewardEscrow;\n    }\n\n    /// @notice modify merkle root for existing distribution epoch\n    function setMerkleRootForEpoch(bytes32 merkleRoot, uint256 epoch)\n        external\n        onlyOwner\n    {\n        merkleRoots[epoch] = merkleRoot;\n        emit MerkleRootModified(epoch);\n    }\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index to check\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index, uint256 epoch)\n        public\n        view\n        override\n        returns (bool)\n    {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMaps[epoch][claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    /// @notice set claimed status for indexed claim to true\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index to check\n    function _setClaimed(uint256 index, uint256 epoch) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMaps[epoch][claimedWordIndex] =\n            claimedBitMaps[epoch][claimedWordIndex] |\n            (1 << claimedBitIndex);\n    }\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    /// @param epoch: distribution index to check\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) public override {\n        require(\n            !isClaimed(index, epoch),\n            \"EscrowedMultipleMerkleDistributor: Drop already claimed.\"\n        );\n\n        // verify the merkle proof\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(\n            MerkleProof.verify(merkleProof, merkleRoots[epoch], node),\n            \"EscrowedMultipleMerkleDistributor: Invalid proof.\"\n        );\n\n        // mark it claimed and send the token to RewardEscrow\n        _setClaimed(index, epoch);\n        IERC20(token).approve(rewardEscrow, amount);\n        IRewardEscrow(rewardEscrow).createEscrowEntry(\n            account,\n            amount,\n            52 weeks\n        );\n\n        emit Claimed(index, account, amount, epoch);\n    }\n\n    /// @notice function that aggregates multiple claims\n    /// @param claims: array of valid claims\n    function claimMultiple(Claims[] calldata claims) external override {\n        uint256 cacheLength = claims.length;\n        for (uint256 i = 0; i < cacheLength; ) {\n            claim(\n                claims[i].index,\n                claims[i].account,\n                claims[i].amount,\n                claims[i].merkleProof,\n                claims[i].epoch\n            );\n            unchecked {\n                i++;\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0 <0.9.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/IEscrowedMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IEscrowedMultipleMerkleDistributor {\n    /// @notice data structure for aggregating multiple claims\n    struct Claims {\n        uint256 index;\n        address account;\n        uint256 amount;\n        bytes32[] merkleProof;\n        uint256 epoch;\n    }\n\n    /// @notice event is triggered whenever a call to `claim` succeeds\n    event Claimed(\n        uint256 index,\n        address account,\n        uint256 amount,\n        uint256 epoch\n    );\n\n    /// @notice event is triggered whenever a merkle root is set\n    event MerkleRootModified(uint256 epoch);\n\n    /// @return escrow for tokens claimed\n    function rewardEscrow() external view returns (address);\n\n    /// @return token to be distributed (KWENTA)\n    function token() external view returns (address);\n\n    // @return the merkle root of the merkle tree containing account balances available to claim\n    function merkleRoots(uint256) external view returns (bytes32);\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index number\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index, uint256 epoch)\n        external\n        view\n        returns (bool);\n\n    /// @notice attempt to claim as `account` and escrow KWENTA for `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: $KWENTA amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    /// @param epoch: distribution index number\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) external;\n\n    /// @notice function that aggregates multiple claims\n    /// @param claims: array of valid claims\n    function claimMultiple(Claims[] calldata claims) external;\n}\n"
    },
    "contracts/interfaces/IKwenta.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IKwenta is IERC20 {\n\n    function mint(address account, uint amount) external;\n\n    function burn(uint amount) external;\n\n    function setSupplySchedule(address _supplySchedule) external;\n\n}"
    },
    "contracts/interfaces/IMultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\n// Allows anyone to claim a token if they exist in a merkle root.\ninterface IMultipleMerkleDistributor {\n    /// @notice data structure for aggregating multiple claims\n    struct Claims {\n        uint256 index;\n        address account;\n        uint256 amount;\n        bytes32[] merkleProof;\n        uint256 epoch;\n    }\n\n    /// @notice event is triggered whenever a call to `claim` succeeds\n    event Claimed(\n        uint256 index,\n        address account,\n        uint256 amount,\n        uint256 epoch\n    );\n\n    /// @notice event is triggered whenever a merkle root is set\n    event MerkleRootModified(uint256 epoch);\n\n    /// @return token to be distributed\n    function token() external view returns (address);\n\n    // @return the merkle root of the merkle tree containing account balances available to claim\n    function merkleRoots(uint256) external view returns (bytes32);\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index number\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index, uint256 epoch)\n        external\n        view\n        returns (bool);\n\n    /// @notice attempt to claim as `account` and transfer `amount` to `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: token amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    /// @param epoch: distribution index number\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) external;\n\n    /// @notice function that aggregates multiple claims\n    /// @param claims: array of valid claims\n    function claimMultiple(Claims[] calldata claims) external;\n}\n"
    },
    "contracts/interfaces/IRewardEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary VestingEntries {\n    struct VestingEntry {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 duration;\n    }\n    struct VestingEntryWithID {\n        uint64 endTime;\n        uint256 escrowAmount;\n        uint256 entryID;\n    }\n}\n\ninterface IRewardEscrow {\n    // Views\n    function getKwentaAddress() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function numVestingEntries(address account) external view returns (uint256);\n\n    function totalEscrowedAccountBalance(address account)\n        external\n        view\n        returns (uint256);\n\n    function totalVestedAccountBalance(address account)\n        external\n        view\n        returns (uint256);\n\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\n        external\n        view\n        returns (uint256, uint256);\n\n    function getVestingSchedules(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\n\n    function getAccountVestingEntryIDs(\n        address account,\n        uint256 index,\n        uint256 pageSize\n    ) external view returns (uint256[] memory);\n\n    function getVestingEntryClaimable(address account, uint256 entryID)\n        external\n        view\n        returns (uint256, uint256);\n\n    function getVestingEntry(address account, uint256 entryID)\n        external\n        view\n        returns (\n            uint64,\n            uint256,\n            uint256\n        );\n\n    // Mutative functions\n    function vest(uint256[] calldata entryIDs) external;\n\n    function createEscrowEntry(\n        address beneficiary,\n        uint256 deposit,\n        uint256 duration\n    ) external;\n\n    function appendVestingEntry(\n        address account,\n        uint256 quantity,\n        uint256 duration\n    ) external;\n\n    function stakeEscrow(uint256 _amount) external;\n\n    function unstakeEscrow(uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStakingRewards {\n    /// VIEWS\n    // token state\n    function totalSupply() external view returns (uint256);\n    // staking state\n    function balanceOf(address account) external view returns (uint256);\n    function escrowedBalanceOf(address account) external view returns (uint256);\n    function nonEscrowedBalanceOf(address account) external view returns (uint256);\n    // rewards\n    function getRewardForDuration() external view returns (uint256);\n    function rewardPerToken() external view returns (uint256);\n    function lastTimeRewardApplicable() external view returns (uint256);\n    function earned(address account) external view returns (uint256);\n\n    /// MUTATIVE\n    // Staking/Unstaking\n    function stake(uint256 amount) external;\n    function unstake(uint256 amount) external;\n    function stakeEscrow(address account, uint256 amount) external;\n    function unstakeEscrow(address account, uint256 amount) external;\n    function exit() external;\n    // claim rewards\n    function getReward() external;\n    // settings\n    function notifyRewardAmount(uint256 reward) external;\n    function setRewardsDuration(uint256 _rewardsDuration) external;\n    // pausable\n    function pauseStakingRewards() external;\n    function unpauseStakingRewards() external;\n    // misc.\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\n}\n"
    },
    "contracts/interfaces/ISupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.24;\n\ninterface ISupplySchedule {\n    // Views\n    function mintableSupply() external view returns (uint);\n\n    function isMintable() external view returns (bool);\n\n    // Mutative functions\n\n    function mint() external;\n\n    function setTreasuryDiversion(uint _treasuryDiversion) external;\n\n    function setTradingRewardsDiversion(uint _tradingRewardsDiversion) external;\n    \n    function setStakingRewards(address _stakingRewards) external;\n\n    function setTradingRewards(address _tradingRewards) external;\n}"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Libraries\nimport \"./SafeDecimalMath.sol\";\n\n// https://docs.synthetix.io/contracts/source/libraries/math\nlibrary Math {\n    using SafeDecimalMath for uint;\n\n    /**\n     * @dev Uses \"exponentiation by squaring\" algorithm where cost is 0(logN)\n     * vs 0(N) for naive repeated multiplication.\n     * Calculates x^n with x as fixed-point and n as regular unsigned int.\n     * Calculates to 18 digits of precision with SafeDecimalMath.unit()\n     */\n    function powDecimal(uint x, uint n) internal pure returns (uint) {\n        // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\n\n        uint result = SafeDecimalMath.unit();\n        while (n > 0) {\n            if (n % 2 != 0) {\n                result = result.multiplyDecimal(x);\n            }\n            x = x.multiplyDecimal(x);\n            n /= 2;\n        }\n        return result;\n    }\n}"
    },
    "contracts/libraries/SafeDecimalMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint256 public constant UNIT = 10**uint256(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint256 public constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\n        10**uint256(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint256) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint256) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return (x * y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return (x * UNIT) / y;\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint256 i)\n        internal\n        pure\n        returns (uint256)\n    {\n        return i * UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR;\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint256 i)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 quotientTimesTen = i /\n            (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    // Computes `a - b`, setting the value to 0 if b > a.\n    function floorsub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return b >= a ? 0 : a - b;\n    }\n}\n"
    },
    "contracts/misc/BatchClaimer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IMultipleMerkleDistributor.sol\";\n\ncontract BatchClaimer {\n    \n    function claimMultiple(\n        IMultipleMerkleDistributor[] calldata _distributors,\n        IMultipleMerkleDistributor.Claims[][] calldata _claims\n    ) external {\n        require(_distributors.length == _claims.length, \"BatchClaimer: invalid input\");\n        for (uint256 i = 0; i < _distributors.length; i++) {\n            _distributors[i].claimMultiple(_claims[i]);\n        }\n    }\n}\n"
    },
    "contracts/MultipleMerkleDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./utils/Owned.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./interfaces/IRewardEscrow.sol\";\nimport \"./interfaces/IMultipleMerkleDistributor.sol\";\n\n/// @title Kwenta MultipleMerkleDistributor\n/// @author JaredBorders and JChiaramonte7\n/// @notice Facilitates trading incentives distribution over multiple periods.\ncontract MultipleMerkleDistributor is IMultipleMerkleDistributor, Owned {\n    /// @notice token to be distributed\n    address public immutable override token;\n\n    /// @notice an epoch to merkle root mapping\n    /// of a merkle tree containing account balances available to claim\n    mapping(uint256 => bytes32) public override merkleRoots;\n\n    /// @notice an epoch to packed array of claimed booleans mapping\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMaps;\n\n    /// @notice set addresses ERC20 contract\n    /// Establish merkle root for verification\n    /// @param _owner: designated owner of this contract\n    /// @param _token: address of erc20 token to be distributed\n    constructor(address _owner, address _token) Owned(_owner) {\n        token = _token;\n    }\n\n    /// @notice modify merkle root for existing distribution epoch\n    function setMerkleRootForEpoch(bytes32 merkleRoot, uint256 epoch)\n        external\n        onlyOwner\n    {\n        merkleRoots[epoch] = merkleRoot;\n        emit MerkleRootModified(epoch);\n    }\n\n    /// @notice determine if indexed claim has been claimed\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index to check\n    /// @return true if indexed claim has been claimed\n    function isClaimed(uint256 index, uint256 epoch)\n        public\n        view\n        override\n        returns (bool)\n    {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        uint256 claimedWord = claimedBitMaps[epoch][claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask == mask;\n    }\n\n    /// @notice set claimed status for indexed claim to true\n    /// @param index: used for claim managment\n    /// @param epoch: distribution index to check\n    function _setClaimed(uint256 index, uint256 epoch) private {\n        uint256 claimedWordIndex = index / 256;\n        uint256 claimedBitIndex = index % 256;\n        claimedBitMaps[epoch][claimedWordIndex] =\n            claimedBitMaps[epoch][claimedWordIndex] |\n            (1 << claimedBitIndex);\n    }\n\n    /// @notice attempt to claim as `account` and transfer `amount` to `account`\n    /// @param index: used for merkle tree managment and verification\n    /// @param account: address used for escrow entry\n    /// @param amount: token amount to be escrowed\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\n    /// @param epoch: distribution index to check\n    function claim(\n        uint256 index,\n        address account,\n        uint256 amount,\n        bytes32[] calldata merkleProof,\n        uint256 epoch\n    ) public override {\n        require(\n            !isClaimed(index, epoch),\n            \"MultipleMerkleDistributor: Drop already claimed.\"\n        );\n\n        // verify the merkle proof\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        require(\n            MerkleProof.verify(merkleProof, merkleRoots[epoch], node),\n            \"MultipleMerkleDistributor: Invalid proof.\"\n        );\n\n        // mark it claimed and send the token\n        _setClaimed(index, epoch);\n        IERC20(token).transfer(account, amount);\n\n        emit Claimed(index, account, amount, epoch);\n    }\n\n    /// @notice function that aggregates multiple claims\n    /// @param claims: array of valid claims\n    function claimMultiple(Claims[] calldata claims) external override {\n        uint256 cacheLength = claims.length;\n        for (uint256 i = 0; i < cacheLength; ) {\n            claim(\n                claims[i].index,\n                claims[i].account,\n                claims[i].amount,\n                claims[i].merkleProof,\n                claims[i].epoch\n            );\n            unchecked {\n                i++;\n            }\n        }\n    }\n}\n"
    },
    "contracts/SupplySchedule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Inheritance\nimport \"./utils/Owned.sol\";\nimport \"./interfaces/ISupplySchedule.sol\";\n\n// Libraries\nimport \"./libraries/SafeDecimalMath.sol\";\nimport \"./libraries/Math.sol\";\n\n// Internal references\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IKwenta.sol\";\nimport \"./interfaces/IStakingRewards.sol\";\nimport \"./interfaces/IMultipleMerkleDistributor.sol\";\n\n// https://docs.synthetix.io/contracts/source/contracts/supplyschedule\ncontract SupplySchedule is Owned, ISupplySchedule {\n    using SafeDecimalMath for uint;\n    using Math for uint;\n\n    IKwenta public kwenta;\n    IStakingRewards public stakingRewards;\n    IMultipleMerkleDistributor public tradingRewards;\n\n    // Time of the last inflation supply mint event\n    uint public lastMintEvent;\n\n    // Counter for number of weeks since the start of supply inflation\n    uint public weekCounter;\n\n    // The number of KWENTA rewarded to the caller of Kwenta.mint()\n    uint public minterReward = 1e18;\n\n    uint public constant INITIAL_SUPPLY = 313373e18;\n\n    // Initial Supply * 240% Initial Inflation Rate / 52 weeks.\n    uint public constant INITIAL_WEEKLY_SUPPLY = INITIAL_SUPPLY * 240 / 100 / 52;\n\n    // Max KWENTA rewards for minter\n    uint public constant MAX_MINTER_REWARD = 20 * 1e18;\n\n    // How long each inflation period is before mint can be called\n    uint public constant MINT_PERIOD_DURATION = 1 weeks;\n\n    uint public immutable inflationStartDate;\n    uint public constant MINT_BUFFER = 1 days;\n    uint8 public constant SUPPLY_DECAY_START = 2; // Supply decay starts on the 2nd week of rewards\n    uint8 public constant SUPPLY_DECAY_END = 208; // Inclusive of SUPPLY_DECAY_END week.\n\n    // Weekly percentage decay of inflationary supply\n    uint public constant DECAY_RATE = 20500000000000000; // 2.05% weekly\n\n    // Percentage growth of terminal supply per annum\n    uint public constant TERMINAL_SUPPLY_RATE_ANNUAL = 10000000000000000; // 1.0% pa\n\n    uint public treasuryDiversion = 2000; // 20% to treasury\n    uint public tradingRewardsDiversion = 2000;\n\n    // notice treasury address may change\n    address public treasuryDAO;\n\n    /* ========== EVENTS ========== */\n    \n    /**\n     * @notice Emitted when the inflationary supply is minted\n     **/\n    event SupplyMinted(uint supplyMinted, uint numberOfWeeksIssued, uint lastMintEvent);\n\n    /**\n     * @notice Emitted when the KWENTA minter reward amount is updated\n     **/\n    event MinterRewardUpdated(uint newRewardAmount);\n\n    /**\n     * @notice Emitted when setKwenta is called changing the Kwenta Proxy address\n     **/\n    event KwentaUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when treasury inflation share is changed\n     **/\n    event TreasuryDiversionUpdated(uint newPercentage);\n\n    /**\n     * @notice Emitted when trading rewards inflation share is changed\n     **/\n    event TradingRewardsDiversionUpdated(uint newPercentage);\n\n    /**\n     * @notice Emitted when StakingRewards is changed\n     **/\n    event StakingRewardsUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when TradingRewards is changed\n     **/\n    event TradingRewardsUpdated(address newAddress);\n\n    /**\n     * @notice Emitted when treasuryDAO address is changed\n     **/\n    event TreasuryDAOSet(address treasuryDAO);\n\n    constructor(\n        address _owner,\n        address _treasuryDAO\n    ) Owned(_owner) {\n        treasuryDAO = _treasuryDAO;\n\n        inflationStartDate = block.timestamp; // inflation starts as soon as the contract is deployed.\n        lastMintEvent = block.timestamp;\n        weekCounter = 0;\n    }\n\n    // ========== VIEWS ==========\n\n    /**\n     * @return The amount of KWENTA mintable for the inflationary supply\n     */\n    function mintableSupply() override public view returns (uint) {\n        uint totalAmount;\n\n        if (!isMintable()) {\n            return totalAmount;\n        }\n\n        uint remainingWeeksToMint = weeksSinceLastIssuance();\n\n        uint currentWeek = weekCounter;\n\n        // Calculate total mintable supply from exponential decay function\n        // The decay function stops after week 208\n        while (remainingWeeksToMint > 0) {\n            currentWeek++;\n\n            if (currentWeek < SUPPLY_DECAY_START) {\n                // If current week is before supply decay we add initial supply to mintableSupply\n                totalAmount = totalAmount + INITIAL_WEEKLY_SUPPLY;\n                remainingWeeksToMint--;\n            } else if (currentWeek <= SUPPLY_DECAY_END) {\n                // if current week before supply decay ends we add the new supply for the week\n                // diff between current week and (supply decay start week - 1)\n                uint decayCount = currentWeek - (SUPPLY_DECAY_START - 1);\n\n                totalAmount = totalAmount + tokenDecaySupplyForWeek(decayCount);\n                remainingWeeksToMint--;\n            } else {\n                // Terminal supply is calculated on the total supply of Kwenta including any new supply\n                // We can compound the remaining week's supply at the fixed terminal rate\n                uint totalSupply = IERC20(kwenta).totalSupply();\n                uint currentTotalSupply = totalSupply + totalAmount;\n\n                totalAmount = totalAmount + terminalInflationSupply(currentTotalSupply, remainingWeeksToMint);\n                remainingWeeksToMint = 0;\n            }\n        }\n\n        return totalAmount;\n    }\n\n    /**\n     * @return A unit amount of decaying inflationary supply from the INITIAL_WEEKLY_SUPPLY\n     * @dev New token supply reduces by the decay rate each week calculated as supply = INITIAL_WEEKLY_SUPPLY * ()\n     */\n    function tokenDecaySupplyForWeek(uint counter) public pure returns (uint) {\n        // Apply exponential decay function to number of weeks since\n        // start of inflation smoothing to calculate diminishing supply for the week.\n        uint effectiveDecay = (SafeDecimalMath.unit() - DECAY_RATE).powDecimal(counter);\n        uint supplyForWeek = INITIAL_WEEKLY_SUPPLY.multiplyDecimal(effectiveDecay);\n\n        return supplyForWeek;\n    }\n\n    /**\n     * @return A unit amount of terminal inflation supply\n     * @dev Weekly compound rate based on number of weeks\n     */\n    function terminalInflationSupply(uint totalSupply, uint numOfWeeks) public pure returns (uint) {\n        // rate = (1 + weekly rate) ^ num of weeks\n        uint effectiveCompoundRate = (SafeDecimalMath.unit() + (TERMINAL_SUPPLY_RATE_ANNUAL / 52)).powDecimal(numOfWeeks);\n\n        // return Supply * (effectiveRate - 1) for extra supply to issue based on number of weeks\n        return totalSupply.multiplyDecimal(effectiveCompoundRate - SafeDecimalMath.unit());\n    }\n\n    /**\n     * @dev Take timeDiff in seconds (Dividend) and MINT_PERIOD_DURATION as (Divisor)\n     * @return Calculate the numberOfWeeks since last mint rounded down to 1 week\n     */\n    function weeksSinceLastIssuance() public view returns (uint) {\n        // Get weeks since lastMintEvent\n        // If lastMintEvent not set or 0, then start from inflation start date.\n        uint timeDiff = block.timestamp - lastMintEvent;\n        return timeDiff / MINT_PERIOD_DURATION;\n    }\n\n    /**\n     * @return boolean whether the MINT_PERIOD_DURATION (7 days)\n     * has passed since the lastMintEvent.\n     * */\n    function isMintable() override public view returns (bool) {\n        return block.timestamp - lastMintEvent > MINT_PERIOD_DURATION;\n    }\n\n    // ========== MUTATIVE FUNCTIONS ==========\n\n    /**\n     * @notice Record the mint event from Kwenta by incrementing the inflation\n     * week counter for the number of weeks minted (probabaly always 1)\n     * and store the time of the event.\n     * @param supplyMinted the amount of KWENTA the total supply was inflated by.\n     * */\n    function recordMintEvent(uint supplyMinted) internal returns (bool) {\n        uint numberOfWeeksIssued = weeksSinceLastIssuance();\n\n        // add number of weeks minted to weekCounter\n        weekCounter = weekCounter + numberOfWeeksIssued;\n\n        // Update mint event to latest week issued (start date + number of weeks issued * seconds in week)\n        // 1 day time buffer is added so inflation is minted after feePeriod closes\n        lastMintEvent = inflationStartDate + (weekCounter * MINT_PERIOD_DURATION) + MINT_BUFFER;\n\n        emit SupplyMinted(supplyMinted, numberOfWeeksIssued, lastMintEvent);\n        return true;\n    }\n\n    /**\n     * @notice Mints new inflationary supply weekly\n     * New KWENTA is distributed between the minter, treasury, and StakingRewards contract\n     * */\n    function mint() override external {\n        require(address(stakingRewards) != address(0), \"Staking rewards not set\");\n        require(address(tradingRewards) != address(0), \"Trading rewards not set\");\n\n        uint supplyToMint = mintableSupply();\n        require(supplyToMint > 0, \"No supply is mintable\");\n\n        // record minting event before mutation to token supply\n        recordMintEvent(supplyToMint);\n\n        uint amountToDistribute = supplyToMint - minterReward;\n        uint amountToTreasury = amountToDistribute * treasuryDiversion / 10000;\n        uint amountToTradingRewards = amountToDistribute * tradingRewardsDiversion / 10000;\n        uint amountToStakingRewards = amountToDistribute - amountToTreasury - amountToTradingRewards;\n\n        kwenta.mint(treasuryDAO, amountToTreasury);\n        kwenta.mint(address(tradingRewards), amountToTradingRewards);\n        kwenta.mint(address(stakingRewards), amountToStakingRewards);\n        stakingRewards.notifyRewardAmount(amountToStakingRewards);\n        kwenta.mint(msg.sender, minterReward);\n    }\n\n    // ========== SETTERS ========== */\n\n    /**\n     * @notice Set the Kwenta should it ever change.\n     * SupplySchedule requires Kwenta address as it has the authority\n     * to record mint event.\n     * */\n    function setKwenta(IKwenta _kwenta) external onlyOwner {\n        require(address(_kwenta) != address(0), \"Address cannot be 0\");\n        kwenta = _kwenta;\n        emit KwentaUpdated(address(kwenta));\n    }\n\n    /**\n     * @notice Sets the reward amount of KWENTA for the caller of the public\n     * function Kwenta.mint().\n     * This incentivises anyone to mint the inflationary supply and the mintr\n     * Reward will be deducted from the inflationary supply and sent to the caller.\n     * @param amount the amount of KWENTA to reward the minter.\n     * */\n    function setMinterReward(uint amount) external onlyOwner {\n        require(amount <= MAX_MINTER_REWARD, \"SupplySchedule: Reward cannot exceed max minter reward\");\n        minterReward = amount;\n        emit MinterRewardUpdated(minterReward);\n    }\n\n    function setTreasuryDiversion(uint _treasuryDiversion) override external onlyOwner {\n        require(_treasuryDiversion + tradingRewardsDiversion < 10000, \"SupplySchedule: Cannot be more than 100%\");\n        treasuryDiversion = _treasuryDiversion;\n        emit TreasuryDiversionUpdated(_treasuryDiversion);\n    }\n\n    function setTradingRewardsDiversion(uint _tradingRewardsDiversion) override external onlyOwner {\n        require(_tradingRewardsDiversion + treasuryDiversion < 10000, \"SupplySchedule: Cannot be more than 100%\");\n        tradingRewardsDiversion = _tradingRewardsDiversion;\n        emit TradingRewardsDiversionUpdated(_tradingRewardsDiversion);\n    }\n\n    function setStakingRewards(address _stakingRewards) override external onlyOwner {\n        require(_stakingRewards != address(0), \"SupplySchedule: Invalid Address\");\n        stakingRewards = IStakingRewards(_stakingRewards);\n        emit StakingRewardsUpdated(_stakingRewards);\n    }\n\n    function setTradingRewards(address _tradingRewards) override external onlyOwner {\n        require(_tradingRewards != address(0), \"SupplySchedule: Invalid Address\");\n        tradingRewards = IMultipleMerkleDistributor(_tradingRewards);\n        emit TradingRewardsUpdated(_tradingRewards);\n    }\n\n    /// @notice set treasuryDAO address\n    /// @dev only owner may change address\n    function setTreasuryDAO(address _treasuryDAO) external onlyOwner {\n        require(_treasuryDAO != address(0), \"SupplySchedule: Zero Address\");\n        treasuryDAO = _treasuryDAO;\n        emit TreasuryDAOSet(treasuryDAO);\n    }\n}"
    },
    "contracts/utils/Owned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// https://docs.synthetix.io/contracts/source/contracts/owned\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    constructor(address _owner) {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    function nominateNewOwner(address _owner) external onlyOwner {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    function acceptOwnership() external {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner {\n        _onlyOwner();\n        _;\n    }\n\n    function _onlyOwner() private view {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}