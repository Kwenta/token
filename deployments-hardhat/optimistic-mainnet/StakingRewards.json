{
  "address": "0x6e56A5D49F775BA08041e28030bc7826b13489e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardEscrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_supplySchedule",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "escrowedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "nonEscrowedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseStakingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardEscrow",
      "outputs": [
        {
          "internalType": "contract IRewardEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplySchedule",
      "outputs": [
        {
          "internalType": "contract ISupplySchedule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseStakingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "77f38a5392103ae42f73c92e75c05718",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplySchedule\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"escrowedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nonEscrowedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEscrow\",\"outputs\":[{\"internalType\":\"contract IRewardEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplySchedule\",\"outputs\":[{\"internalType\":\"contract ISupplySchedule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SYNTHETIX, JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\",\"events\":{\"EscrowStaked(address,uint256)\":{\"params\":{\"amount\":\": amount staked\",\"user\":\": owner of escrowed tokens address\"}},\"EscrowUnstaked(address,uint256)\":{\"params\":{\"amount\":\": amount unstaked\",\"user\":\": owner of escrowed tokens address\"}},\"Recovered(address,uint256)\":{\"params\":{\"amount\":\": amount of token recovered\",\"token\":\": address of token recovered\"}},\"RewardAdded(uint256)\":{\"params\":{\"reward\":\": amount to be distributed over applicable rewards duration\"}},\"RewardPaid(address,uint256)\":{\"params\":{\"reward\":\": amount of reward token claimed\",\"user\":\": address of user claiming rewards\"}},\"RewardsDurationUpdated(uint256)\":{\"params\":{\"newDuration\":\": denoted in seconds\"}},\"Staked(address,uint256)\":{\"params\":{\"amount\":\": amount staked\",\"user\":\": staker address\"}},\"Unstaked(address,uint256)\":{\"params\":{\"amount\":\": amount unstaked\",\"user\":\": address of user unstaking\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"account\":\": address of potential staker\"},\"returns\":{\"_0\":\"amount of tokens staked by account\"}},\"constructor\":{\"details\":\"owner set to address that deployed StakingRewards\",\"params\":{\"_rewardEscrow\":\": escrow contract which holds (and may stake) reward tokens\",\"_supplySchedule\":\": handles reward token minting logic\",\"_token\":\": token used for staking and for rewards\"}},\"earned(address)\":{\"params\":{\"account\":\": address of account earned amount is being calculated for\"}},\"escrowedBalanceOf(address)\":{\"params\":{\"account\":\"address to check the escrowed tokens staked\"},\"returns\":{\"_0\":\"amount of escrowed tokens staked\"}},\"getReward()\":{\"details\":\"rewards are escrowed in RewardEscrowupdateReward() called prior to function logic\"},\"getRewardForDuration()\":{\"returns\":{\"_0\":\"rewards for the duration specified by rewardsDuration\"}},\"lastTimeRewardApplicable()\":{\"returns\":{\"_0\":\"timestamp of the last time rewards are applicable\"}},\"nonEscrowedBalanceOf(address)\":{\"params\":{\"account\":\"address to check the non-escrowed tokens staked\"},\"returns\":{\"_0\":\"amount of non-escrowed tokens staked\"}},\"notifyRewardAmount(uint256)\":{\"details\":\"updateReward() called prior to function logic (with zero address)\",\"params\":{\"reward\":\": amount of token to be distributed over a period\"}},\"pauseStakingRewards()\":{\"details\":\"Triggers stopped state\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\": address of token to be recovered\",\"tokenAmount\":\": amount of token to be recovered\"}},\"rewardPerToken()\":{\"returns\":{\"_0\":\"running sum of reward per total tokens staked\"}},\"setRewardsDuration(uint256)\":{\"params\":{\"_rewardsDuration\":\": denoted in seconds\"}},\"stake(uint256)\":{\"details\":\"updateReward() called prior to function logic\",\"params\":{\"amount\":\": amount to stake\"}},\"stakeEscrow(address,uint256)\":{\"details\":\"updateReward() called prior to function logicmsg.sender NOT used (account is used)\",\"params\":{\"account\":\": address which owns token\",\"amount\":\": amount to stake\"}},\"totalSupply()\":{\"details\":\"returns staked tokens which will likely not be equal to total tokens in the contract since reward and staking tokens are the same\",\"returns\":{\"_0\":\"total amount of tokens that are being staked\"}},\"unpauseStakingRewards()\":{\"details\":\"Returns to normal state.\"},\"unstake(uint256)\":{\"details\":\"updateReward() called prior to function logic\",\"params\":{\"amount\":\": amount to unstake\"}},\"unstakeEscrow(address,uint256)\":{\"details\":\"updateReward() called prior to function logicmsg.sender NOT used (account is used)\",\"params\":{\"account\":\": address which owns token\",\"amount\":\": amount to unstake\"}}},\"stateVariables\":{\"balances\":{\"details\":\"this includes escrowed tokens stake\"}},\"title\":\"KWENTA Staking Rewards\",\"version\":1},\"userdoc\":{\"events\":{\"EscrowStaked(address,uint256)\":{\"notice\":\"emitted when escrow staked\"},\"EscrowUnstaked(address,uint256)\":{\"notice\":\"emitted when staked escrow tokens are unstaked\"},\"Recovered(address,uint256)\":{\"notice\":\"emitted when tokens are recovered from this contract\"},\"RewardAdded(uint256)\":{\"notice\":\"update reward rate\"},\"RewardPaid(address,uint256)\":{\"notice\":\"emitted when user claims rewards\"},\"RewardsDurationUpdated(uint256)\":{\"notice\":\"emitted when rewards duration changes\"},\"Staked(address,uint256)\":{\"notice\":\"emitted when user stakes tokens\"},\"Unstaked(address,uint256)\":{\"notice\":\"emitted when user unstakes tokens\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"configure StakingRewards state\"},\"earned(address)\":{\"notice\":\"determine how much reward token an account has earned thus far\"},\"escrowedBalanceOf(address)\":{\"notice\":\"Getter function for number of staked escrow tokens\"},\"exit()\":{\"notice\":\"unstake all available staked non-escrowed tokens and claim any rewards\"},\"getReward()\":{\"notice\":\"caller claims any rewards generated from staking\"},\"lastUpdateTime()\":{\"notice\":\"track last time the rewards were updated\"},\"nonEscrowedBalanceOf(address)\":{\"notice\":\"Getter function for number of staked non-escrow tokens\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"configure reward rate\"},\"periodFinish()\":{\"notice\":\"marks applicable reward period finish time\"},\"recoverERC20(address,uint256)\":{\"notice\":\"added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\"},\"rewardEscrow()\":{\"notice\":\"escrow contract which holds (and may stake) reward tokens\"},\"rewardPerToken()\":{\"notice\":\"calculate running sum of reward per total tokens staked at this specific time\"},\"rewardPerTokenStored()\":{\"notice\":\"summation of rewardRate divided by total staked tokens\"},\"rewardRate()\":{\"notice\":\"amount of tokens minted per second\"},\"rewards(address)\":{\"notice\":\"track rewards for a given user which changes when a user stakes, unstakes, or claims rewards\"},\"rewardsDuration()\":{\"notice\":\"period for rewards\"},\"setRewardsDuration(uint256)\":{\"notice\":\"set rewards duration\"},\"stake(uint256)\":{\"notice\":\"stake token\"},\"stakeEscrow(address,uint256)\":{\"notice\":\"stake escrowed token\"},\"supplySchedule()\":{\"notice\":\"handles reward token minting logic\"},\"token()\":{\"notice\":\"token used for BOTH staking and rewards\"},\"unstake(uint256)\":{\"notice\":\"unstake token\"},\"unstakeEscrow(address,uint256)\":{\"notice\":\"unstake escrowed token\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"represents the rewardPerToken value the last time the stake calculated earned() rewards\"}},\"notice\":\"Updated version of Synthetix's StakingRewards with new features specific to Kwenta\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"london\",\"libraries\":{\"contracts/libraries/SafeDecimalMath.sol:SafeDecimalMath\":\"0x7e2a9aecdb007e060ba8b98f7ed5706c9c02b4f2\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./utils/Owned.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\nimport \\\"./interfaces/ISupplySchedule.sol\\\";\\nimport \\\"./interfaces/IRewardEscrow.sol\\\";\\n\\n/// @title KWENTA Staking Rewards\\n/// @author SYNTHETIX, JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\n/// @notice Updated version of Synthetix's StakingRewards with new features specific\\n/// to Kwenta\\ncontract StakingRewards is IStakingRewards, Owned, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                CONSTANTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice token used for BOTH staking and rewards\\n    IERC20 public immutable token;\\n\\n    /// @notice escrow contract which holds (and may stake) reward tokens\\n    IRewardEscrow public immutable rewardEscrow;\\n\\n    /// @notice handles reward token minting logic\\n    ISupplySchedule public immutable supplySchedule;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                STATE\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice number of tokens staked by address\\n    /// @dev this includes escrowed tokens stake\\n    mapping(address => uint256) private balances;\\n\\n    /// @notice number of staked escrow tokens by address\\n    mapping(address => uint256) private escrowedBalances;\\n\\n    /// @notice total number of tokens staked in this contract\\n    uint256 private _totalSupply;\\n\\n    /// @notice marks applicable reward period finish time\\n    uint256 public periodFinish = 0;\\n\\n    /// @notice amount of tokens minted per second\\n    uint256 public rewardRate = 0;\\n\\n    /// @notice period for rewards\\n    uint256 public rewardsDuration = 7 days;\\n\\n    /// @notice track last time the rewards were updated\\n    uint256 public lastUpdateTime;\\n\\n    /// @notice summation of rewardRate divided by total staked tokens\\n    uint256 public rewardPerTokenStored;\\n\\n    /// @notice represents the rewardPerToken\\n    /// value the last time the stake calculated earned() rewards\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n    /// @notice track rewards for a given user which changes when\\n    /// a user stakes, unstakes, or claims rewards\\n    mapping(address => uint256) public rewards;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                EVENTS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice update reward rate\\n    /// @param reward: amount to be distributed over applicable rewards duration\\n    event RewardAdded(uint256 reward);\\n\\n    /// @notice emitted when user stakes tokens\\n    /// @param user: staker address\\n    /// @param amount: amount staked\\n    event Staked(address indexed user, uint256 amount);\\n\\n    /// @notice emitted when user unstakes tokens\\n    /// @param user: address of user unstaking\\n    /// @param amount: amount unstaked\\n    event Unstaked(address indexed user, uint256 amount);\\n\\n    /// @notice emitted when escrow staked\\n    /// @param user: owner of escrowed tokens address\\n    /// @param amount: amount staked\\n    event EscrowStaked(address indexed user, uint256 amount);\\n\\n    /// @notice emitted when staked escrow tokens are unstaked\\n    /// @param user: owner of escrowed tokens address\\n    /// @param amount: amount unstaked\\n    event EscrowUnstaked(address user, uint256 amount);\\n\\n    /// @notice emitted when user claims rewards\\n    /// @param user: address of user claiming rewards\\n    /// @param reward: amount of reward token claimed\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    /// @notice emitted when rewards duration changes\\n    /// @param newDuration: denoted in seconds\\n    event RewardsDurationUpdated(uint256 newDuration);\\n\\n    /// @notice emitted when tokens are recovered from this contract\\n    /// @param token: address of token recovered\\n    /// @param amount: amount of token recovered\\n    event Recovered(address token, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                AUTH\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice access control modifier for rewardEscrow\\n    modifier onlyRewardEscrow() {\\n        require(\\n            msg.sender == address(rewardEscrow),\\n            \\\"StakingRewards: Only Reward Escrow\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice access control modifier for rewardEscrow\\n    modifier onlySupplySchedule() {\\n        require(\\n            msg.sender == address(supplySchedule),\\n            \\\"StakingRewards: Only Supply Schedule\\\"\\n        );\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            CONSTRUCTOR\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice configure StakingRewards state\\n    /// @dev owner set to address that deployed StakingRewards\\n    /// @param _token: token used for staking and for rewards\\n    /// @param _rewardEscrow: escrow contract which holds (and may stake) reward tokens\\n    /// @param _supplySchedule: handles reward token minting logic\\n    constructor(\\n        address _token,\\n        address _rewardEscrow,\\n        address _supplySchedule\\n    ) Owned(msg.sender) {\\n        // define reward/staking token\\n        token = IERC20(_token);\\n\\n        // define contracts which will interact with StakingRewards\\n        rewardEscrow = IRewardEscrow(_rewardEscrow);\\n        supplySchedule = ISupplySchedule(_supplySchedule);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                VIEWS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @dev returns staked tokens which will likely not be equal to total tokens\\n    /// in the contract since reward and staking tokens are the same\\n    /// @return total amount of tokens that are being staked\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @param account: address of potential staker\\n    /// @return amount of tokens staked by account\\n    function balanceOf(address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return balances[account];\\n    }\\n\\n    /// @notice Getter function for number of staked escrow tokens\\n    /// @param account address to check the escrowed tokens staked\\n    /// @return amount of escrowed tokens staked\\n    function escrowedBalanceOf(address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return escrowedBalances[account];\\n    }\\n\\n    /// @return rewards for the duration specified by rewardsDuration\\n    function getRewardForDuration() external view override returns (uint256) {\\n        return rewardRate * rewardsDuration;\\n    }\\n\\n    /// @notice Getter function for number of staked non-escrow tokens\\n    /// @param account address to check the non-escrowed tokens staked\\n    /// @return amount of non-escrowed tokens staked\\n    function nonEscrowedBalanceOf(address account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return balances[account] - escrowedBalances[account];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            STAKE/UNSTAKE\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice stake token\\n    /// @param amount: amount to stake\\n    /// @dev updateReward() called prior to function logic\\n    function stake(uint256 amount)\\n        external\\n        override\\n        nonReentrant\\n        whenNotPaused\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"StakingRewards: Cannot stake 0\\\");\\n\\n        // update state\\n        _totalSupply += amount;\\n        balances[msg.sender] += amount;\\n\\n        // transfer token to this contract from the caller\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // emit staking event and index msg.sender\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    /// @notice unstake token\\n    /// @param amount: amount to unstake\\n    /// @dev updateReward() called prior to function logic\\n    function unstake(uint256 amount)\\n        public\\n        override\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"StakingRewards: Cannot Unstake 0\\\");\\n        require(\\n            amount <= nonEscrowedBalanceOf(msg.sender),\\n            \\\"StakingRewards: Invalid Amount\\\"\\n        );\\n\\n        // update state\\n        _totalSupply -= amount;\\n        balances[msg.sender] -= amount;\\n\\n        // transfer token from this contract to the caller\\n        token.safeTransfer(msg.sender, amount);\\n\\n        // emit unstake event and index msg.sender\\n        emit Unstaked(msg.sender, amount);\\n    }\\n\\n    /// @notice stake escrowed token\\n    /// @param account: address which owns token\\n    /// @param amount: amount to stake\\n    /// @dev updateReward() called prior to function logic\\n    /// @dev msg.sender NOT used (account is used)\\n    function stakeEscrow(address account, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        onlyRewardEscrow\\n        updateReward(account)\\n    {\\n        require(amount > 0, \\\"StakingRewards: Cannot stake 0\\\");\\n\\n        // update state\\n        balances[account] += amount;\\n        escrowedBalances[account] += amount;\\n\\n        // updates total supply despite no new staking token being transfered.\\n        // escrowed tokens are locked in RewardEscrow\\n        _totalSupply += amount;\\n\\n        // emit escrow staking event and index _account\\n        emit EscrowStaked(account, amount);\\n    }\\n\\n    /// @notice unstake escrowed token\\n    /// @param account: address which owns token\\n    /// @param amount: amount to unstake\\n    /// @dev updateReward() called prior to function logic\\n    /// @dev msg.sender NOT used (account is used)\\n    function unstakeEscrow(address account, uint256 amount)\\n        external\\n        override\\n        nonReentrant\\n        onlyRewardEscrow\\n        updateReward(account)\\n    {\\n        require(amount > 0, \\\"StakingRewards: Cannot Unstake 0\\\");\\n        require(\\n            escrowedBalances[account] >= amount,\\n            \\\"StakingRewards: Invalid Amount\\\"\\n        );\\n\\n        // update state\\n        balances[account] -= amount;\\n        escrowedBalances[account] -= amount;\\n\\n        // updates total supply despite no new staking token being transfered.\\n        // escrowed tokens are locked in RewardEscrow\\n        _totalSupply -= amount;\\n\\n        // emit escrow unstaked event and index account\\n        emit EscrowUnstaked(account, amount);\\n    }\\n\\n    /// @notice unstake all available staked non-escrowed tokens and\\n    /// claim any rewards\\n    function exit() external override {\\n        unstake(nonEscrowedBalanceOf(msg.sender));\\n        getReward();\\n    }    \\n\\n    /*///////////////////////////////////////////////////////////////\\n                            CLAIM REWARDS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice caller claims any rewards generated from staking\\n    /// @dev rewards are escrowed in RewardEscrow\\n    /// @dev updateReward() called prior to function logic\\n    function getReward() public override nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            // update state (first)\\n            rewards[msg.sender] = 0;\\n\\n            // transfer token from this contract to the rewardEscrow\\n            // and create a vesting entry for the caller\\n            token.safeTransfer(address(rewardEscrow), reward);\\n            rewardEscrow.appendVestingEntry(msg.sender, reward, 52 weeks);\\n\\n            // emit reward claimed event and index msg.sender\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        REWARD UPDATE CALCULATIONS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice update reward state for the account and contract\\n    /// @param account: address of account which rewards are being updated for\\n    /// @dev contract state not specific to an account will be updated also\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        if (account != address(0)) {\\n            // update amount of rewards a user can claim\\n            rewards[account] = earned(account);\\n\\n            // update reward per token staked AT this given time\\n            // (i.e. when this user is interacting with StakingRewards)\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /// @notice calculate running sum of reward per total tokens staked\\n    /// at this specific time\\n    /// @return running sum of reward per total tokens staked\\n    function rewardPerToken() public view override returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) *\\n                rewardRate *\\n                1e18) / (_totalSupply));\\n    }\\n\\n    /// @return timestamp of the last time rewards are applicable\\n    function lastTimeRewardApplicable() public view override returns (uint256) {\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    /// @notice determine how much reward token an account has earned thus far\\n    /// @param account: address of account earned amount is being calculated for\\n    function earned(address account) public view override returns (uint256) {\\n        return\\n            ((balances[account] *\\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\\n            rewards[account];\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            SETTINGS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice configure reward rate\\n    /// @param reward: amount of token to be distributed over a period\\n    /// @dev updateReward() called prior to function logic (with zero address)\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        override\\n        onlySupplySchedule\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward / rewardsDuration;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            rewardRate = (reward + leftover) / rewardsDuration;\\n        }\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + rewardsDuration;\\n        emit RewardAdded(reward);\\n    }\\n\\n    /// @notice set rewards duration\\n    /// @param _rewardsDuration: denoted in seconds\\n    function setRewardsDuration(uint256 _rewardsDuration)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"StakingRewards: Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            PAUSABLE\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Triggers stopped state\\n    function pauseStakingRewards() external override onlyOwner {\\n        Pausable._pause();\\n    }\\n\\n    /// @dev Returns to normal state.\\n    function unpauseStakingRewards() external override onlyOwner {\\n        Pausable._unpause();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MISCELLANEOUS\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice added to support recovering LP Rewards from other systems\\n    /// such as BAL to be distributed to holders\\n    /// @param tokenAddress: address of token to be recovered\\n    /// @param tokenAmount: amount of token to be recovered\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            tokenAddress != address(token),\\n            \\\"StakingRewards: Cannot unstake the staking token\\\"\\n        );\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xf2dde00960203433ac922bfa897e3ff2fb0fd3b969aabde775636350ddf494e3\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary VestingEntries {\\n    struct VestingEntry {\\n        uint64 endTime;\\n        uint256 escrowAmount;\\n        uint256 duration;\\n    }\\n    struct VestingEntryWithID {\\n        uint64 endTime;\\n        uint256 escrowAmount;\\n        uint256 entryID;\\n    }\\n}\\n\\ninterface IRewardEscrow {\\n    // Views\\n    function getKwentaAddress() external view returns (address);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function numVestingEntries(address account) external view returns (uint256);\\n\\n    function totalEscrowedAccountBalance(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalVestedAccountBalance(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getVestingSchedules(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\\n\\n    function getAccountVestingEntryIDs(\\n        address account,\\n        uint256 index,\\n        uint256 pageSize\\n    ) external view returns (uint256[] memory);\\n\\n    function getVestingEntryClaimable(address account, uint256 entryID)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getVestingEntry(address account, uint256 entryID)\\n        external\\n        view\\n        returns (\\n            uint64,\\n            uint256,\\n            uint256\\n        );\\n\\n    // Mutative functions\\n    function vest(uint256[] calldata entryIDs) external;\\n\\n    function createEscrowEntry(\\n        address beneficiary,\\n        uint256 deposit,\\n        uint256 duration\\n    ) external;\\n\\n    function appendVestingEntry(\\n        address account,\\n        uint256 quantity,\\n        uint256 duration\\n    ) external;\\n\\n    function stakeEscrow(uint256 _amount) external;\\n\\n    function unstakeEscrow(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x982ccdf737fd3aa86031dd74db05ab789c1e9e72f1c1f57a3b5cd59b28378c3f\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStakingRewards {\\n    /// VIEWS\\n    // token state\\n    function totalSupply() external view returns (uint256);\\n    // staking state\\n    function balanceOf(address account) external view returns (uint256);\\n    function escrowedBalanceOf(address account) external view returns (uint256);\\n    function nonEscrowedBalanceOf(address account) external view returns (uint256);\\n    // rewards\\n    function getRewardForDuration() external view returns (uint256);\\n    function rewardPerToken() external view returns (uint256);\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n\\n    /// MUTATIVE\\n    // Staking/Unstaking\\n    function stake(uint256 amount) external;\\n    function unstake(uint256 amount) external;\\n    function stakeEscrow(address account, uint256 amount) external;\\n    function unstakeEscrow(address account, uint256 amount) external;\\n    function exit() external;\\n    // claim rewards\\n    function getReward() external;\\n    // settings\\n    function notifyRewardAmount(uint256 reward) external;\\n    function setRewardsDuration(uint256 _rewardsDuration) external;\\n    // pausable\\n    function pauseStakingRewards() external;\\n    function unpauseStakingRewards() external;\\n    // misc.\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\\n}\\n\",\"keccak256\":\"0x013719683895bb417eda86625eef763dd0254a2dc7f93911a11c25a34b77a059\",\"license\":\"MIT\"},\"contracts/interfaces/ISupplySchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.24;\\n\\ninterface ISupplySchedule {\\n    // Views\\n    function mintableSupply() external view returns (uint);\\n\\n    function isMintable() external view returns (bool);\\n\\n    // Mutative functions\\n\\n    function mint() external;\\n\\n    function setTreasuryDiversion(uint _treasuryDiversion) external;\\n\\n    function setTradingRewardsDiversion(uint _tradingRewardsDiversion) external;\\n    \\n    function setStakingRewards(address _stakingRewards) external;\\n\\n    function setTradingRewards(address _tradingRewards) external;\\n}\",\"keccak256\":\"0x9a0226bfbaa38fb9489133bcd16af7d2279745b725248cedf72261220892fed2\",\"license\":\"MIT\"},\"contracts/utils/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\",\"keccak256\":\"0x9f51a9dd99cc51a332f0a635628dc89262c126c358e4e89041aadbe9a519b06a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526000600755600060085562093a806009553480156200002257600080fd5b5060405162001f1a38038062001f1a833981016040819052620000459162000144565b3380620000985760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a15060016002556003805460ff191690556001600160601b0319606093841b811660805291831b821660a05290911b1660c0526200018e565b80516001600160a01b03811681146200013f57600080fd5b919050565b6000806000606084860312156200015a57600080fd5b620001658462000127565b9250620001756020850162000127565b9150620001856040850162000127565b90509250925092565b60805160601c60a05160601c60c05160601c611d14620002066000396000818161043301526107e30152600081816103f901528181610a8401528181610ae801528181610e47015261126b0152600081816104ab0152818161077201528181610a5a01528181610ce701526111b00152611d146000f3fe608060405234801561001057600080fd5b50600436106102255760003560e01c806380faa57d1161012a578063c40dd66f116100bd578063cd3daf9d1161008c578063e9fad8ee11610071578063e9fad8ee14610495578063ebe2b12b1461049d578063fc0c546a146104a657600080fd5b8063cd3daf9d14610484578063df136d651461048c57600080fd5b8063c40dd66f1461042e578063c8f33c9114610455578063c9c7da161461045e578063cc1a378f1461047157600080fd5b80638da5cb5b116100f95780638da5cb5b146103ce578063985134fb146103e1578063a430be6c146103f4578063a694fc3a1461041b57600080fd5b806380faa57d1461038b5780638980f11f1461039357806389997f9a146103a65780638b876347146103ae57600080fd5b80633c6b16ab116101bd5780635c975abb1161018c57806370a082311161017157806370a082311461035157806379ba50971461037a5780637b0a47ee1461038257600080fd5b80635c975abb146103335780636079916f1461034957600080fd5b80633c6b16ab146102da5780633d18b912146102ed578063514a16c9146102f557806353a47bb71461030857600080fd5b806318160ddd116101f957806318160ddd146102ae5780631c1f78eb146102b65780632e17de78146102be578063386a9525146102d157600080fd5b80628cc2621461022a578063057a601b146102505780630700037d146102795780631627540c14610299575b600080fd5b61023d610238366004611b5d565b6104cd565b6040519081526020015b60405180910390f35b61023d61025e366004611b5d565b6001600160a01b031660009081526005602052604090205490565b61023d610287366004611b5d565b600d6020526000908152604090205481565b6102ac6102a7366004611b5d565b61054a565b005b60065461023d565b61023d6105b4565b6102ac6102cc366004611bc4565b6105cb565b61023d60095481565b6102ac6102e8366004611bc4565b6107d8565b6102ac61097e565b61023d610303366004611b5d565b610b87565b60015461031b906001600160a01b031681565b6040516001600160a01b039091168152602001610247565b60035460ff166040519015158152602001610247565b6102ac610bb5565b61023d61035f366004611b5d565b6001600160a01b031660009081526004602052604090205490565b6102ac610bc7565b61023d60085481565b61023d610cc6565b6102ac6103a1366004611b78565b610cdd565b6102ac610de6565b61023d6103bc366004611b5d565b600c6020526000908152604090205481565b60005461031b906001600160a01b031681565b6102ac6103ef366004611b78565b610df6565b61031b7f000000000000000000000000000000000000000000000000000000000000000081565b6102ac610429366004611bc4565b611020565b61031b7f000000000000000000000000000000000000000000000000000000000000000081565b61023d600a5481565b6102ac61046c366004611b78565b61120a565b6102ac61047f366004611bc4565b6114b5565b61023d6115b5565b61023d600b5481565b6102ac611617565b61023d60075481565b61031b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600d6020908152604080832054600c909252822054670de0b6b3a7640000906105036115b5565b61050d9190611c85565b6001600160a01b0385166000908152600460205260409020546105309190611c66565b61053a9190611c44565b6105449190611c2c565b92915050565b61055261162b565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b60006009546008546105c69190611c66565b905090565b6002805414156106225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600280553361062f6115b5565b600b5561063a610cc6565b600a556001600160a01b0381161561068157610655816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b600082116106d15760405162461bcd60e51b815260206004820181905260248201527f5374616b696e67526577617264733a2043616e6e6f7420556e7374616b6520306044820152606401610619565b6106da33610b87565b8211156107295760405162461bcd60e51b815260206004820152601e60248201527f5374616b696e67526577617264733a20496e76616c696420416d6f756e7400006044820152606401610619565b816006600082825461073b9190611c85565b9091555050336000908152600460205260408120805484929061075f908490611c85565b9091555061079990506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633846116ab565b60405182815233907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75906020015b60405180910390a250506001600255565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108755760405162461bcd60e51b8152602060048201526024808201527f5374616b696e67526577617264733a204f6e6c7920537570706c79205363686560448201527f64756c65000000000000000000000000000000000000000000000000000000006064820152608401610619565b600061087f6115b5565b600b5561088a610cc6565b600a556001600160a01b038116156108d1576108a5816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b60075442106108ef576009546108e79083611c44565b600855610931565b6000426007546108ff9190611c85565b90506000600854826109119190611c66565b6009549091506109218286611c2c565b61092b9190611c44565b60085550505b42600a81905560095461094391611c2c565b6007556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b6002805414156109d05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610619565b60028055336109dd6115b5565b600b556109e8610cc6565b600a556001600160a01b03811615610a2f57610a03816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b336000908152600d60205260409020548015610b7e57336000908152600d6020526040812055610aa97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836116ab565b6040517f1bb47b44000000000000000000000000000000000000000000000000000000008152336004820152602481018290526301dfe20060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631bb47b4490606401600060405180830381600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b50506040518381523392507fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048691506020016107c7565b50506001600255565b6001600160a01b03811660009081526005602090815260408083205460049092528220546105449190611c85565b610bbd61162b565b610bc5611759565b565b6001546001600160a01b03163314610c475760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e65727368697000000000000000000000006064820152608401610619565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1600180546000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b60006007544210610cd8575060075490565b504290565b610ce561162b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610d8d5760405162461bcd60e51b815260206004820152603060248201527f5374616b696e67526577617264733a2043616e6e6f7420756e7374616b65207460448201527f6865207374616b696e6720746f6b656e000000000000000000000000000000006064820152608401610619565b600054610da7906001600160a01b038481169116836116ab565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610972565b610dee61162b565b610bc56117f1565b60035460ff1615610e3c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610619565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ebf5760405162461bcd60e51b815260206004820152602260248201527f5374616b696e67526577617264733a204f6e6c792052657761726420457363726044820152616f7760f01b6064820152608401610619565b81610ec86115b5565b600b55610ed3610cc6565b600a556001600160a01b03811615610f1a57610eee816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b60008211610f6a5760405162461bcd60e51b815260206004820152601e60248201527f5374616b696e67526577617264733a2043616e6e6f74207374616b65203000006044820152606401610619565b6001600160a01b03831660009081526004602052604081208054849290610f92908490611c2c565b90915550506001600160a01b03831660009081526005602052604081208054849290610fbf908490611c2c565b925050819055508160066000828254610fd89190611c2c565b90915550506040518281526001600160a01b038416907f945856e466506640ce955f1ec0de49513761175bad680d8503f7c8d45beabb209060200160405180910390a2505050565b6002805414156110725760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610619565b6002805560035460ff16156110bc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610619565b336110c56115b5565b600b556110d0610cc6565b600a556001600160a01b03811615611117576110eb816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b600082116111675760405162461bcd60e51b815260206004820152601e60248201527f5374616b696e67526577617264733a2043616e6e6f74207374616b65203000006044820152606401610619565b81600660008282546111799190611c2c565b9091555050336000908152600460205260408120805484929061119d908490611c2c565b909155506111d890506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611874565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016107c7565b60028054141561125c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610619565b60028055336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112e35760405162461bcd60e51b815260206004820152602260248201527f5374616b696e67526577617264733a204f6e6c792052657761726420457363726044820152616f7760f01b6064820152608401610619565b816112ec6115b5565b600b556112f7610cc6565b600a556001600160a01b0381161561133e57611312816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b6000821161138e5760405162461bcd60e51b815260206004820181905260248201527f5374616b696e67526577617264733a2043616e6e6f7420556e7374616b6520306044820152606401610619565b6001600160a01b0383166000908152600560205260409020548211156113f65760405162461bcd60e51b815260206004820152601e60248201527f5374616b696e67526577617264733a20496e76616c696420416d6f756e7400006044820152606401610619565b6001600160a01b0383166000908152600460205260408120805484929061141e908490611c85565b90915550506001600160a01b0383166000908152600560205260408120805484929061144b908490611c85565b9250508190555081600660008282546114649190611c85565b9091555050604080516001600160a01b0385168152602081018490527fbd0d30ac1729a6f57b09c27c8f39102f2704fbbf708747dcd198e45cf27f5282910160405180910390a15050600160025550565b6114bd61162b565b60075442116115805760405162461bcd60e51b815260206004820152606860248201527f5374616b696e67526577617264733a2050726576696f7573207265776172647360448201527f20706572696f64206d75737420626520636f6d706c657465206265666f72652060648201527f6368616e67696e6720746865206475726174696f6e20666f7220746865206e6560848201527f7720706572696f6400000000000000000000000000000000000000000000000060a482015260c401610619565b60098190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3906020016105a9565b6000600654600014156115c95750600b5490565b600654600854600a546115da610cc6565b6115e49190611c85565b6115ee9190611c66565b61160090670de0b6b3a7640000611c66565b61160a9190611c44565b600b546105c69190611c2c565b6116236102cc33610b87565b610bc561097e565b6000546001600160a01b03163314610bc55760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e00000000000000000000000000000000006064820152608401610619565b6040516001600160a01b0383166024820152604481018290526117549084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118cb565b505050565b60035460ff161561179f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610619565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117d43390565b6040516001600160a01b03909116815260200160405180910390a1565b60035460ff166118435760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610619565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336117d4565b6040516001600160a01b03808516602483015283166044820152606481018290526118c59085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016116f0565b50505050565b6000611920826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119b09092919063ffffffff16565b805190915015611754578080602001905181019061193e9190611ba2565b6117545760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610619565b60606119bf84846000856119c9565b90505b9392505050565b606082471015611a415760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610619565b843b611a8f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610619565b600080866001600160a01b03168587604051611aab9190611bdd565b60006040518083038185875af1925050503d8060008114611ae8576040519150601f19603f3d011682016040523d82523d6000602084013e611aed565b606091505b5091509150611afd828286611b08565b979650505050505050565b60608315611b175750816119c2565b825115611b275782518084602001fd5b8160405162461bcd60e51b81526004016106199190611bf9565b80356001600160a01b0381168114611b5857600080fd5b919050565b600060208284031215611b6f57600080fd5b6119c282611b41565b60008060408385031215611b8b57600080fd5b611b9483611b41565b946020939093013593505050565b600060208284031215611bb457600080fd5b815180151581146119c257600080fd5b600060208284031215611bd657600080fd5b5035919050565b60008251611bef818460208701611c9c565b9190910192915050565b6020815260008251806020840152611c18816040850160208701611c9c565b601f01601f19169190910160400192915050565b60008219821115611c3f57611c3f611cc8565b500190565b600082611c6157634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611c8057611c80611cc8565b500290565b600082821015611c9757611c97611cc8565b500390565b60005b83811015611cb7578181015183820152602001611c9f565b838111156118c55750506000910152565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203d407c6cbf8aedc936a90a61ede11e346a6300ff9e85453cbfe67d6eb912ff2264736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102255760003560e01c806380faa57d1161012a578063c40dd66f116100bd578063cd3daf9d1161008c578063e9fad8ee11610071578063e9fad8ee14610495578063ebe2b12b1461049d578063fc0c546a146104a657600080fd5b8063cd3daf9d14610484578063df136d651461048c57600080fd5b8063c40dd66f1461042e578063c8f33c9114610455578063c9c7da161461045e578063cc1a378f1461047157600080fd5b80638da5cb5b116100f95780638da5cb5b146103ce578063985134fb146103e1578063a430be6c146103f4578063a694fc3a1461041b57600080fd5b806380faa57d1461038b5780638980f11f1461039357806389997f9a146103a65780638b876347146103ae57600080fd5b80633c6b16ab116101bd5780635c975abb1161018c57806370a082311161017157806370a082311461035157806379ba50971461037a5780637b0a47ee1461038257600080fd5b80635c975abb146103335780636079916f1461034957600080fd5b80633c6b16ab146102da5780633d18b912146102ed578063514a16c9146102f557806353a47bb71461030857600080fd5b806318160ddd116101f957806318160ddd146102ae5780631c1f78eb146102b65780632e17de78146102be578063386a9525146102d157600080fd5b80628cc2621461022a578063057a601b146102505780630700037d146102795780631627540c14610299575b600080fd5b61023d610238366004611b5d565b6104cd565b6040519081526020015b60405180910390f35b61023d61025e366004611b5d565b6001600160a01b031660009081526005602052604090205490565b61023d610287366004611b5d565b600d6020526000908152604090205481565b6102ac6102a7366004611b5d565b61054a565b005b60065461023d565b61023d6105b4565b6102ac6102cc366004611bc4565b6105cb565b61023d60095481565b6102ac6102e8366004611bc4565b6107d8565b6102ac61097e565b61023d610303366004611b5d565b610b87565b60015461031b906001600160a01b031681565b6040516001600160a01b039091168152602001610247565b60035460ff166040519015158152602001610247565b6102ac610bb5565b61023d61035f366004611b5d565b6001600160a01b031660009081526004602052604090205490565b6102ac610bc7565b61023d60085481565b61023d610cc6565b6102ac6103a1366004611b78565b610cdd565b6102ac610de6565b61023d6103bc366004611b5d565b600c6020526000908152604090205481565b60005461031b906001600160a01b031681565b6102ac6103ef366004611b78565b610df6565b61031b7f000000000000000000000000000000000000000000000000000000000000000081565b6102ac610429366004611bc4565b611020565b61031b7f000000000000000000000000000000000000000000000000000000000000000081565b61023d600a5481565b6102ac61046c366004611b78565b61120a565b6102ac61047f366004611bc4565b6114b5565b61023d6115b5565b61023d600b5481565b6102ac611617565b61023d60075481565b61031b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600d6020908152604080832054600c909252822054670de0b6b3a7640000906105036115b5565b61050d9190611c85565b6001600160a01b0385166000908152600460205260409020546105309190611c66565b61053a9190611c44565b6105449190611c2c565b92915050565b61055261162b565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22906020015b60405180910390a150565b60006009546008546105c69190611c66565b905090565b6002805414156106225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600280553361062f6115b5565b600b5561063a610cc6565b600a556001600160a01b0381161561068157610655816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b600082116106d15760405162461bcd60e51b815260206004820181905260248201527f5374616b696e67526577617264733a2043616e6e6f7420556e7374616b6520306044820152606401610619565b6106da33610b87565b8211156107295760405162461bcd60e51b815260206004820152601e60248201527f5374616b696e67526577617264733a20496e76616c696420416d6f756e7400006044820152606401610619565b816006600082825461073b9190611c85565b9091555050336000908152600460205260408120805484929061075f908490611c85565b9091555061079990506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633846116ab565b60405182815233907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75906020015b60405180910390a250506001600255565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108755760405162461bcd60e51b8152602060048201526024808201527f5374616b696e67526577617264733a204f6e6c7920537570706c79205363686560448201527f64756c65000000000000000000000000000000000000000000000000000000006064820152608401610619565b600061087f6115b5565b600b5561088a610cc6565b600a556001600160a01b038116156108d1576108a5816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b60075442106108ef576009546108e79083611c44565b600855610931565b6000426007546108ff9190611c85565b90506000600854826109119190611c66565b6009549091506109218286611c2c565b61092b9190611c44565b60085550505b42600a81905560095461094391611c2c565b6007556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050565b6002805414156109d05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610619565b60028055336109dd6115b5565b600b556109e8610cc6565b600a556001600160a01b03811615610a2f57610a03816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b336000908152600d60205260409020548015610b7e57336000908152600d6020526040812055610aa97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f0000000000000000000000000000000000000000000000000000000000000000836116ab565b6040517f1bb47b44000000000000000000000000000000000000000000000000000000008152336004820152602481018290526301dfe20060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690631bb47b4490606401600060405180830381600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b50506040518381523392507fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048691506020016107c7565b50506001600255565b6001600160a01b03811660009081526005602090815260408083205460049092528220546105449190611c85565b610bbd61162b565b610bc5611759565b565b6001546001600160a01b03163314610c475760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e65727368697000000000000000000000006064820152608401610619565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1600180546000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b60006007544210610cd8575060075490565b504290565b610ce561162b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610d8d5760405162461bcd60e51b815260206004820152603060248201527f5374616b696e67526577617264733a2043616e6e6f7420756e7374616b65207460448201527f6865207374616b696e6720746f6b656e000000000000000000000000000000006064820152608401610619565b600054610da7906001600160a01b038481169116836116ab565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101610972565b610dee61162b565b610bc56117f1565b60035460ff1615610e3c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610619565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ebf5760405162461bcd60e51b815260206004820152602260248201527f5374616b696e67526577617264733a204f6e6c792052657761726420457363726044820152616f7760f01b6064820152608401610619565b81610ec86115b5565b600b55610ed3610cc6565b600a556001600160a01b03811615610f1a57610eee816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b60008211610f6a5760405162461bcd60e51b815260206004820152601e60248201527f5374616b696e67526577617264733a2043616e6e6f74207374616b65203000006044820152606401610619565b6001600160a01b03831660009081526004602052604081208054849290610f92908490611c2c565b90915550506001600160a01b03831660009081526005602052604081208054849290610fbf908490611c2c565b925050819055508160066000828254610fd89190611c2c565b90915550506040518281526001600160a01b038416907f945856e466506640ce955f1ec0de49513761175bad680d8503f7c8d45beabb209060200160405180910390a2505050565b6002805414156110725760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610619565b6002805560035460ff16156110bc5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610619565b336110c56115b5565b600b556110d0610cc6565b600a556001600160a01b03811615611117576110eb816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b600082116111675760405162461bcd60e51b815260206004820152601e60248201527f5374616b696e67526577617264733a2043616e6e6f74207374616b65203000006044820152606401610619565b81600660008282546111799190611c2c565b9091555050336000908152600460205260408120805484929061119d908490611c2c565b909155506111d890506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333085611874565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d906020016107c7565b60028054141561125c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610619565b60028055336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112e35760405162461bcd60e51b815260206004820152602260248201527f5374616b696e67526577617264733a204f6e6c792052657761726420457363726044820152616f7760f01b6064820152608401610619565b816112ec6115b5565b600b556112f7610cc6565b600a556001600160a01b0381161561133e57611312816104cd565b6001600160a01b0382166000908152600d6020908152604080832093909355600b54600c909152919020555b6000821161138e5760405162461bcd60e51b815260206004820181905260248201527f5374616b696e67526577617264733a2043616e6e6f7420556e7374616b6520306044820152606401610619565b6001600160a01b0383166000908152600560205260409020548211156113f65760405162461bcd60e51b815260206004820152601e60248201527f5374616b696e67526577617264733a20496e76616c696420416d6f756e7400006044820152606401610619565b6001600160a01b0383166000908152600460205260408120805484929061141e908490611c85565b90915550506001600160a01b0383166000908152600560205260408120805484929061144b908490611c85565b9250508190555081600660008282546114649190611c85565b9091555050604080516001600160a01b0385168152602081018490527fbd0d30ac1729a6f57b09c27c8f39102f2704fbbf708747dcd198e45cf27f5282910160405180910390a15050600160025550565b6114bd61162b565b60075442116115805760405162461bcd60e51b815260206004820152606860248201527f5374616b696e67526577617264733a2050726576696f7573207265776172647360448201527f20706572696f64206d75737420626520636f6d706c657465206265666f72652060648201527f6368616e67696e6720746865206475726174696f6e20666f7220746865206e6560848201527f7720706572696f6400000000000000000000000000000000000000000000000060a482015260c401610619565b60098190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3906020016105a9565b6000600654600014156115c95750600b5490565b600654600854600a546115da610cc6565b6115e49190611c85565b6115ee9190611c66565b61160090670de0b6b3a7640000611c66565b61160a9190611c44565b600b546105c69190611c2c565b6116236102cc33610b87565b610bc561097e565b6000546001600160a01b03163314610bc55760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e00000000000000000000000000000000006064820152608401610619565b6040516001600160a01b0383166024820152604481018290526117549084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118cb565b505050565b60035460ff161561179f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610619565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117d43390565b6040516001600160a01b03909116815260200160405180910390a1565b60035460ff166118435760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610619565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336117d4565b6040516001600160a01b03808516602483015283166044820152606481018290526118c59085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016116f0565b50505050565b6000611920826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119b09092919063ffffffff16565b805190915015611754578080602001905181019061193e9190611ba2565b6117545760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610619565b60606119bf84846000856119c9565b90505b9392505050565b606082471015611a415760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610619565b843b611a8f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610619565b600080866001600160a01b03168587604051611aab9190611bdd565b60006040518083038185875af1925050503d8060008114611ae8576040519150601f19603f3d011682016040523d82523d6000602084013e611aed565b606091505b5091509150611afd828286611b08565b979650505050505050565b60608315611b175750816119c2565b825115611b275782518084602001fd5b8160405162461bcd60e51b81526004016106199190611bf9565b80356001600160a01b0381168114611b5857600080fd5b919050565b600060208284031215611b6f57600080fd5b6119c282611b41565b60008060408385031215611b8b57600080fd5b611b9483611b41565b946020939093013593505050565b600060208284031215611bb457600080fd5b815180151581146119c257600080fd5b600060208284031215611bd657600080fd5b5035919050565b60008251611bef818460208701611c9c565b9190910192915050565b6020815260008251806020840152611c18816040850160208701611c9c565b601f01601f19169190910160400192915050565b60008219821115611c3f57611c3f611cc8565b500190565b600082611c6157634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611c8057611c80611cc8565b500290565b600082821015611c9757611c97611cc8565b500390565b60005b83811015611cb7578181015183820152602001611c9f565b838111156118c55750506000910152565b634e487b7160e01b600052601160045260246000fdfea26469706673582212203d407c6cbf8aedc936a90a61ede11e346a6300ff9e85453cbfe67d6eb912ff2264736f6c63430008070033",
  "devdoc": {
    "author": "SYNTHETIX, JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)",
    "events": {
      "EscrowStaked(address,uint256)": {
        "params": {
          "amount": ": amount staked",
          "user": ": owner of escrowed tokens address"
        }
      },
      "EscrowUnstaked(address,uint256)": {
        "params": {
          "amount": ": amount unstaked",
          "user": ": owner of escrowed tokens address"
        }
      },
      "Recovered(address,uint256)": {
        "params": {
          "amount": ": amount of token recovered",
          "token": ": address of token recovered"
        }
      },
      "RewardAdded(uint256)": {
        "params": {
          "reward": ": amount to be distributed over applicable rewards duration"
        }
      },
      "RewardPaid(address,uint256)": {
        "params": {
          "reward": ": amount of reward token claimed",
          "user": ": address of user claiming rewards"
        }
      },
      "RewardsDurationUpdated(uint256)": {
        "params": {
          "newDuration": ": denoted in seconds"
        }
      },
      "Staked(address,uint256)": {
        "params": {
          "amount": ": amount staked",
          "user": ": staker address"
        }
      },
      "Unstaked(address,uint256)": {
        "params": {
          "amount": ": amount unstaked",
          "user": ": address of user unstaking"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "account": ": address of potential staker"
        },
        "returns": {
          "_0": "amount of tokens staked by account"
        }
      },
      "constructor": {
        "details": "owner set to address that deployed StakingRewards",
        "params": {
          "_rewardEscrow": ": escrow contract which holds (and may stake) reward tokens",
          "_supplySchedule": ": handles reward token minting logic",
          "_token": ": token used for staking and for rewards"
        }
      },
      "earned(address)": {
        "params": {
          "account": ": address of account earned amount is being calculated for"
        }
      },
      "escrowedBalanceOf(address)": {
        "params": {
          "account": "address to check the escrowed tokens staked"
        },
        "returns": {
          "_0": "amount of escrowed tokens staked"
        }
      },
      "getReward()": {
        "details": "rewards are escrowed in RewardEscrowupdateReward() called prior to function logic"
      },
      "getRewardForDuration()": {
        "returns": {
          "_0": "rewards for the duration specified by rewardsDuration"
        }
      },
      "lastTimeRewardApplicable()": {
        "returns": {
          "_0": "timestamp of the last time rewards are applicable"
        }
      },
      "nonEscrowedBalanceOf(address)": {
        "params": {
          "account": "address to check the non-escrowed tokens staked"
        },
        "returns": {
          "_0": "amount of non-escrowed tokens staked"
        }
      },
      "notifyRewardAmount(uint256)": {
        "details": "updateReward() called prior to function logic (with zero address)",
        "params": {
          "reward": ": amount of token to be distributed over a period"
        }
      },
      "pauseStakingRewards()": {
        "details": "Triggers stopped state"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": ": address of token to be recovered",
          "tokenAmount": ": amount of token to be recovered"
        }
      },
      "rewardPerToken()": {
        "returns": {
          "_0": "running sum of reward per total tokens staked"
        }
      },
      "setRewardsDuration(uint256)": {
        "params": {
          "_rewardsDuration": ": denoted in seconds"
        }
      },
      "stake(uint256)": {
        "details": "updateReward() called prior to function logic",
        "params": {
          "amount": ": amount to stake"
        }
      },
      "stakeEscrow(address,uint256)": {
        "details": "updateReward() called prior to function logicmsg.sender NOT used (account is used)",
        "params": {
          "account": ": address which owns token",
          "amount": ": amount to stake"
        }
      },
      "totalSupply()": {
        "details": "returns staked tokens which will likely not be equal to total tokens in the contract since reward and staking tokens are the same",
        "returns": {
          "_0": "total amount of tokens that are being staked"
        }
      },
      "unpauseStakingRewards()": {
        "details": "Returns to normal state."
      },
      "unstake(uint256)": {
        "details": "updateReward() called prior to function logic",
        "params": {
          "amount": ": amount to unstake"
        }
      },
      "unstakeEscrow(address,uint256)": {
        "details": "updateReward() called prior to function logicmsg.sender NOT used (account is used)",
        "params": {
          "account": ": address which owns token",
          "amount": ": amount to unstake"
        }
      }
    },
    "stateVariables": {
      "balances": {
        "details": "this includes escrowed tokens stake"
      }
    },
    "title": "KWENTA Staking Rewards",
    "version": 1
  },
  "userdoc": {
    "events": {
      "EscrowStaked(address,uint256)": {
        "notice": "emitted when escrow staked"
      },
      "EscrowUnstaked(address,uint256)": {
        "notice": "emitted when staked escrow tokens are unstaked"
      },
      "Recovered(address,uint256)": {
        "notice": "emitted when tokens are recovered from this contract"
      },
      "RewardAdded(uint256)": {
        "notice": "update reward rate"
      },
      "RewardPaid(address,uint256)": {
        "notice": "emitted when user claims rewards"
      },
      "RewardsDurationUpdated(uint256)": {
        "notice": "emitted when rewards duration changes"
      },
      "Staked(address,uint256)": {
        "notice": "emitted when user stakes tokens"
      },
      "Unstaked(address,uint256)": {
        "notice": "emitted when user unstakes tokens"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "configure StakingRewards state"
      },
      "earned(address)": {
        "notice": "determine how much reward token an account has earned thus far"
      },
      "escrowedBalanceOf(address)": {
        "notice": "Getter function for number of staked escrow tokens"
      },
      "exit()": {
        "notice": "unstake all available staked non-escrowed tokens and claim any rewards"
      },
      "getReward()": {
        "notice": "caller claims any rewards generated from staking"
      },
      "lastUpdateTime()": {
        "notice": "track last time the rewards were updated"
      },
      "nonEscrowedBalanceOf(address)": {
        "notice": "Getter function for number of staked non-escrow tokens"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "configure reward rate"
      },
      "periodFinish()": {
        "notice": "marks applicable reward period finish time"
      },
      "recoverERC20(address,uint256)": {
        "notice": "added to support recovering LP Rewards from other systems such as BAL to be distributed to holders"
      },
      "rewardEscrow()": {
        "notice": "escrow contract which holds (and may stake) reward tokens"
      },
      "rewardPerToken()": {
        "notice": "calculate running sum of reward per total tokens staked at this specific time"
      },
      "rewardPerTokenStored()": {
        "notice": "summation of rewardRate divided by total staked tokens"
      },
      "rewardRate()": {
        "notice": "amount of tokens minted per second"
      },
      "rewards(address)": {
        "notice": "track rewards for a given user which changes when a user stakes, unstakes, or claims rewards"
      },
      "rewardsDuration()": {
        "notice": "period for rewards"
      },
      "setRewardsDuration(uint256)": {
        "notice": "set rewards duration"
      },
      "stake(uint256)": {
        "notice": "stake token"
      },
      "stakeEscrow(address,uint256)": {
        "notice": "stake escrowed token"
      },
      "supplySchedule()": {
        "notice": "handles reward token minting logic"
      },
      "token()": {
        "notice": "token used for BOTH staking and rewards"
      },
      "unstake(uint256)": {
        "notice": "unstake token"
      },
      "unstakeEscrow(address,uint256)": {
        "notice": "unstake escrowed token"
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "represents the rewardPerToken value the last time the stake calculated earned() rewards"
      }
    },
    "notice": "Updated version of Synthetix's StakingRewards with new features specific to Kwenta",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5894,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5896,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 102,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 17,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 3126,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3131,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "escrowedBalances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3134,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3138,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3142,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardRate",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3146,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3149,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3152,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3157,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3162,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}